import React, { useEffect, useState } from 'react';
import { fetchReactions, fetchProducts, fetchProductMeta, fetchProductDetails } from './api';
import ReactionList from './components/ReactionList';
import ProductGrid from './components/ProductGrid';
import ProductDetail from './components/ProductDetail';
import ChatWindow from './components/ChatWindow';
import SidebarHistory from './components/SidebarHistory';
import { motion } from 'framer-motion';

export default function App() {
  const [reactions, setReactions] = useState([]);
  const [selectedReaction, setSelectedReaction] = useState(null);
  const [products, setProducts] = useState([]);
  const [selectedProductMeta, setSelectedProductMeta] = useState(null);
  const [productDetails, setProductDetails] = useState(null);
  const [messages, setMessages] = useState([
    { role: 'assistant', content: "Hello! I'm your expert assistant. Ask me anything about the selected document or reaction." }
  ]);
  const [history, setHistory] = useState([]);

  useEffect(() => {
    fetchReactions().then(setReactions).catch(err => console.error(err));
  }, []);

  // Whenever selectedReaction changes, fetch products
  useEffect(() => {
    if (!selectedReaction) {
      // If no reaction selected, optionally clear product list or load all products
      setProducts([]);
      return;
    }
    fetchProducts(selectedReaction)
      .then(setProducts)
      .catch(err => {
        console.error(err);
        setMessages(prev => [...prev, { role: 'assistant', content: 'Failed to load products for that reaction.' }]);
      });
  }, [selectedReaction]);

  // Handle explicit product selection from the UI
  const handleSelectProduct = async (productId) => {
    try {
      const meta = await fetchProductMeta(productId);
      setSelectedProductMeta(meta);
      // call details endpoint
      const res = await fetchProductDetails(productId);
      const details = res.data || res;
      setProductDetails(details);
      // keep chat box present and let user know it's loaded
      setMessages(prev => [...prev, { role: 'assistant', content: `Loaded ${meta.name}. You can now ask questions about this document.` }]);
      // Save to history (front-facing preview)
      setHistory(h => [{ title: meta.name, content: details.procedure ? details.procedure.slice(0, 120) : '', productId: meta.id }, ...h]);
    } catch (e) {
      console.error(e);
      setMessages(prev => [...prev, { role: 'assistant', content: 'Failed to load product details.' }]);
    }
  };

  // Utility: normalize reaction names so "c c bond formation", "C-C_Bond_Formation", "C C Bond Formation" all match
  const normalize = (s) => (s || '').toString().toLowerCase().replace(/[^a-z0-9]/g, '');

  // Main chat send handler — now handles reaction selection + QA queries
  const handleSendMessage = async (text) => {
    // add user's message to chat
    setMessages(prev => [...prev, { role: 'user', content: text }]);

    // 1) Check if user is asking for a reaction type by matching available reactions
    // We allow common variants: underscores/space/dashes/uppercase
    const normalizedText = normalize(text);
    const matchedReaction = reactions.find(r => normalize(r) === normalizedText || normalize(r) === normalize(text.replace(/\s+/g, '_')));
    if (matchedReaction) {
      // set the reaction (this triggers the useEffect to load products)
      setSelectedReaction(matchedReaction);
      // fetch immediately to populate UI (so user sees response faster)
      try {
        const prodList = await fetchProducts(matchedReaction);
        setProducts(prodList || []);
        if (!prodList || prodList.length === 0) {
          setMessages(prev => [...prev, { role: 'assistant', content: `No products found for ${matchedReaction.replace(/_/g,' ')}.` }]);
        } else {
          setMessages(prev => [...prev, { role: 'assistant', content: `Found ${prodList.length} products for ${matchedReaction.replace(/_/g,' ')}. Select any product to load details.` }]);
        }
      } catch (err) {
        console.error(err);
        setMessages(prev => [...prev, { role: 'assistant', content: 'Error fetching products for that reaction.' }]);
      }
      return; // done — don't run QA flow
    }

    // 2) If user typed something that looks like "show products for <reaction>", try to extract reaction token
    // e.g., "show products for C-C Bond Formation" or "show me C N Bond Formation"
    const prefixMatch = text.match(/(show|list|find).{0,20}for\s+(.+)/i);
    if (prefixMatch && prefixMatch[2]) {
      const candidate = prefixMatch[2].trim();
      const candidateNorm = normalize(candidate);
      const found = reactions.find(r => normalize(r).includes(candidateNorm) || normalize(candidate).includes(normalize(r)));
      if (found) {
        setSelectedReaction(found);
        try {
          const prodList = await fetchProducts(found);
          setProducts(prodList || []);
          setMessages(prev => [...prev, { role: 'assistant', content: `Found ${prodList.length} products for ${found.replace(/_/g,' ')}.` }]);
        } catch (e) {
          console.error(e);
          setMessages(prev => [...prev, { role: 'assistant', content: 'Error fetching products for that reaction.' }]);
        }
        return;
      }
    }

    // 3) Otherwise: QA flow for the currently selected product
    if (!selectedProductMeta) {
      // still no product selected
      setMessages(prev => [...prev, { role: 'assistant', content: 'Please select a product/document first.' }]);
      return;
    }

    // Send user's question to the backend QA endpoint (product-specific)
    try {
      const res = await fetchProductDetails(selectedProductMeta.id, text);
      const d = res.data || res;
      // Build a readable assistant message from structured JSON
      let assistantText = '';
      if (d.api_name) assistantText += `API: ${d.api_name}\n\n`;
      if (d.reaction_chemistry) assistantText += `Reaction: ${d.reaction_chemistry}\n\n`;
      if (d.yield) assistantText += `Yield: ${d.yield}\n\n`;
      if (d.procedure) assistantText += `Procedure (excerpt):\n${(d.procedure||'').slice(0,1000)}\n\n`;
      if (d.tables && d.tables.length > 0) assistantText += `Detected ${d.tables.length} table(s). See the right panel for structured tables.`;
      if (!assistantText) assistantText = 'No structured answer found for that question.';
      setMessages(prev => [...prev, { role: 'assistant', content: assistantText }]);
    } catch (err) {
      console.error(err);
      setMessages(prev => [...prev, { role: 'assistant', content: 'Error querying backend.' }]);
    }
  };

  return (
    <div className="min-h-screen flex">
      {/* Left column - controls */}
      <div className="w-96 p-6">
        <div className="mb-6">
          <h1 className="text-3xl font-bold text-primary">Reaction Database AI</h1>
          <p className="text-sm text-gray-600 mt-1">Where chemistry meets intelligence — demo frontend</p>
        </div>

        <div className="space-y-6">
          <ReactionList reactions={reactions} selected={selectedReaction} onSelect={setSelectedReaction} />
          <div>
            <h4 className="text-lg font-semibold text-primary mb-2">Products</h4>
            <div className="space-y-3">
              <ProductGrid products={products} onView={handleSelectProduct} />
            </div>
          </div>
        </div>
      </div>

      {/* Center - chat + product details */}
      <div className="flex-1 flex flex-col p-6 gap-6">
        <div className="flex-1 flex gap-6">
          <div className="flex-1 bg-transparent rounded-2xl p-4">
            <ChatWindow messages={messages} onSend={handleSendMessage} />
          </div>
          <div className="w-1/2">
            <ProductDetail meta={selectedProductMeta} details={productDetails || {}} />
          </div>
        </div>
      </div>

      {/* Right - history */}
      <div className="w-80 p-6">
        <SidebarHistory history={history} onSelect={(i) => {
          const h = history[i];
          // reopen product
          if (h && h.productId) handleSelectProduct(h.productId);
        }} />
      </div>
    </div>
  );
}
