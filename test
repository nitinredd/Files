import pandas as pd
import numpy as np
import scipy.stats as stats
import plotly.graph_objs as go
from plotly.subplots import make_subplots
from scipy.stats import norm
 
 
# Generate sample data
data = pd.Series([0.23, 0.29, 0.02, 0.42, 0.38, 0.37, 0.33, 0.23, 0.28, 0.5, 0.4, 0.28, 0.27])
n = len(data)
 
# Estimate mean and std
mean = np.mean(data)
std = np.std(data, ddof=1)
 
# Calculate empirical cumulative probabilities
sorted_data = data.sort_values()
ecdf = (np.arange(1, n + 1)) / (n + 1)
print(ecdf)
 
# Simulate Lilliefors critical value
def simulate_lilliefors_critical_value(n, alpha=0.05, num_simulations=100):
    D_values = []
    for _ in range(num_simulations):
        sample = np.random.normal(loc=0, scale=1, size=n)
        sample_mean = np.mean(sample)
        sample_std = np.std(sample, ddof=1)
        z_scores = (sample - sample_mean) / sample_std
        z_scores.sort()
        ecdf_sim = np.arange(1, n + 1) / (n+1)
        cdf = stats.norm.cdf(z_scores)
        D = np.max(np.abs(ecdf_sim - cdf))
        D_values.append(D)
    return np.percentile(D_values, 100 * (1 - alpha))
 
# Q-Q plot with empirical CDF and Lilliefors confidence bands
def qq_plot_interactive(data, alpha=0.05):
    n = len(data)
    ord_data = data.sort_values()
    plotting_positions = stats.norm.ppf((np.arange(1, n + 1)) / (n+2))
   
    # Fit line for normal distribution
    slope, intercept, _, _, _ = stats.linregress(plotting_positions, ord_data)
    fit_line = intercept + slope * plotting_positions
    print(fit_line)
   
    # Simulate Lilliefors critical value
    D_critical = simulate_lilliefors_critical_value(n=n, alpha=alpha)
   
    # Calculate ECDF for lower and upper bands
    lower_quantile = stats.norm.ppf(np.clip(ecdf - D_critical, 1e-10, 1 - 1e-10))
    upper_quantile = stats.norm.ppf(np.clip(ecdf + D_critical, 1e-10, 1 - 1e-10))
   
    # Transform quantile bands to data space using the fitted line
    lower_band = intercept + slope * lower_quantile
    upper_band = intercept + slope * upper_quantile
   
    # Create interactive plot using Plotly
    fig = go.Figure()
 
    # Add data points to the primary y-axis
    fig.add_trace(go.Scatter(x=plotting_positions, y=ord_data, mode='markers', name='Data',
                             marker=dict(color='blue', size=10, line=dict(width=1, color='darkblue'))))
 
    # # Add fitted normal line to the primary y-axis
    fig.add_trace(go.Scatter(x=plotting_positions, y=fit_line, mode='lines', name='Normal Fit',
                             line=dict(color='black', width=2)))
 
    # Add upper confidence band to the secondary y-axis
    fig.add_trace(go.Scatter(x=plotting_positions, y=upper_band, mode='lines', name='Upper Confidence Band',
                             line=dict(color='red', dash='dash', width=2)))
 
    # Add lower confidence band to the secondary y-axis
    fig.add_trace(go.Scatter(x=plotting_positions, y=lower_band, mode='lines', name='Lower Confidence Band',
                             line=dict(color='green', dash='dash', width=2)))
 
    # Update layout for the plot
    fig.update_layout(
        title="Normal Quantile Plot with Lilliefors Confidence Bands",
        xaxis_title="Theoretical Quantiles (Van der Waerden)",  # Primary x-axis
        yaxis_title="Sample Quantiles",
        width=900,
        height=700,
        margin=dict(l=40, r=40, t=40, b=40),
        plot_bgcolor='rgba(240,240,240,1)',
        paper_bgcolor='rgba(255,255,255,1)'
    )
 
    # Add gridlines
    fig.update_xaxes(showgrid=True, gridcolor='lightgray', gridwidth=1)
    fig.update_yaxes(showgrid=True, gridcolor='lightgray', gridwidth=1)
   
    return fig
 
# Create and show the interactive Q-Q plot
fig = qq_plot_interactive(data)
fig.show()
