import numpy as np
import math

def calculate_f2_either85(reference_df, test_df):
    """
    1. Keeps time 0.
    2. Finds the first non‑zero timepoint where either mean(reference) or mean(test) > 85%.
    3. Trims both DataFrames to include rows [0 .. that timepoint].
    4. Computes f2 on the trimmed means:
         f2 = 50 * log10(100 / (1 + sqrt(mean((test_mean - ref_mean)^2))))
    Returns: (f2, trimmed_times, ref_means, test_means)
    """
    # Extract time vector and per‑row means (dissolution %)
    times      = reference_df.iloc[:, 0].astype(float).values
    ref_means  = reference_df.iloc[:, 1:].mean(axis=1).values
    test_means = test_df.iloc[:,      1:].mean(axis=1).values

    # Find first index AFTER time=0 where either mean > 85%
    exceed_idx = None
    for i in range(1, len(times)):
        if ref_means[i] > 85 or test_means[i] > 85:
            exceed_idx = i
            break
    if exceed_idx is None:
        raise ValueError("Neither reference nor test mean exceeds 85% at any non‑zero timepoint.")

    # Trim to [0 .. exceed_idx]
    trimmed_times = times[:exceed_idx+1]
    trimmed_ref   = ref_means[:exceed_idx+1].copy()
    trimmed_test  = test_means[:exceed_idx+1].copy()

    # Force 0% at t=0
    if trimmed_times[0] == 0:
        trimmed_ref[0]  = 0.0
        trimmed_test[0] = 0.0

    # Compute f2
    diff = trimmed_test - trimmed_ref
    f2   = 50 * math.log10(100 / (1 + math.sqrt(np.mean(diff**2))))

    return f2, trimmed_times, trimmed_ref, trimmed_test
##############################
elif input1 == 2:
    print("According to EMA/ICH/Canada/Australia guidelines")

    # 1) CV check
    cv_check = check_cv(test_df) and check_cv(reference_df)
    print("CV <20 at first non-zero, <10 thereafter:", cv_check)

    # 2) Verify time alignment
    if not check_same_time_points(test_df, reference_df):
        print("Error: Time points between test and reference do not match.")
    else:
        print("\nAnalysis based on ‘either >85%’ dissolution criterion:")
        try:
            f2_value, times, ref_vals, test_vals = calculate_f2_either85(reference_df, test_df)

            # Cast to Python floats for clean printing
            times_py    = [float(t) for t in times]
            ref_py      = [round(float(v), 2) for v in ref_vals]
            test_py     = [round(float(v), 2) for v in test_vals]

            print(f"Trimmed times: {times_py}")
            print(f"Reference means (%): {ref_py}")
            print(f"Test means      (%): {test_py}")
            print(f"Calculated f2 (either>85% rule): {f2_value:.2f}")

            if not cv_check:
                print("\nWarning: CV requirements not met; interpret with caution.")
            print("\nNow computing bootstrap percentile & BCA intervals…")
            changed_data_either85_bca(reference_df, test_df)

        except ValueError as e:
            print("❌", e)
            print("Cannot perform ‘either >85%’–based f2 calculation.")
