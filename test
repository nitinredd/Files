def predictive_optimal_combinations_advanced(ref_df, test_df, regulation, window_min, window_max, diff_threshold, interp_method='gpr'):
    # ... existing code ...
    
    # ========== MODIFIED TIME GENERATION ==========
    if window_min == 0 and window_max == 60:
        # Combine 3 & 5 minute steps for 0-60 window
        times_3 = list(range(0, 61, 3))
        times_5 = list(range(0, 61, 5))
        times_list = sorted(list(set(times_3 + times_5)))
    else:
        # 5-minute steps for other windows
        times_list = list(range(window_min, window_max + 1, 5))
    # ========== END MODIFICATION ==========

def search_sequence(seq, next_index):
    # ... existing code ...
    for i in range(next_index, len(times_list)):
        next_time = times_list[i]
        if next_time <= seq[-1]:
            continue  # This maintains ordering
        seq.append(next_time)
        search_sequence(seq, i + 1)
        seq.pop()
