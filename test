# In the main execution section after regulatory checks:
run_predictive = input("\nDo you want to run predictive optimal combination analysis? (yes/no): ")
if run_predictive.lower() == 'yes':
    # Determine candidate window
    window_min, window_max = determine_candidate_window(
        reference_mean_df, 
        test_mean_df,
        step=5, 
        initial_threshold=10
    )
    
    # Map regulation for predictive analysis
    regulation_map = {1: "FDA", 2: "EMA", 3: "China", 4: "ASEAN", 5: "ANVISA"}
    selected_regulation = regulation_map.get(input1, "FDA")
    
    # Run predictive analysis under different conditions
    conditions = [("Diff threshold 10", 10), 
                 ("Diff threshold 20", 20), 
                 ("No diff check", None)]
    
    all_candidates = []
    overall_best = None
    overall_best_f2 = -np.inf

    print(f"\nCandidate window for combination search: {window_min} to {window_max}")
    
    for cond_label, threshold in conditions:
        print(f"\nProcessing candidates for condition: {cond_label}")
        
        # Get results for this condition
        top_results, all_results = predictive_optimal_combinations_advanced(
            reference_mean_df,
            test_mean_df,
            regulation=selected_regulation,
            window_min=window_min,
            window_max=window_max,
            diff_threshold=threshold,
            num_samples=5000
        )
        
        # Add condition label to results
        for res in top_results:
            res['condition'] = cond_label
        all_candidates.extend(top_results)
        
        # Track overall best
        if top_results:
            current_best = max(top_results, key=lambda x: x['f2'])
            if current_best['f2'] > overall_best_f2:
                overall_best = current_best
                overall_best_f2 = current_best['f2']

    # Display final results
    if overall_best:
        print("\n=== Optimal Predictive Combination ===")
        print(f"Condition: {overall_best.get('condition','N/A')}")
        print(f"Time Points: {overall_best['sequence']}")
        print(f"f2 Score: {overall_best['f2']}")
        if overall_best['reasons']:
            print(f"Compliance Issues: {', '.join(overall_best['reasons']}")
        else:
            print("Compliance: Yes")
    else:
        print("\nNo valid combinations found across all conditions")
