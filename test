import React, { useState, useRef, useEffect } from 'react'
import axios from 'axios'
import './Chatbot.css'

const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition

export default function Chatbot({ apiUrl, backgroundImage, samplePrompts }) {
  const [open, setOpen] = useState(false)
  const [tiles, setTiles] = useState({})
  const [messages, setMessages] = useState([])
  const [input, setInput] = useState('')
  const [listening, setListening] = useState(false)
  const [loading, setLoading] = useState(false)
  const recognitionRef = useRef(null)
  const messagesEndRef = useRef(null)

  // Initialize speech recognition
  useEffect(() => {
    if (!SpeechRecognition) return
    const recog = new SpeechRecognition()
    recog.continuous = false
    recog.interimResults = false
    recog.lang = 'en-US'
    recog.onstart = () => setListening(true)
    recog.onend   = () => setListening(false)
    recog.onresult = e => {
      const text = e.results[0][0].transcript
      handleSend(text)
    }
    recognitionRef.current = recog
  }, [])

  // Load sample prompts
  useEffect(() => {
    setTiles(samplePrompts || {})
  }, [samplePrompts])

  // On open, show greeting + tiles
  useEffect(() => {
    if (open && messages.length === 0 && Object.keys(tiles).length) {
      setMessages([
        { from: 'bot', text: 'Hi! How can I help?' },
        { from: 'bot', options: Object.keys(tiles) }
      ])
    }
  }, [open, tiles, messages.length])

  // Auto-scroll
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })
  }, [messages, loading])

  const handleSend = async (text) => {
    setLoading(true)
    setMessages(m => [...m, { from: 'user', text }])
    setMessages(m => [...m, { from: 'bot', text: 'Analyzing...', loading: true }])
    setInput('')
    try {
      const res = await axios.post(apiUrl, { message: text })
      // remove loading bubble
      setMessages(m => m.filter(msg => !msg.loading))
      setMessages(m => [...m, { from: 'bot', text: res.data.response }])
    } catch {
      setMessages(m => m.filter(msg => !msg.loading))
      setMessages(m => [...m, { from: 'bot', text: 'Server error.' }])
    } finally {
      setLoading(false)
    }
  }

  const startListening = () => {
    if (recognitionRef.current) recognitionRef.current.start()
  }

  const playAudio = async text => {
    try {
      const audioRes = await axios.get(
        apiUrl.replace(/\/chat$/, '') + '/text-to-speech',
        { params: { text }, responseType: 'blob' }
      )
      const url = URL.createObjectURL(audioRes.data)
      new Audio(url).play()
    } catch {}
  }

  return (
    <>
      {/* Sphere trigger */}
      <div
        className={`chat-trigger ${open ? 'open' : ''}`}
        onClick={() => setOpen(o => !o)}
      />

      {/* Chat window */}
      {open && (
        <div className="chatbot-widget">
          <div className="chat-body">
            <div className="messages">
              {messages.map((m,i) =>
                m.options ? (
                  <div key={i} className="bot-options">
                    {m.options.map((opt,j) => (
                      <button
                        key={j}
                        className="tile-btn"
                        onClick={() => handleSend(opt)}
                      >{opt}</button>
                    ))}
                  </div>
                ) : (
                  <div key={i} className={`bubble ${m.from}`}>
                    {m.text}
                    {m.loading && <img src="/spinner.gif" alt="..." className="spinner" />}
                    {m.from==='bot' && !m.loading && (
                      <button className="read-btn" onClick={()=>playAudio(m.text)}>üîä</button>
                    )}
                  </div>
                )
              )}
              <div ref={messagesEndRef} />
            </div>

            <div className="chat-input">
              <div className="mic-wrapper" onClick={startListening}>
                {listening
                  ? <img src="/wave.gif" alt="Listening‚Ä¶" className="wave-gif" />
                  : <span className="mic-icon">üéôÔ∏è</span>
                }
              </div>
              <input
                value={input}
                onChange={e=>setInput(e.target.value)}
                onKeyDown={e=>e.key==='Enter'&&input.trim()&&!loading&&handleSend(input)}
                placeholder="Ask, write or search for anything..."
              />
              <button
                className="send-btn"
                disabled={!input.trim()||loading}
                onClick={()=>handleSend(input)}
              >‚û§</button>
            </div>
          </div>
        </div>
      )}
    </>
  )
}
#############################

/* Sphere trigger button */
.chat-trigger {
  position: fixed;
  bottom: 24px;
  right: 24px;
  width: 64px;
  height: 64px;
  border-radius: 50%;
  background: radial-gradient(circle at top left, #6c5ce7, #fd79a8);
  box-shadow: 0 8px 20px rgba(0,0,0,0.2);
  cursor: pointer;
  transition: transform .2s, box-shadow .2s;
  z-index: 1000;
}
.chat-trigger:hover {
  transform: translateY(-4px);
  box-shadow: 0 12px 24px rgba(0,0,0,0.3);
}
.chat-trigger.open {
  opacity: 0;
  transform: scale(0.8);
}

/* Chat window container */
.chatbot-widget {
  position: fixed;
  bottom: 100px;
  right: 24px;
  width: 360px;
  max-height: 500px;
  backdrop-filter: blur(20px);
  background: rgba(255,255,255,0.3);
  border-radius: 16px;
  box-shadow: 0 16px 40px rgba(0,0,0,0.2);
  overflow: hidden;
  display: flex;
  flex-direction: column;
  z-index: 999;
}

/* Message area */
.chat-body {
  flex: 1;
  display: flex;
  flex-direction: column;
}

.messages {
  flex: 1;
  padding: 16px;
  overflow-y: auto;
}

/* Bubbles */
.bubble {
  display: inline-block;
  padding: 12px 16px;
  margin: 8px 0;
  border-radius: 20px;
  position: relative;
  max-width: 80%;
  font-size: 0.95em;
}

.bubble.user {
  background: rgba(255,255,255,0.6);
  margin-left: auto;
}

.bubble.bot {
  background: rgba(255,255,255,0.8);
  margin-right: auto;
}

.bubble.bot::after {
  content: '';
  position: absolute;
  top: 50%; left: -8px;
  border-top: 8px solid transparent;
  border-right: 8px solid rgba(255,255,255,0.8);
  border-bottom: 8px solid transparent;
  transform: translateY(-50%);
}

.bubble.user::after {
  content: '';
  position: absolute;
  top: 50%; right: -8px;
  border-top: 8px solid transparent;
  border-left: 8px solid rgba(255,255,255,0.6);
  border-bottom: 8px solid transparent;
  transform: translateY(-50%);
}

/* Spinner in analyzing */
.spinner {
  width: 16px; height: 16px;
  margin-left: 8px;
  vertical-align: middle;
}

/* Sample‚Äëprompt tiles */
.bot-options {
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
  margin: 8px 0;
}
.tile-btn {
  background: linear-gradient(135deg, #74b9ff, #a29bfe);
  border: none;
  border-radius: 24px;
  padding: 8px 16px;
  color: white;
  cursor: pointer;
  box-shadow: 0 8px 16px rgba(0,0,0,0.1);
  transition: transform .1s;
}
.tile-btn:hover {
  transform: translateY(-2px);
}

/* Input area */
.chat-input {
  display: flex;
  align-items: center;
  padding: 12px;
  border-top: 1px solid rgba(255,255,255,0.5);
}

.mic-wrapper {
  width: 36px; height: 36px;
  margin-right: 8px;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
}
.mic-icon {
  font-size: 1.5em;
}
.wave-gif {
  width: 36px; height: 36px;
}

input {
  flex: 1;
  padding: 10px 14px;
  border: none;
  border-radius: 20px;
  background: rgba(255,255,255,0.6);
  outline: none;
  font-size: 0.95em;
}

.send-btn {
  margin-left: 8px;
  background: radial-gradient(circle at top left, #6c5ce7, #fd79a8);
  border: none;
  color: white;
  width: 36px; height: 36px;
  border-radius: 50%;
  cursor: pointer;
  font-size: 1.1em;
}
