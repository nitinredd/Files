# main.py
import streamlit as st
import pandas as pd
import vertexai
import google.auth
import time
import ast
import os
from vertexai.preview.generative_models import GenerativeModel, HarmCategory, HarmBlockThreshold
from summit.utils.dataset import DataSet
import utils.domain, utils.lhs, utils.hplcread, utils.optimization

# Configure Gemini
def configure_gemini():
    os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "D:/datascience-254609-genai.json"
    credentials, project_id = google.auth.default()
    
    safety_config = {
        HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT: HarmBlockThreshold.BLOCK_NONE,
        HarmCategory.HARM_CATEGORY_HATE_SPEECH: HarmBlockThreshold.BLOCK_NONE,
        HarmCategory.HARM_CATEGORY_HARASSMENT: HarmBlockThreshold.BLOCK_NONE,
        HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT: HarmBlockThreshold.BLOCK_NONE
    }
    
    return {
        "model": GenerativeModel("gemini-1.5-pro-preview-0409"),
        "safety": safety_config
    }

gemini_config = configure_gemini()

# Hardcoded example for guaranteed functionality
DEFAULT_FLOW_CODE = """
def generated_flowrate(df_lhs, df_pump, df_reactor):
    result = df_lhs.copy()
    reactor_vol = df_reactor.iloc[3, 0]  # Hardcoded position
    result['Reaction time'] = result['ResidencetimeT1'] * reactor_vol
    
    # Pump 1
    conc = df_pump.iloc[0]['Concentration of reagent (g/ml)']
    mw = df_pump.iloc[0]['Molecular weight (g/mol)']
    molarity = (conc / mw) * 1000
    total_flow = reactor_vol / result['ResidencetimeT1']
    
    # Pump calculations
    denom = (1/molarity) + \
            (result['Equivalence1']/(df_pump.iloc[1]['Concentration of reagent (g/ml)']/df_pump.iloc[1]['Molecular weight (g/mol)']*1000)) + \
            (result['Equivalence2']/(df_pump.iloc[2]['Concentration of reagent (g/ml)']/df_pump.iloc[2]['Molecular weight (g/mol)']*1000))
    
    result['Flow rate of Pump 1'] = total_flow * (1/molarity) / denom
    result['Flow rate of Pump 2'] = total_flow * (result['Equivalence1']/(df_pump.iloc[1]['Concentration of reagent (g/ml)']/df_pump.iloc[1]['Molecular weight (g/mol)']*1000)) / denom
    result['Flow rate of Pump 3'] = total_flow * (result['Equivalence2']/(df_pump.iloc[2]['Concentration of reagent (g/ml)']/df_pump.iloc[2]['Molecular weight (g/mol)']*1000)) / denom * 2
    
    return result
"""

# Core UI Components
def chat_interface():
    st.markdown("""
    <style>
    .chat-box {
        border: 1px solid #e0e0e0;
        border-radius: 10px;
        padding: 20px;
        height: 60vh;
        overflow-y: auto;
        margin-bottom: 20px;
    }
    </style>
    """, unsafe_allow_html=True)

    # Chat history
    if "messages" not in st.session_state:
        st.session_state.messages = []
    
    with st.container(height=600):
        for msg in st.session_state.messages:
            with st.chat_message(msg["role"]):
                st.markdown(msg["content"])

    # File upload and input
    with st.container():
        col1, col2 = st.columns([5, 1])
        with col1:
            uploaded_file = st.file_uploader("Upload Excel Workbook", 
                                           type=["xlsx"],
                                           label_visibility="collapsed")
        with col2:
            if st.button("ðŸš€ Submit", use_container_width=True):
                process_upload(uploaded_file)

# Workflow Processor
def process_upload(uploaded_file):
    if not uploaded_file:
        st.error("Please upload an Excel workbook")
        return

    try:
        # Stage 1: Initialize Domain
        with st.status("Initializing Domain..."):
            df_lhs = pd.read_excel(uploaded_file, sheet_name="LHS")
            df_obj = pd.read_excel(uploaded_file, sheet_name="Objectives")
            domain = utils.domain.create_domain_X(df_lhs)
            domain = utils.domain.create_domain_y(domain, df_obj)
            st.session_state.domain = domain
            st.session_state.df_pump = pd.read_excel(uploaded_file, sheet_name="Pump Details")
            st.session_state.df_reactor = pd.read_excel(uploaded_file, sheet_name="Reactor Details", header=None)
            time.sleep(1)

        # Stage 2: LHS Experiments
        with st.status("Running LHS..."):
            nexp = st.number_input("Number of LHS Experiments", min_value=1, value=10)
            nobj = st.number_input("Number of Objectives", min_value=1, max_value=3, value=2)
            lhs_exp = utils.lhs.LHSDesign(nexp, domain, nobj)
            st.session_state.lhs_exp = lhs_exp
            time.sleep(1)

        # Stage 3: Flow Rate Calculation
        with st.status("Calculating Flow Rates..."):
            with open("utils/flowrate.py", "w") as f:
                f.write(DEFAULT_FLOW_CODE)
            
            from utils.flowrate import generated_flowrate
            lhs_pump = generated_flowrate(lhs_exp, 
                                        st.session_state.df_pump,
                                        st.session_state.df_reactor)
            st.session_state.lhs_pump = lhs_pump
            time.sleep(1)

        # Stage 4: HPLC Processing
        with st.status("Processing HPLC Data..."):
            hplc_path = st.text_input("Enter HPLC Folder Path")
            if hplc_path:
                YminRT = st.number_input("Min RT for Purity", value=2.0)
                YmaxRT = st.number_input("Max RT for Purity", value=2.35)
                impurities = []
                num_imp = st.number_input("Number of Impurities", min_value=0, value=1)
                for i in range(num_imp):
                    col1, col2 = st.columns(2)
                    with col1:
                        imin = st.number_input(f"Impurity {i+1} Min RT", value=1.3)
                    with col2:
                        imax = st.number_input(f"Impurity {i+1} Max RT", value=1.98)
                    impurities.append((imin, imax))
                
                monitor = utils.hplcread.monitor_folder_creation1_csv(
                    st.session_state.lhs_pump, hplc_path, nobj,
                    YminRT, YmaxRT, 
                    [i[0] for i in impurities], [i[1] for i in impurities],
                    3.9, 4.2
                )
                
                progress = st.progress(0)
                for i in range(nexp):
                    result = next(monitor)
                    progress.progress((i+1)/nexp)
                    time.sleep(0.5)

        # Stage 5: Optimization
        with st.status("Running Optimization..."):
            nsor = st.number_input("Number of SOR Iterations", min_value=1, value=5)
            sor_in = st.session_state.lhs_pump.copy()
            sor_in = sor_in.drop(columns=[c for c in sor_in.columns if 'Flow rate' in c] + ['Reaction time'])
            
            progress = st.progress(0)
            for i in range(nsor):
                sor_in, result = utils.optimization.run_optimization(
                    domain, sor_in, nobj,
                    st.session_state.df_pump,
                    st.session_state.df_reactor
                )
                progress.progress((i+1)/nsor)
                time.sleep(1)
            
            st.success("Optimization Complete!")
            st.download_button("Download Results", 
                             result.to_csv(index=False),
                             file_name="optimization_results.csv")

    except Exception as e:
        st.error(f"Workflow Error: {str(e)}")
        st.stop()

def main():
    st.set_page_config(page_title="Reactor Optimizer", layout="wide")
    st.title("ðŸ§ª Autonomous Reactor Optimization")
    
    chat_interface()

if __name__ == "__main__":
    main()
