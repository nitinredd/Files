// src/api.js
import axios from "axios";

/**
 * Set API_BASE to empty string to use relative URLs (recommended for dev with proxy)
 * Or set to "http://localhost:8000" (or your backend URL) if you want absolute.
 */
export const API_BASE = ""; // <-- set to "" or "http://localhost:8000" etc.

const api = axios.create({
  baseURL: API_BASE || "",
  timeout: 60_000,
});

// Generic wrapper to return backend .data when present
const unwrap = (res) => (res && res.data !== undefined ? res.data : res);

// ===== Upload file =====
// Backend expects:
//  POST /upload
//  form fields: "file" (file), "reaction_type" (string)
export const uploadFile = async (file, reaction_type = "Miscellaneous", filename = null) => {
  if (!file) throw new Error("No file provided");
  const fd = new FormData();
  fd.append("file", file);
  fd.append("reaction_type", reaction_type);
  if (filename) fd.append("filename", filename);

  const res = await api.post("/upload", fd, {
    headers: { "Content-Type": "multipart/form-data" },
  });
  return unwrap(res);
};

// ===== Fetch prompts (normalize shape) =====
export const fetchPrompts = async () => {
  const res = await api.get("/prompt-gallery");
  const data = unwrap(res) || {};

  // backend returns { prompts: [...] } (per your backend)
  const raw = Array.isArray(data) ? data : data.prompts || [];

  return (raw || []).map((p, idx) => ({
    id: p.id || `prompt-${idx}`,
    title: p.title || p.name || `Prompt ${idx + 1}`,
    text: p.prompt || p.text || p.query || "",
  }));
};

// ===== Other small helpers you likely already have =====
export const fetchReactions = async () => unwrap(await api.get("/reactions"));
export const fetchProducts = async (reactionType) => unwrap(await api.get("/products", { params: reactionType ? { reaction_type: reactionType } : {} }));
export const fetchProductMeta = async (productId) => unwrap(await api.get(`/product/${encodeURIComponent(productId)}/meta`));
export const fetchProductDetails = async (productId = undefined, question = "Extract API Name, Reaction Chemistry, Yield, Procedure, and Tabular Data", session_id = undefined) => {
  const payload = { question };
  if (productId) payload.product_id = productId;
  if (session_id) payload.session_id = session_id;
  const res = await api.post("/product/details", payload);
  return unwrap(res);
};
export const fetchSchemeImageUrl = (productId) => {
  // construct relative URL â€” client can directly use it in an <img>
  return `${API_BASE || ""}/product/${encodeURIComponent(productId)}/scheme-image`;
};
export const searchProducts = async (q, limit = 10) => unwrap(await api.get("/products/search", { params: { q, limit } }));

// Query with citations helper
export const queryWithCitations = async (productIds = [], question = "", session_id = undefined) => {
  const payload = { product_ids: productIds, question };
  if (session_id) payload.session_id = session_id;
  const res = await api.post("/query", payload);
  return unwrap(res);
};

export default api;
