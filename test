def make_plotly_qq(vals, envelope_sims=500):
    arr = np.asarray(vals, dtype=float)
    arr = arr[np.isfinite(arr)]
    if arr.size < 3:
        return None

    vals_sorted = np.sort(arr)
    n = len(vals_sorted)
    probs = (np.arange(1, n+1) - 0.5) / n
    z_theor = norm.ppf(probs)

    sample_mean = float(vals_sorted.mean())
    sample_sd = float(vals_sorted.std(ddof=1)) if n > 1 else 0.0
    # map theoretical to sample units
    theor = sample_mean + sample_sd * z_theor

    # envelope (simulate)
    lower_env = upper_env = None
    if sample_sd > 0 and envelope_sims > 0:
        sims = rng.normal(loc=sample_mean, scale=sample_sd, size=(envelope_sims, n))
        sims.sort(axis=1)
        lower_env = np.percentile(sims, 2.5, axis=0)
        upper_env = np.percentile(sims, 97.5, axis=0)

    fig = go.Figure()

    # 1) Draw the reference y=x line FIRST (so it doesn't cover markers)
    min_axis = min(theor.min(), vals_sorted.min())
    max_axis = max(theor.max(), vals_sorted.max())
    pad = 0.05 * (max_axis - min_axis) if (max_axis - min_axis) > 0 else 0.1
    x_line = [min_axis - pad, max_axis + pad]
    y_line = x_line
    fig.add_trace(go.Scatter(
        x=x_line, y=y_line,
        mode='lines',
        line=dict(color='red', width=1),  # thinner so points are not covered
        name='Reference line (y=x)',
        hoverinfo='skip',
        showlegend=True
    ))

    # 2) Envelope (fill between upper and lower) — use x = theor (f2 units); draw next
    if lower_env is not None and upper_env is not None:
        fig.add_trace(go.Scatter(
            x=theor,
            y=upper_env,
            mode='lines',
            line=dict(width=0),
            showlegend=False,
            hoverinfo='skip',
            name='95% upper'
        ))
        fig.add_trace(go.Scatter(
            x=theor,
            y=lower_env,
            mode='lines',
            fill='tonexty',
            fillcolor='rgba(180,180,180,0.22)',  # lighter opacity
            line=dict(width=0),
            showlegend=True,
            hoverinfo='skip',
            name='95% envelope'
        ))

    # 3) Points LAST so they appear on top
    fig.add_trace(go.Scatter(
        x=theor,
        y=vals_sorted,
        mode='markers',
        marker=dict(
            size=8,
            symbol='circle',
            color='rgba(0,0,0,0.95)',         # dark fill
            line=dict(width=1, color='white') # thin white border to pop against envelope/line
        ),
        name='Sample quantiles',
        hovertemplate='Theor (f2): %{x:.3f}<br>Sample f2: %{y:.3f}<extra></extra>'
    ))

    fig.update_layout(
        title="Plotly JMP-style Q–Q (theor->f2 units)",
        xaxis_title="Theoretical quantiles (mapped to f2)",
        yaxis_title="Sample quantiles (f2)",
        plot_bgcolor='white',
        height=500,
        margin=dict(l=60, r=20, t=60, b=60),
        hovermode='closest'
    )

    # Force axis ranges explicitly (helps if auto-scaling hides points)
    fig.update_xaxes(range=[min_axis - pad, max_axis + pad])
    fig.update_yaxes(range=[min_axis - pad, max_axis + pad])

    return fig
