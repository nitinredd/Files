def changed_data_either85_f2s(reference_df, test_df):
    """
    Trim both reference_df and test_df to the first timepoint at which
    either the mean(ref) or mean(test) exceeds 85%, then call f2s().
    """
    # Compute mean dissolution at each timepoint
    mean_ref = reference_df.iloc[:, 1:].mean(axis=1)
    mean_test = test_df.iloc[:, 1:].mean(axis=1)
    
    # Find first index where either >85%
    exceed_idx = None
    for i in range(len(mean_ref)):
        if mean_ref.iat[i] > 85 or mean_test.iat[i] > 85:
            exceed_idx = i
            break
    
    if exceed_idx is None:
        raise ValueError("Neither reference nor test mean exceeds 85% at any timepoint.")
    
    # Trim both DataFrames up to that row (inclusive)
    trimmed_ref = reference_df.iloc[:exceed_idx+1].reset_index(drop=True)
    trimmed_test = test_df.iloc[:exceed_idx+1].reset_index(drop=True)
    
    # Now call your f2 calculation function on the trimmed data
    print(f"Trimming at time = {trimmed_ref.iloc[-1,0]} min (index {exceed_idx}), "
          f"calculating f2 on {len(trimmed_ref)} points.")
    f2s(trimmed_ref, trimmed_test)
######################################
elif input1 == 2:
    print("According to EMA/ICH/Canada/Australia guidelines")
    # CV check (unchanged)
    cv_check = check_cv(test_df) and check_cv(reference_df)
    print("CV should be <20 at first non-zero time and <10 thereafter:", cv_check)

    # Drop time 0 row if present
    if reference_df.iloc[0, 0] == 0:
        reference_df = reference_df.drop(0).reset_index(drop=True)
    if test_df.iloc[0, 0] == 0:
        test_df = test_df.drop(0).reset_index(drop=True)

    # Time‐point alignment check
    if not check_same_time_points(test_df, reference_df):
        print("Error: Time points between test and reference do not match.")
    else:
        # Always apply the “either >85%” criterion
        try:
            print("\nAnalysis based on ‘either >85%’ dissolution criterion:")
            changed_data_either85_f2s(reference_df, test_df)
            if not cv_check:
                print("\nWarning: CV requirements not met; interpret with caution.")
            print("Now computing bootstrap percentile & BCA intervals…")
            changed_data_either85_bca(reference_df, test_df)
        except ValueError as e:
            print("❌", e)
            print("Cannot perform ‘either >85%’–based f2 calculation.")
