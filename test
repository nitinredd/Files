// src/components/Chatbot.jsx

import React, { useState, useRef, useEffect } from 'react'
import axios from 'axios'
import './Chatbot.css'

const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition

export default function Chatbot({ apiUrl, backgroundImage, samplePrompts }) {
  const [open, setOpen] = useState(false)
  const [messages, setMessages] = useState([])
  const [input, setInput] = useState('')
  const [listening, setListening] = useState(false)
  const recognitionRef = useRef(null)
  const messagesEndRef = useRef(null)

  // Initialize recognition only once
  useEffect(() => {
    if (!SpeechRecognition) return
    const recog = new SpeechRecognition()
    recog.continuous = false
    recog.interimResults = false
    recog.lang = 'en-US'
    recog.onstart = () => setListening(true)
    recog.onend   = () => setListening(false)
    recog.onresult = (e) => {
      const transcript = e.results[0][0].transcript
      send(transcript)
    }
    recognitionRef.current = recog
  }, [])

  // On open show greeting + prompts
  useEffect(() => {
    if (open && messages.length === 0) {
      setMessages([
        { from: 'bot', text: 'Hi! How can I help?' },
        { from: 'bot', options: samplePrompts }
      ])
    }
  }, [open, samplePrompts, messages.length])

  // Auto scroll
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })
  }, [messages])

  const send = async (text) => {
    setMessages(m => [...m, { from: 'user', text }])
    setInput('')
    try {
      const res = await axios.post(apiUrl, { message: text })
      setMessages(m => [...m, { from: 'bot', text: res.data.response }])
    } catch {
      setMessages(m => [...m, { from: 'bot', text: 'Server error.' }])
    }
  }

  const handlePromptClick = (opt) => send(opt)

  const startListening = () => {
    if (!recognitionRef.current) return alert('Browser does not support SpeechRecognition.')
    recognitionRef.current.start()
  }

  const playAudio = async (text) => {
    try {
      const audioRes = await axios.get(
        apiUrl.replace(/\/chat$/, '') + '/text-to-speech',
        { params: { text }, responseType: 'blob' }
      )
      const url = URL.createObjectURL(audioRes.data)
      new Audio(url).play()
    } catch {}
  }

  return (
    <div
      className={`chatbot-widget ${open ? 'open' : ''}`}
      style={{ backgroundImage: `url(${backgroundImage})` }}
    >
      <div className="chat-header" onClick={() => setOpen(o => !o)}>
        {open ? '––' : '💬'}
      </div>

      {open && (
        <div className="chat-body">
          <div className="messages">
            {messages.map((m,i) =>
              m.options
                ? <div key={i} className="bot-options">
                    {m.options.map((opt,j)=>
                      <button key={j} onClick={() => handlePromptClick(opt)}>
                        {opt}
                      </button>
                    )}
                  </div>
                : <div key={i} className={m.from}>
                    {m.text}
                    {m.from==='bot' && (
                      <button className="read-button" onClick={()=>playAudio(m.text)}>🔊</button>
                    )}
                  </div>
            )}
            <div ref={messagesEndRef}/>
          </div>

          <div className="chat-input">
            <div className="mic-wrapper" onClick={startListening}>
              {listening
                ? <img src="/wave.gif" alt="Listening…" className="wave-gif" />
                : <span className="mic-icon">🎙️</span>
              }
            </div>
            <input
              value={input}
              onChange={e=>setInput(e.target.value)}
              onKeyDown={e=>e.key==='Enter'&&input.trim()&&send(input)}
              placeholder="Type your question…"
            />
            <button disabled={!input.trim()} onClick={()=>send(input)}>Send</button>
          </div>
        </div>
      )}
    </div>
  )
}
