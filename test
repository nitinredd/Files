# add these near your other langchain imports
from langchain.chains.llm import LLMChain
from langchain.prompts import PromptTemplate
from langchain.retrievers.document_compressors import LLMChainExtractor
from langchain.retrievers.contextual_compression import ContextualCompressionRetriever
#################
def build_vectorstores(dfs: dict[str, pd.DataFrame]) -> list[ChildAgent]:
    agents: list[ChildAgent] = []
    # create extractor_chain and LLMChainExtractor once (reuse for all vectorstores)
    extract_prompt = PromptTemplate(
        input_variables=["text", "query"],
        template=(
            "You are an information extractor.\n\n"
            "User question:\n{query}\n\n"
            "From the following DOCUMENT TEXT, extract only the minimal snippets that are directly "
            "relevant to answering the question. Return only the snippets, separated by a blank line. "
            "Do not add commentary.\n\nDOCUMENT:\n{text}\n\n"
            "If nothing relevant is found, return an empty string."
        )
    )
    extractor_chain = LLMChain(llm=chat_model, prompt=extract_prompt)
    extractor = LLMChainExtractor(llm_chain=extractor_chain)

    for key, df in dfs.items():
        docs = [
            Document(page_content=row["content"], metadata={"source": key})
            for _, row in df.iterrows()
        ]
        if not docs:
            continue

        store = FAISS.from_documents(docs, cached_embeddings)

        # Keep k small if you want fewer docs before compression; compression will further reduce tokens
        base_retriever = store.as_retriever(search_kwargs={"k": RETRIEVER_K})

        # Wrap the base retriever with contextual compression using the LLMChainExtractor
        compressed_retriever = ContextualCompressionRetriever(
            base_retriever=base_retriever,
            base_compressor=extractor
        )

        agents.append(ChildAgent(name=key, retriever=compressed_retriever))
        logger.info(f"[Vectorstore] Built store for '{key}' ({len(docs)} docs) with k={RETRIEVER_K}")
    return agents

#########################
