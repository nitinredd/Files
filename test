def changed_data_either85_f2s(reference_df, test_df):
    def safe_truncate(df, max_index):
        """Ensure we always keep at least one valid time point"""
        last_valid_index = min(max_index, len(df)-1) if len(df) > 0 else 0
        return df.iloc[:last_valid_index+1] if len(df) > 0 else df

    try:
        # Create copies to avoid SettingWithCopyWarning
        ref_df = reference_df.copy()
        test_df = test_df.copy()
        
        # Initialize indices with maximum possible values
        ref_index = len(ref_df)
        test_index = len(test_df)

        # Find first ≥85% in reference
        ref_means = ref_df.iloc[:, 1:].mean(axis=1)
        for i in range(len(ref_means)):
            if ref_means[i] >= 85:
                ref_index = i
                break

        # Find first ≥85% in test (fixed from original)
        test_means = test_df.iloc[:, 1:].mean(axis=1)
        for i in range(len(test_means)):
            if test_means[i] >= 85:
                test_index = i
                break

        # Determine truncation point
        final_index = min(ref_index, test_index)
        
        # Handle empty edge cases
        if len(ref_df) == 0 or len(test_df) == 0:
            raise ValueError("Empty dataframe after truncation")

        # Apply safe truncation with bounds checking
        ref_truncated = safe_truncate(ref_df, final_index)
        test_truncated = safe_truncate(test_df, final_index)

        # Verify we have valid data left
        if len(ref_truncated) == 0 or len(test_truncated) == 0:
            raise ValueError("No valid data remaining after truncation")
            
        # Check minimum time points requirement (original Check 1)
        if not (check_time_points(ref_truncated) and check_time_points(test_truncated)):
            print("Warning: Insufficient time points after truncation")
            print("At least 3 non-zero points required for both products")
            return

        # Calculate f2 if valid
        f2s(ref_truncated, test_truncated)

    except (IndexError, KeyError) as e:
        print(f"Data truncation error: {str(e)}")
        print("Please check input data format and time points")
    except ValueError as e:
        print(f"Validation error: {str(e)}")
