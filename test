def extract_table(self, image, table_coords):
    """Extract text data from the table region."""
    y1, y2, x1, x2 = table_coords
    table_image = image[y1:y2, x1:x2]

    # Detect horizontal and vertical lines within the table
    gray = cv2.cvtColor(table_image, cv2.COLOR_RGB2GRAY)
    thresh = cv2.adaptiveThreshold(gray, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C,
                                   cv2.THRESH_BINARY_INV, 11, 2)

    horizontal_kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (40, 1))
    vertical_kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (1, 40))
    horizontal_lines = cv2.morphologyEx(thresh, cv2.MORPH_OPEN, horizontal_kernel)
    vertical_lines = cv2.morphologyEx(thresh, cv2.MORPH_OPEN, vertical_kernel)

    # Detect lines
    horizontal_lines = cv2.HoughLinesP(horizontal_lines, 1, np.pi / 180, 100,
                                       minLineLength=50, maxLineGap=10)
    vertical_lines = cv2.HoughLinesP(vertical_lines, 1, np.pi / 180, 100,
                                     minLineLength=50, maxLineGap=10)

    # Check for valid lines
    if horizontal_lines is None or len(horizontal_lines) == 0:
        self.logger.info("No horizontal lines detected.")
        return []

    if vertical_lines is None or len(vertical_lines) == 0:
        self.logger.info("No vertical lines detected.")
        return []

    # Get row and column positions
    row_positions = sorted({y1 for line in horizontal_lines for _, y1, _, y2 in line})
    col_positions = sorted({x1 for line in vertical_lines for x1, _, x2, _ in line})

    # Ensure we have enough rows and columns to form a table
    if len(row_positions) < 2 or len(col_positions) < 2:
        self.logger.info("Insufficient rows or columns to form a table.")
        return []

    # Extract cells
    table_data = []
    for i in range(len(row_positions) - 1):
        row = []
        for j in range(len(col_positions) - 1):
            cell_image = table_image[row_positions[i]:row_positions[i + 1],
                                     col_positions[j]:col_positions[j + 1]]

            # Ensure cell_image is valid
            if cell_image.size == 0:
                row.append("")
                continue

            cell_text = pytesseract.image_to_string(cell_image, lang='eng', config='--psm 6')
            row.append(cell_text.strip())
        table_data.append(row)

    return table_data
