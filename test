import streamlit as st
import pandas as pd
import json
from io import BytesIO

st.set_page_config(page_title="Excel ‚Üí JSON Converter", layout="wide")

st.title("üìä Excel Workbook to JSON Converter")

st.markdown(
    """
    1. Upload an `.xlsx` or `.xls` file.  
    2. The app reads each sheet as a table.  
    3. Downloads a single JSON file with one key per sheet.
    """
)

uploaded_file = st.file_uploader(
    "Upload your Excel workbook",
    type=["xlsx", "xls"],
    help="Supported formats: .xlsx, .xls"
)

if uploaded_file:
    try:
        # Read all sheets into a dict of DataFrames
        all_sheets: dict[str, pd.DataFrame] = pd.read_excel(
            uploaded_file, sheet_name=None, engine="openpyxl"
        )
    except Exception as e:
        st.error(f"‚ùå Failed to read Excel file: {e}")
    else:
        result = {}
        skipped = []
        for sheet_name, df in all_sheets.items():
            # Skip completely empty sheets
            if df.empty or df.dropna(how="all").empty:
                skipped.append(sheet_name)
                continue

            # Reset index in case it's meaningful
            df = df.reset_index(drop=True)

            # Convert DataFrame to list-of-records
            try:
                records = df.to_dict(orient="records")
            except Exception as e:
                st.warning(f"Could not convert sheet '{sheet_name}' to JSON: {e}")
                skipped.append(sheet_name)
                continue

            result[sheet_name] = records

        if not result:
            st.warning("‚ö†Ô∏è No non-empty sheets found to convert.")
        else:
            # Pretty-print JSON
            json_str = json.dumps(result, indent=2, ensure_ascii=False)

            st.success(f"‚úÖ Converted {len(result)} sheet(s) to JSON.")
            if skipped:
                st.info(f"Skipped empty or unreadable sheets: {', '.join(skipped)}")

            st.code(json_str, language="json")

            # Provide download
            b = BytesIO()
            b.write(json_str.encode("utf-8"))
            b.seek(0)

            st.download_button(
                label="üì• Download JSON",
                data=b,
                file_name="workbook.json",
                mime="application/json"
            )
