// src/components/ChatWindow.jsx
import React, { useRef, useEffect, useState } from 'react';
import { motion } from 'framer-motion';
import { FiSend } from 'react-icons/fi';
import MicrophoneButton from './MicrophoneButton';
import { searchProducts } from './api'; // <- ensure this exists

/**
 * ChatWindow with product-name autocomplete dropdown.
 *
 * Props:
 *  - messages: array of chat messages
 *  - onSend(text): called when user submits
 *  - centeredWidth: tailwind max-width class
 *  - selectedCitedDocs, removeCitation (kept for compatibility)
 */
export default function ChatWindow({
  messages,
  onSend,
  centeredWidth = "max-w-3xl",
  selectedCitedDocs = [],
  removeCitation = () => {}
}) {
  const [text, setText] = useState('');
  const textareaRef = useRef();
  const [suggestions, setSuggestions] = useState([]); // {id,name,reaction_type}
  const [showSuggestions, setShowSuggestions] = useState(false);
  const [activeIndex, setActiveIndex] = useState(-1); // for keyboard nav
  const debounceRef = useRef(null);
  const containerRef = useRef(null);

  // autosize textarea
  useEffect(() => {
    if (textareaRef.current) {
      textareaRef.current.style.height = 'auto';
      textareaRef.current.style.height = textareaRef.current.scrollHeight + 'px';
    }
  }, [text, messages]);

  // hide suggestions on outside click
  useEffect(() => {
    const onDocClick = (e) => {
      if (!containerRef.current) return;
      if (!containerRef.current.contains(e.target)) {
        setShowSuggestions(false);
        setActiveIndex(-1);
      }
    };
    document.addEventListener('mousedown', onDocClick);
    return () => document.removeEventListener('mousedown', onDocClick);
  }, []);

  // Debounced search for product suggestions
  useEffect(() => {
    const q = (text || '').trim();
    // If user typed less than 2 chars, don't show suggestions (tweakable)
    if (q.length < 2) {
      setSuggestions([]);
      setShowSuggestions(false);
      setActiveIndex(-1);
      if (debounceRef.current) {
        clearTimeout(debounceRef.current);
        debounceRef.current = null;
      }
      return;
    }

    // debounce
    if (debounceRef.current) clearTimeout(debounceRef.current);
    debounceRef.current = setTimeout(async () => {
      try {
        const res = await searchProducts(q, 8); // top 8 matches
        const payload = res && res.data ? res.data : res;
        setSuggestions(payload || []);
        setShowSuggestions(Array.isArray(payload) && payload.length > 0);
        setActiveIndex(-1);
      } catch (err) {
        console.error("searchProducts error:", err);
        setSuggestions([]);
        setShowSuggestions(false);
      }
    }, 220); // 220ms debounce
    return () => {
      if (debounceRef.current) {
        clearTimeout(debounceRef.current);
        debounceRef.current = null;
      }
    };
  }, [text]);

  // keyboard handling for the textarea (arrow keys navigate suggestions)
  const onKeyDown = (e) => {
    if (showSuggestions && suggestions.length > 0) {
      if (e.key === 'ArrowDown') {
        e.preventDefault();
        setActiveIndex((i) => Math.min(i + 1, suggestions.length - 1));
        return;
      } else if (e.key === 'ArrowUp') {
        e.preventDefault();
        setActiveIndex((i) => Math.max(i - 1, 0));
        return;
      } else if (e.key === 'Enter' && activeIndex >= 0) {
        // choose active suggestion on Enter (if suggestion focused)
        e.preventDefault();
        chooseSuggestion(suggestions[activeIndex]);
        return;
      } else if (e.key === 'Escape') {
        setShowSuggestions(false);
        setActiveIndex(-1);
        return;
      }
    }

    // default Enter behavior (send) handled in submit below when not in suggestions
    if (e.key === 'Enter' && !e.shiftKey && !showSuggestions) {
      e.preventDefault();
      submit();
    }
  };

  // Insert product name into text (or you could set behavior to cite product)
  const chooseSuggestion = (s) => {
    if (!s) return;
    // Option A: Insert product name into the text cursor position — simplest: append if empty or at end
    // For more advanced insertion, you'd calculate selectionStart and splice text; here we append or replace last token
    // We'll replace the current last "word-like" token the user is typing with the product name for a natural feel.

    try {
      const el = textareaRef.current;
      if (el) {
        const cursor = el.selectionStart || text.length;
        // find token start before cursor (allow alnum and punctuation)
        let left = text.slice(0, cursor);
        let right = text.slice(cursor);
        // find last whitespace in left
        const lastWs = left.lastIndexOf(' ');
        const prefix = lastWs === -1 ? '' : left.slice(0, lastWs + 1);
        // Build new text: prefix + product name + (if right begins with whitespace keep it)
        const newText = prefix + s.name + (right && !right.startsWith(' ') ? ' ' + right : right);
        setText(newText);
      } else {
        // fallback
        setText((t) => (t ? t + ' ' + s.name : s.name));
      }
    } catch (e) {
      setText((t) => (t ? t + ' ' + s.name : s.name));
    }

    setShowSuggestions(false);
    setActiveIndex(-1);
    // focus back to textarea
    setTimeout(() => {
      try { textareaRef.current && textareaRef.current.focus(); } catch {}
    }, 0);
  };

  const submit = () => {
    const t = text.trim();
    if (!t) return;
    onSend(t);
    setText('');
    setSuggestions([]);
    setShowSuggestions(false);
    setActiveIndex(-1);
  };

  return (
    <div className={`mx-auto ${centeredWidth}`} ref={containerRef}>
      <div className="bg-white rounded-3xl shadow-2xl p-6">
        {/* Citation chips (if any) */}
        {selectedCitedDocs && selectedCitedDocs.length > 0 && (
          <div className="mb-4 flex flex-wrap gap-2">
            {selectedCitedDocs.map(d => (
              <div key={d.id} className="flex items-center gap-2 bg-purple-50 text-purple-800 px-3 py-1 rounded-full text-xs">
                <span className="max-w-[220px] truncate">{d.name}</span>
                <button onClick={() => removeCitation(d.id)} className="ml-1 px-1 rounded-full bg-white shadow text-xs" title="Remove citation">✕</button>
              </div>
            ))}
          </div>
        )}

        {/* Messages */}
        <div className="min-h-[220px] max-h-[54vh] overflow-auto pr-2">
          {messages.map((m, idx) => (
            <motion.div
              key={idx}
              initial={{ opacity: 0, y: 8 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.28, delay: idx * 0.02 }}
              className={`mb-3 ${m.role === 'user' ? 'flex justify-end' : 'flex justify-start'}`}
            >
              <div className={`${m.role === 'user' ? 'bg-gradient-to-br from-secondary to-primary text-white' : 'bg-gray-50 text-gray-800'} px-4 py-3 rounded-2xl max-w-[80%] whitespace-pre-wrap break-words`}>
                {m.content}
              </div>
            </motion.div>
          ))}
        </div>

        {/* Input area + suggestions */}
        <div className="mt-4 relative">
          <div className="flex items-end gap-3">
            <MicrophoneButton onText={(t) => setText(t)} />
            <textarea
              ref={textareaRef}
              value={text}
              onChange={(e) => setText(e.target.value)}
              rows={1}
              placeholder="Ask about reaction chemistry or type a product name..."
              className="flex-1 resize-none px-4 py-3 rounded-3xl border bg-white text-black focus:outline-none focus:ring-2 focus:ring-secondary scrollbar-hide"
              onKeyDown={onKeyDown}
              onFocus={() => { if (suggestions && suggestions.length > 0) setShowSuggestions(true); }}
            />
            <button onClick={submit} className="p-3 rounded-full bg-primary text-white shadow hover:scale-95">
              <FiSend />
            </button>
          </div>

          {/* Suggestions dropdown */}
          {showSuggestions && suggestions && suggestions.length > 0 && (
            <div className="absolute left-16 right-0 z-40 mt-2 rounded-xl bg-white border shadow-lg overflow-hidden">
              <ul className="max-h-56 overflow-auto">
                {suggestions.map((s, i) => (
                  <li key={s.id}>
                    <button
                      className={`w-full text-left px-4 py-3 hover:bg-gray-50 flex justify-between items-center ${i === activeIndex ? 'bg-gray-100' : ''}`}
                      onMouseDown={(e) => {
                        // use mouseDown to prevent textarea blur before click
                        e.preventDefault();
                        chooseSuggestion(s);
                      }}
                      onMouseEnter={() => setActiveIndex(i)}
                    >
                      <div className="truncate">
                        <div className="font-medium text-sm text-primary">{s.name}</div>
                        <div className="text-xs text-gray-400 mt-1">{(s.reaction_type || "").replace(/_/g, ' ')}</div>
                      </div>
                      <div className="text-xs text-gray-400 ml-4">Select</div>
                    </button>
                  </li>
                ))}
              </ul>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
#############################################
// src/components/PromptGallery.jsx
import React from 'react';
import { motion } from 'framer-motion';

export default function PromptGallery({ prompts = [], onPick }) {
  return (
    <div className="mt-3">
      <h4 className="text-sm font-semibold text-gray-600 mb-2">Prompt gallery</h4>
      <div className="flex gap-3 flex-wrap">
        {prompts.map(p => (
          <motion.button
            key={p.id}
            onClick={() => onPick(p.text)}
            whileHover={{ y: -4 }}
            className="px-3 py-2 bg-white border rounded-lg shadow-sm text-sm text-gray-700 hover:bg-purple-50"
            title={p.title}
          >
            {p.title}
          </motion.button>
        ))}
      </div>
    </div>
  );
}
