// src/components/Chatbot.jsx

import React, { useState, useRef, useEffect } from 'react'
import axios from 'axios'
import './Chatbot.css'

export default function Chatbot({ apiUrl, backgroundImage, samplePrompts }) {
  const [open, setOpen] = useState(false)
  const [messages, setMessages] = useState([])
  const [input, setInput] = useState('')
  const [recording, setRecording] = useState(false)
  const mediaRecorderRef = useRef(null)
  const audioChunksRef = useRef([])
  const messagesEndRef = useRef(null)

  // When widget opens for the first time, show greeting + samplePrompts
  useEffect(() => {
    if (open && messages.length === 0) {
      setMessages([
        { from: 'bot', text: 'Hi! How can I help?' },
        { from: 'bot', options: samplePrompts }
      ])
    }
  }, [open, samplePrompts, messages.length])

  // Auto-scroll
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })
  }, [messages])

  // Core send function
  const send = async (text) => {
    setMessages(m => [...m, { from: 'user', text }])
    setInput('')
    try {
      const res = await axios.post(apiUrl, { message: text })
      setMessages(m => [...m, { from: 'bot', text: res.data.response }])
    } catch {
      setMessages(m => [...m, { from: 'bot', text: 'Server error.' }])
    }
  }

  // Handle sample prompt click
  const onPromptClick = (prompt) => {
    send(prompt)
  }

  // Start recording
  const startRecording = async () => {
    setRecording(true)
    audioChunksRef.current = []
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true })
      const mr = new MediaRecorder(stream)
      mediaRecorderRef.current = mr
      mr.ondataavailable = e => audioChunksRef.current.push(e.data)
      mr.start()
    } catch {
      setRecording(false)
    }
  }

  // Stop recording and upload for STT
  const stopRecording = () => {
    if (!mediaRecorderRef.current) return
    mediaRecorderRef.current.stop()
    mediaRecorderRef.current.onstop = async () => {
      setRecording(false)
      const blob = new Blob(audioChunksRef.current, { type: 'audio/webm' })
      const form = new FormData()
      form.append('file', blob, 'voice.webm')
      try {
        const sttRes = await axios.post(
          `${apiUrl.replace(/\/chat$/, '')}/speech-to-text`,
          form,
          { headers: { 'Content-Type': 'multipart/form-data' } }
        )
        send(sttRes.data.text)
      } catch {
        setMessages(m => [...m, { from: 'bot', text: 'Voice‚Äëto‚Äëtext failed.' }])
      }
    }
  }

  // Play TTS for a bot message
  const playAudio = async (text) => {
    try {
      const audioRes = await axios.get(
        `${apiUrl.replace(/\/chat$/, '')}/text-to-speech`,
        { params: { text }, responseType: 'blob' }
      )
      const url = URL.createObjectURL(audioRes.data)
      new Audio(url).play()
    } catch {
      // ignore
    }
  }

  return (
    <div
      className={`chatbot-widget ${open ? 'open' : ''}`}
      style={{ backgroundImage: `url(${backgroundImage})` }}
    >
      <div className="chat-header" onClick={() => setOpen(o => !o)}>
        {open ? '‚Äì‚Äì' : 'üí¨'}
      </div>

      {open && (
        <div className="chat-body">
          <div className="messages">
            {messages.map((m, i) =>
              m.options ? (
                <div key={i} className="bot-options">
                  {m.options.map((opt, j) => (
                    <button key={j} onClick={() => onPromptClick(opt)}>
                      {opt}
                    </button>
                  ))}
                </div>
              ) : (
                <div key={i} className={m.from}>
                  {m.text}
                  {m.from === 'bot' && (
                    <button
                      className="read-button"
                      onClick={() => playAudio(m.text)}
                    >
                      üîä
                    </button>
                  )}
                </div>
              )
            )}
            <div ref={messagesEndRef} />
          </div>

          <div className="chat-input">
            <div
              className="mic-wrapper"
              onMouseDown={startRecording}
              onMouseUp={stopRecording}
            >
              {recording ? (
                <img src="/wave.gif" alt="Recording‚Ä¶" className="wave-gif" />
              ) : (
                <span className="mic-icon">üéôÔ∏è</span>
              )}
            </div>

            <input
              value={input}
              onChange={e => setInput(e.target.value)}
              onKeyDown={e =>
                e.key === 'Enter' && input.trim() && send(input)
              }
              placeholder="Type your question‚Ä¶"
            />

            <button
              disabled={!input.trim()}
              onClick={() => send(input)}
            >
              Send
            </button>
          </div>
        </div>
      )}
    </div>
  )
}
