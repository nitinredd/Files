import streamlit as st
from moviepy.editor import *
import os
import tempfile

def main():
    st.title("Basic Video Editor")
    
    # Initialize session state
    if 'edited_video' not in st.session_state:
        st.session_state.edited_video = None
    
    # Upload video
    uploaded_file = st.file_uploader("Upload Video", type=["mp4", "mov", "avi"])
    
    if uploaded_file is not None:
        # Save uploaded file to temporary directory
        tfile = tempfile.NamedTemporaryFile(delete=False) 
        tfile.write(uploaded_file.read())
        
        # Load video
        video = VideoFileClip(tfile.name)
        st.session_state.original_video = video
        duration = video.duration
        
        # Show original video
        st.subheader("Original Video")
        st.video(tfile.name)
        
        # Editing controls
        st.sidebar.header("Editing Tools")
        
        # Trim controls
        st.sidebar.subheader("Trim Video")
        start_time = st.sidebar.slider("Start Time", 0.0, duration, 0.0)
        end_time = st.sidebar.slider("End Time", 0.0, duration, duration)
        
        # Text overlay
        st.sidebar.subheader("Add Text")
        text_overlay = st.sidebar.text_input("Enter Text")
        text_position = st.sidebar.selectbox("Text Position", 
                                           ["top", "center", "bottom"])
        text_color = st.sidebar.color_picker("Text Color", "#FFFFFF")
        font_size = st.sidebar.slider("Font Size", 20, 100, 40)
        
        # Audio controls
        st.sidebar.subheader("Audio Options")
        audio_file = st.sidebar.file_uploader("Add Audio Track", 
                                            type=["mp3", "wav"])
        
        # Video filters
        st.sidebar.subheader("Filters")
        filter_option = st.sidebar.selectbox("Choose Filter",
                                          ["None", "Black & White", "Color Boost"])
        
        # Process edits
        edited = video.subclip(start_time, end_time)
        
        # Apply text overlay
        if text_overlay:
            txt_clip = TextClip(text_overlay, fontsize=font_size, color=text_color)
            txt_clip = txt_clip.set_position(text_position).set_duration(edited.duration)
            edited = CompositeVideoClip([edited, txt_clip])
        
        # Apply filters
        if filter_option == "Black & White":
            edited = edited.fx(vfx.blackwhite)
        elif filter_option == "Color Boost":
            edited = edited.fx(vfx.colorx, 1.2)
        
        # Add audio
        if audio_file:
            audio_temp = tempfile.NamedTemporaryFile(delete=False)
            audio_temp.write(audio_file.read())
            audio_clip = AudioFileClip(audio_temp.name)
            edited = edited.set_audio(audio_clip)
        
        # Preview edited video
        st.subheader("Preview")
        preview_path = os.path.join(tempfile.gettempdir(), "preview.mp4")
        edited.write_videofile(preview_path, codec="libx264", fps=24)
        st.video(preview_path)
        
        # Export controls
        st.subheader("Export")
        export_name = st.text_input("File Name", "edited_video")
        export_button = st.button("Export Video")
        
        if export_button:
            export_path = f"{export_name}.mp4"
            edited.write_videofile(export_path, codec="libx264", fps=24)
            
            with open(export_path, "rb") as file:
                st.download_button(
                    label="Download Video",
                    data=file,
                    file_name=export_path,
                    mime="video/mp4"
                )
            
            # Clean up temporary files
            os.unlink(tfile.name)
            if audio_file:
                os.unlink(audio_temp.name)

if __name__ == "__main__":
    main()
