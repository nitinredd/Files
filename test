#####################Chemintel###################
#Footer
import React from 'react';
import { Modal } from 'bootstrap'; // ✅ Import Modal directly
import "../../index.css";

const Footer = () => {
  const currentYear = new Date().getFullYear();

  const teamMembers = [
    {
      username: "Rakeshwar Bandichhor",
      designation: "Head of Chemistry, API",
      thumbnail: null,
    },
    {
      username: "Pradip Dhanraj Nahide",
      designation: "Process R&D Specialist",
      thumbnail: null,
    },
    {
      username: "Senthil Kumar",
      designation: "Principal Product Manager - R&D",
      thumbnail: null,
    },
    {
      username: "Karthikeya V",
      designation: "Product Manager",
      thumbnail: null,
    },
    {
      username: "Nishit Mittal",
      designation: "Senior Principal - Data Scientist",
      thumbnail: null,
    },
    {
      username: "Nitin Reddy",
      designation: "Data Scientist",
      thumbnail: null,
    },
  ];

  const handleMeetTheTeamClick = () => {
    const modalElement = document.getElementById('meetTheTeamModal');
    if (modalElement) {
      const modal = new Modal(modalElement); // ✅ Use imported Modal
      modal.show();
    }
  };

  return (
    <>
      <div className="navbar justify-content-between px-3 p-2 fixed-bottom border-top border-2 border-purple bg-white">
        <span
          className="text-dk-p2 open-sans open-sans-300 cursor-pointer"
          id="btn-meet-the-team"
          onClick={handleMeetTheTeamClick}
        >
          <i className="bi bi-people-fill"></i> Meet the Team
        </span>
        <span className="open-sans open-sans-300">
          In case of any queries or suggestions, please{' '}
          <a
            className="text-dk-p2 text-decoration-none"
            href="mailto:karthikeyav@drreddys.com,nitinreddyv@drreddys.com"
          >
            Click here
          </a>
        </span>
        <span className="open-sans open-sans-300">
          Powered by DPEx @ {currentYear}
        </span>
      </div>

      {/* Modal embedded directly in Footer */}
      <div
        className="modal fade mt-5"
        id="meetTheTeamModal"
        tabIndex="-1"
        aria-labelledby="meetTheTeamModalLabel"
        aria-hidden="true"
      >
        <div className="modal-dialog modal-xl">
          <div className="modal-content">
            <div className="modal-header bg-drl-color-0 border-dark">
              <div className="fw-semibold modal-title fs-20">Meet the Team</div>
              <button
                type="button"
                className="btn-close"
                data-bs-dismiss="modal"
                aria-label="Close"
              ></button>
            </div>
            <div className="modal-body">
              <div className="container-fluid">
                <div className="row" id="meet-team-container">
                  <div className="row">
                    {teamMembers.map((member, index) => {
                      const initials = member.username
                        .split(" ")
                        .map((name) => name[0])
                        .join("");

                      return (
                        <div className="col-md-2 mb-4" key={index}>
                          <div className="card border-0 px-0">
                            {member.thumbnail ? (
                              <img
                                src={member.thumbnail}
                                alt={member.username}
                                className="card-img-top rounded-pill profile-icon-4 mx-auto"
                              />
                            ) : (
                              <div className="card-img-top profile-icon-4 mx-auto d-flex align-items-center justify-content-center bg-secondary text-white rounded-pill" style={{ height: '100px', width: '100px', fontSize: '24px' }}>
                                {initials}
                              </div>
                            )}
                            <div className="card-body text-center">
                              <div className="fs-16 open-sans open-sans-600 ">{member.username}</div>
                              <div className="fs-12 open-sans open-sans-300">{member.designation}</div>
                            </div>
                          </div>
                        </div>
                      );
                    })}
                  </div>

                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export default Footer;
###################################################
Api.js 
import axios from 'axios';
export const BASE_URL = 'http://localhost:8000';

export const api = axios.create({
  baseURL: BASE_URL,
  timeout: 60000,
});
const unwrap = (res) => {
  if (res === undefined || res === null) return res;
  return res.data !== undefined ? res.data : res;
};
// API helpers
export const fetchReactions = () => api.get('/reactions').then(r => r.data);
export const fetchProducts = (reaction) => api.get('/products', { params: reaction ? { reaction_type: reaction } : {} }).then(r => r.data);
export const fetchProductMeta = (productId) => api.get(`/product/${productId}/meta`).then(r => r.data);
export const downloadPdfUrl = (productId) => `${BASE_URL}/product/${productId}/pdf`;
// fetchProductDetails(productId?: string, question?: string)
export const fetchProductDetails = (productId, question = "Extract API Name, Reaction Chemistry, Yield, Procedure, and Tabular Data") => {
  return api.post('/product/details', { product_id: productId, question });
};
export const fetchSchemeImageUrl = (productId) => `${BASE_URL}/product/${productId}/scheme-image`;
export const transcribeAudio = (file, use_google=false) => {
  const fd = new FormData();
  fd.append('file', file);
  fd.append('use_google', use_google ? 'true' : 'false');
  return api.post('/transcribe', fd, { headers: {'Content-Type': 'multipart/form-data'} }).then(r => r.data);
}
export const queryWithCitations = (productIds = [], question = "") => {
  return api.post('/query', { product_ids: productIds, question });
};
export const searchProducts = (query, limit = 10) => {
  return api.get('/products/search', { params: { q: query, limit } });
};
// src/api.js (replace existing fetchPrompts)
export const fetchPrompts = async () => {
  const res = await api.get("/prompt-gallery");
  const data = unwrap(res) || {};

  // Backend returns {prompts: [...]}
  const raw = Array.isArray(data) ? data : data.prompts || [];

  // Normalize to { id, title, text } shape used by UI
  return (raw || []).map((p, idx) => ({
    id: p.id || `prompt-${idx}`,
    title: p.title || p.name || `Prompt ${idx + 1}`,
    text: p.prompt || p.text || p.query || "",
  }));
};
export const uploadFile = async (file, reaction_type = "Miscellaneous", filename = null) => {
  if (!file) throw new Error("No file provided");
  const fd = new FormData();
  fd.append("file", file);
  fd.append("reaction_type", reaction_type);
  if (filename) fd.append("filename", filename);

  const res = await api.post("/upload", fd, {
    headers: { "Content-Type": "multipart/form-data" },
  });
  return unwrap(res);
};
#################################
// src/components/ChatWindow.jsx
import React, { useRef, useEffect, useState } from "react";
import { motion } from "framer-motion";
import { FiSend, FiPlus, FiDownload, FiX } from "react-icons/fi";
import MicrophoneButton from "./MicrophoneButton";
import { searchProducts } from "./api";
import { marked } from "marked";

/**
 * ChatWindow (centered pill / professional UI)
 *
 * Props:
 *  - messages: array of chat messages
 *  - onSend(text)
 *  - loading: boolean
 *  - centeredWidth: tailwind class (max width of the bar container)
 *  - selectedCitedDocs, removeCitation
 *  - onUploadFile(file): function to handle uploads
 *  - openPromptGallery(): opens the prompt gallery modal
 */
export default function ChatWindow({
  messages = [],
  onSend,
  loading = false,
  centeredWidth = "max-w-2xl",
  selectedCitedDocs = [],
  removeCitation = () => {},
  onUploadFile = null,
  openPromptGallery = null,
}) {
  const [text, setText] = useState("");
  const textareaRef = useRef();
  const [suggestions, setSuggestions] = useState([]);
  const [showSuggestions, setShowSuggestions] = useState(false);
  const [activeIndex, setActiveIndex] = useState(-1);
  const debounceRef = useRef(null);
  const containerRef = useRef(null);
  const fileInputRef = useRef(null);

  // small preview of last messages above bar (keeps UI compact)
  const PREVIEW_COUNT = 5;

  useEffect(() => {
    // autosize textarea
    if (textareaRef.current) {
      textareaRef.current.style.height = "auto";
      textareaRef.current.style.height = textareaRef.current.scrollHeight + "px";
    }
  }, [text, messages]);

  // hide suggestions on outside click
  useEffect(() => {
    const onDocClick = (e) => {
      if (!containerRef.current) return;
      if (!containerRef.current.contains(e.target)) {
        setShowSuggestions(false);
        setActiveIndex(-1);
      }
    };
    document.addEventListener("mousedown", onDocClick);
    return () => document.removeEventListener("mousedown", onDocClick);
  }, []);

  // Debounced product search suggestions (typeahead)
  useEffect(() => {
    const q = (text || "").trim();
    if (q.length < 2) {
      setSuggestions([]);
      setShowSuggestions(false);
      setActiveIndex(-1);
      if (debounceRef.current) {
        clearTimeout(debounceRef.current);
        debounceRef.current = null;
      }
      return;
    }
    if (debounceRef.current) clearTimeout(debounceRef.current);
    debounceRef.current = setTimeout(async () => {
      try {
        const res = await searchProducts(q, 8);
        const payload = res && res.data ? res.data : res;
        setSuggestions(payload || []);
        setShowSuggestions(Array.isArray(payload) && payload.length > 0);
        setActiveIndex(-1);
      } catch (err) {
        console.error("searchProducts error:", err);
        setSuggestions([]);
        setShowSuggestions(false);
      }
    }, 220);
    return () => {
      if (debounceRef.current) {
        clearTimeout(debounceRef.current);
        debounceRef.current = null;
      }
    };
  }, [text]);

  // keyboard handling for suggestion nav + submit
  const onKeyDown = (e) => {
    if (showSuggestions && suggestions.length > 0) {
      if (e.key === "ArrowDown") {
        e.preventDefault();
        setActiveIndex((i) => Math.min(i + 1, suggestions.length - 1));
        return;
      } else if (e.key === "ArrowUp") {
        e.preventDefault();
        setActiveIndex((i) => Math.max(i - 1, 0));
        return;
      } else if (e.key === "Enter" && activeIndex >= 0) {
        e.preventDefault();
        chooseSuggestion(suggestions[activeIndex]);
        return;
      } else if (e.key === "Escape") {
        setShowSuggestions(false);
        setActiveIndex(-1);
        return;
      }
    }

    if (e.key === "Enter" && !e.shiftKey && !showSuggestions) {
      e.preventDefault();
      submit();
    }
  };

  // Choose suggestion: replace partial token with product name for natural typing UX
  const chooseSuggestion = (s) => {
    if (!s) return;
    try {
      const el = textareaRef.current;
      if (el) {
        const cursor = el.selectionStart || text.length;
        let left = text.slice(0, cursor);
        let right = text.slice(cursor);
        const lastWs = left.lastIndexOf(" ");
        const prefix = lastWs === -1 ? "" : left.slice(0, lastWs + 1);
        const newText = prefix + s.name + (right && !right.startsWith(" ") ? " " + right : right);
        setText(newText);
      } else {
        setText((t) => (t ? t + " " + s.name : s.name));
      }
    } catch (e) {
      setText((t) => (t ? t + " " + s.name : s.name));
    }
    setShowSuggestions(false);
    setActiveIndex(-1);
    setTimeout(() => textareaRef.current && textareaRef.current.focus(), 0);
  };

  const submit = () => {
    const t = text.trim();
    if (!t) return;
    onSend(t);
    setText("");
    setSuggestions([]);
    setShowSuggestions(false);
    setActiveIndex(-1);
  };

  // File upload: trigger file input and call callback
  const triggerFileInput = () => fileInputRef.current && fileInputRef.current.click();

  const handleFileChange = async (e) => {
    const f = e.target.files && e.target.files[0];
    if (!f) return;
    if (onUploadFile) {
      try {
        await onUploadFile(f);
      } catch (err) {
        console.error("onUploadFile error:", err);
      }
    }
    e.target.value = null;
  };

  // Renders extracted markdown-style tables (from backend structured extraction)
  const parseMarkdownTable = (markdown) => {
    // Split the markdown into lines and filter out empty lines
    const lines = markdown
      .split("\n")
      .map((line) => line.trim())
      .filter((line) => line.length > 0);
  
    if (lines.length < 2) return null; // Ensure we have header and rows
  
    // Extract headers from the first line
    const headers = lines[0]
      .split("|")
      .map((header) => header.trim())
      .filter((header) => header.length > 0);
  
    // Ignore the second line (which is typically dashes "---")
    const rows = lines.slice(2).map((line) =>
      line
        .split("|")
        .map((cell) => cell.trim())
        .filter((cell) => cell.length > 0)
    );
  
    return { headers, rows };
  };
  
  const renderTable = (tbl, index) => {
    let headers = [];
    let rows = [];
  
    // Check if the input is a raw markdown table string
    if (typeof tbl === "string") {
      const parsedTable = parseMarkdownTable(tbl);
      if (parsedTable) {
        headers = parsedTable.headers;
        rows = parsedTable.rows;
      }
    } else if (tbl.headers && tbl.rows) {
      // Structured data (headers/rows already provided)
      headers = Array.isArray(tbl.headers) ? tbl.headers : [];
      rows = Array.isArray(tbl.rows) ? tbl.rows : [];
    }
  
    // If no headers or rows are provided, return fallback
    if (headers.length === 0 && rows.length === 0) {
      return (
        <div
          key={`tbl-${index}`}
          className="mt-3 mb-4 text-center text-sm text-gray-500"
        >
          No data available for the table.
        </div>
      );
    }
  
    return (
      <div
        key={`tbl-${index}`}
        className="mt-3 mb-4 overflow-auto border rounded-lg"
      >
        <table className="min-w-full table-auto text-sm">
          {/* Table Header */}
          <thead className="bg-gray-50">
            <tr>
              {headers.map((header, hi) => (
                <th
                  key={hi}
                  className="px-3 py-2 text-left font-medium text-gray-700"
                >
                  {header}
                </th>
              ))}
            </tr>
          </thead>
          {/* Table Body */}
          <tbody>
            {rows.map((row, ri) => (
              <tr
                key={ri}
                className={ri % 2 === 0 ? "bg-white" : "bg-gray-50"}
              >
                {row.map((cell, ci) => (
                  <td
                    key={ci}
                    className="px-3 py-2 align-top whitespace-pre-wrap text-gray-800"
                  >
                    {cell}
                  </td>
                ))}
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    );
  };
  // Renders sources as modern cards with download CTA
  const renderSources = (sources = []) => {
    if (!Array.isArray(sources) || sources.length === 0) return null;
    return (
      <div className="mt-3 grid grid-cols-1 sm:grid-cols-2 gap-3">
        {sources.map((s, i) => (
          <div key={s.product_id || i} className="bg-white border rounded-xl p-3 shadow-sm hover:shadow-lg transition">
            <div className="flex items-start justify-between gap-3">
              <div className="min-w-0">
                <div className="text-sm font-semibold text-gray-900 truncate">{s.product_name}</div>
                <div className="text-xs text-gray-400 mt-1">{s.product_id}</div>
              </div>
              <div className="flex items-center gap-2">
                <a
                  href={`/product/${encodeURIComponent(s.product_id)}/pdf`}
                  target="_blank"
                  rel="noreferrer"
                  className="inline-flex items-center gap-2 px-3 py-2 bg-indigo-600 text-white rounded-md text-xs shadow"
                >
                  <FiDownload />
                  Download
                </a>
              </div>
            </div>
            {s.excerpt && <div className="mt-2 text-xs text-gray-700 whitespace-pre-wrap">{s.excerpt}</div>}
          </div>
        ))}
      </div>
    );
  };

  // Renders single chat message (compact preview)
  const renderMessage = (m, idx) => {
    const isUser = m.role === "user";
    return (
      <motion.div
        key={idx}
        initial={{ opacity: 0, y: 6 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.22, delay: idx * 0.01 }}
        className={`mb-2 ${isUser ? "flex justify-end" : "flex justify-start"}`}
      >
        <div
          className={`px-3 py-2 rounded-2xl max-w-[85%] whitespace-pre-wrap break-words text-sm ${isUser ? "bg-gradient-to-br from-indigo-600 to-purple-600 text-white" : "bg-white border text-gray-800"}`}
          style={{ boxShadow: isUser ? "0 6px 18px rgba(99,102,241,0.12)" : "none" }}
        >
          <div style={{ whiteSpace: "pre-wrap" }}>{m.content}</div>

          {/* tables */}
          {Array.isArray(m.tables) && m.tables.length > 0 && (
            <div className="mt-3">{m.tables.map((t, i) => renderTable(t, i))}</div>
          )}

          {/* sources */}
          {Array.isArray(m.sources) && m.sources.length > 0 && (
            <div className="mt-3">{renderSources(m.sources)}</div>
          )}

          {/* loading indicator inline */}
          {m.loading && (
            <div className="mt-3 flex items-center gap-2 text-xs text-gray-500">
              <svg className="animate-spin h-4 w-4 text-gray-500" viewBox="0 0 24 24">
                <circle cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="3" strokeDasharray="60" strokeLinecap="round" fill="none"></circle>
              </svg>
              Generating response...
            </div>
          )}
        </div>
      </motion.div>
    );
  };

  return (
    <div className="w-full flex justify-center px-4" ref={containerRef}>
      <div className={`w-full ${centeredWidth} mx-auto`}>

        {/* preview messages (keeps the UI as a minimal bar with helpful context) */}
        <div className="mb-4">
          {messages.slice(-PREVIEW_COUNT).map((m, idx) => (
            <div key={`preview-${idx}`}>
              {renderMessage(m, messages.length - PREVIEW_COUNT + idx >= 0 ? messages.length - PREVIEW_COUNT + idx : idx)}
            </div>
          ))}
        </div>

        {/* central pill input */}
        <div className="relative">
          <div 
            className="flex items-center gap-3 px-3 py-2 rounded-full shadow-md bg-white border border-gray-100" 
            style={{ transform: 'translateX(200px)' }} // Adjust the pixel value for precise positioning
          >
            {/* Upload plus button */}
            <button
              onClick={triggerFileInput}
              title="Upload file"
              aria-label="Upload file"
              className="flex-none inline-flex items-center justify-center h-11 w-11 rounded-full bg-gradient-to-br from-pink-500 to-amber-500 text-white shadow-md hover:scale-105 transition-transform"
            >
              <FiPlus className="h-70 w-70" />
            </button>
            <input ref={fileInputRef} type="file" className="hidden" onChange={handleFileChange} />

            {/* Microphone */}
            <div className="flex-none">
              <MicrophoneButton onText={(t) => setText(t)} />
            </div>

            {/* Text area */}
            <textarea
              ref={textareaRef}
              value={text}
              onChange={(e) => setText(e.target.value)}
              rows={1}
              placeholder="Ask anything — type a product name or say 'hi'..."
              onKeyDown={onKeyDown}
              onFocus={() => { if (suggestions && suggestions.length > 0) setShowSuggestions(true); }}
              className="flex-1 px-4 py-2 bg-white text-black placeholder-gray-400 text-sm resize-none outline-none"
              style={{ minHeight: 40 }}
            />

            {/* Send button */}
            <button
              onClick={submit}
              title="Send"
              className="flex-none inline-flex items-center justify-center h-11 w-11 rounded-full bg-indigo-600 text-white shadow hover:scale-95 transition"
            >
              {loading ? (
                <svg className="animate-spin h-5 w-5 text-white" viewBox="0 0 24 24">
                  <circle cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="3" strokeDasharray="60" strokeLinecap="round" fill="none"></circle>
                </svg>
              ) : (
                <FiSend className="h-70 w-70" />
              )}
            </button>
          </div>

          {/* prompt gallery button centered below */}
          <div 
            className="mt-3 flex justify-center"
            style={{ transform: 'translate(200px, -12px)' }} // Moves up (-20px) and right (+20px)
          >
            {typeof openPromptGallery === "function" && (
              <button
                onClick={() => openPromptGallery()}
                className="px-4 py-1.5 rounded-full bg-white border border-gray-100 shadow-sm hover:shadow-md text-sm font-medium"
              >
                Prompt gallery
              </button>
            )}
          </div>

          {/* suggestions dropdown */}
          {showSuggestions && suggestions && suggestions.length > 0 && (
            <div className="absolute left-0 right-0 z-40 mt-3 rounded-xl bg-white border shadow-lg overflow-hidden">
              <ul className="max-h-56 overflow-auto">
                {suggestions.map((s, i) => (
                  <li key={s.id}>
                    <button
                      className={`w-full text-left px-4 py-3 hover:bg-gray-50 flex justify-between items-center ${i === activeIndex ? "bg-gray-100" : ""}`}
                      onMouseDown={(e) => { e.preventDefault(); chooseSuggestion(s); }}
                      onMouseEnter={() => setActiveIndex(i)}
                    >
                      <div className="min-w-0">
                        <div className="font-medium text-sm text-gray-900 truncate">{s.name}</div>
                        <div className="text-xs text-gray-400 mt-1">{(s.reaction_type || "").replace(/_/g, " ")}</div>
                      </div>
                      <div className="text-xs text-gray-400 ml-4">Select</div>
                    </button>
                  </li>
                ))}
              </ul>
            </div>
          )}
        </div>

      </div>
    </div>
  );
}
#################################
#Fancyloader
import React from 'react';
import { motion } from 'framer-motion';

/**
 * FancyLoader:
 * Polished version inspired by the original design.
 * Props:
 *  - small (bool): Render a smaller compact version
 *  - message (string): The main message text
 *  - sub (string): The subtext
 */
export default function FancyLoader({
  small = false,
  message = 'Loading product details...',
  sub = 'This may take a few seconds.',
}) {
  const sizeClass = small ? 'w-12 h-12' : 'w-20 h-20';
  const innerSizeClass = small ? 'w-5 h-5' : 'w-10 h-10';
  const glowSizeClass = small ? 'w-16 h-16' : 'w-24 h-24';

  return (
    <div className={`flex items-center gap-4 ${small ? 'py-4' : 'py-10'}`}>
      <motion.div
        animate={{ rotate: 360 }}
        transition={{
          repeat: Infinity,
          duration: 1.8,
          ease: 'linear',
        }}
        className={`${sizeClass} rounded-full bg-gradient-to-br from-secondary to-primary shadow-lg flex items-center justify-center relative`}
        aria-hidden="true"
      >
        {/* Outer soft glowing ring */}
        <motion.div
          animate={{
            opacity: [0.4, 0.8, 0.4],
            scale: [1, 1.1, 1],
          }}
          transition={{
            repeat: Infinity,
            duration: 2,
            ease: 'easeInOut',
          }}
          className={`${glowSizeClass} rounded-full absolute bg-gradient-to-br from-primary/50 to-secondary/50 blur-md opacity-30`}
        />
        {/* Inner rotating pulse */}
        <motion.div
          initial={{ scale: 0.6 }}
          animate={{
            scale: [0.6, 0.9, 0.6],
          }}
          transition={{
            repeat: Infinity,
            duration: 1.2,
            ease: 'easeInOut',
          }}
          className={`${innerSizeClass} rounded-full bg-white/90 shadow-md`}
        />
      </motion.div>

      {/* Loader text */}
      <div>
        {/* Main message */}
        <motion.div
          initial={{ opacity: 0, y: -4 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{
            duration: 0.5,
            ease: 'easeOut',
          }}
          className="text-sm font-semibold text-gray-700 tracking-wide"
        >
          {message}
        </motion.div>
        {/* Subtext */}
        <motion.div
          initial={{ opacity: 0, y: 4 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{
            delay: 0.2,
            duration: 0.5,
            ease: 'easeOut',
          }}
          className="text-xs text-gray-500 mt-1 tracking-tight"
        >
          {sub}
        </motion.div>
      </div>
    </div>
  );
}
#################################
#Home.jsx
// src/App.jsx
import React, { useEffect, useState, useRef } from "react";
import { motion } from "framer-motion";

import ChatWindow from "./ChatWindow";
import ProductTabs from "./ProductTabs";
import ProductDetailModal from "./ProductDetailModal";
import SidebarHistory from "./SidebarHistory";
import ReactionTiles from "./ReactionTiles";
import PromptGallery from "./PromptGallery";

import {
  fetchReactions,
  fetchProducts,
  fetchProductMeta,
  fetchProductDetails,
  fetchSchemeImageUrl,
  fetchPrompts,
  queryWithCitations,
  uploadFile,
} from "./api";

import Navbar from "../Navbar/Navbar";
import Footer from "../Footer/Footer";

import Slider1 from "../../assets/Slider1.png";
import Slider2 from "../../assets/Slider2.png";
import Slider3 from "../../assets/Slider3.png";
import Slider4 from "../../assets/Slider4.png";
import Slider5 from "../../assets/Slider5.png";
import Slider6 from "../../assets/Slider6.png";

export default function App() {
  const [reactions, setReactions] = useState([]);
  const [prompts, setPrompts] = useState([]);

  const [products, setProducts] = useState([]);
  const [selectedReaction, setSelectedReaction] = useState(null);

  const [selectedProduct, setSelectedProduct] = useState(null); // meta
  const [productDetails, setProductDetails] = useState(null);
  const [productListVisible, setProductListVisible] = useState(false);

  const [detailModalOpen, setDetailModalOpen] = useState(false);

  const [messages, setMessages] = useState([]); // chat messages
  const [history, setHistory] = useState([]); // conversation history list

  // Loading state flags
  const [loadingDetails, setLoadingDetails] = useState(false);
  const [queryLoading, setQueryLoading] = useState(false);

  // Selected citations (right-click / multi-select)
  const [selectedCitedDocs, setSelectedCitedDocs] = useState([]);

  // For scheme preview in chat
  const [selectedSchemeUrl, setSelectedSchemeUrl] = useState(null);

  // Prompt gallery UI
  const [promptGalleryOpen, setPromptGalleryOpen] = useState(false);

  // Expanded full-page view (when user clicks a reaction type)
  const [expandedViewOpen, setExpandedViewOpen] = useState(false);

  // Slider
  const [slideIndex, setSlideIndex] = useState(0);
  const sliderIntervalRef = useRef(null);
  const SLIDE_COUNT = 6;

  const chatWindowRef = useRef(null);
  const uploadInputRef = useRef(null);

  useEffect(() => {
    fetchReactions()
      .then((r) => setReactions(r || []))
      .catch((e) => console.error("fetchReactions error:", e));

      fetchPrompts()
      .then((p) => {
        // some backends return {prompts: [...]}, accept both shapes
        setPrompts(p?.prompts || p || []);
      })
      .catch((e) => {
        console.warn("fetchPrompts failed:", e);
      });

    setMessages([
      {
        role: "assistant",
        content:
          "",
      },
    ]);
  }, []);

  // slider autoplay
  useEffect(() => {
    sliderIntervalRef.current = setInterval(() => {
      setSlideIndex((s) => (s + 1) % SLIDE_COUNT);
    }, 6000);
    return () => clearInterval(sliderIntervalRef.current);
  }, []);

  const pushMessage = (m) => setMessages((prev) => [...prev, m]);
  const normalize = (s) => (s || "").toString().toLowerCase().replace(/[^a-z0-9]/g, "");

  // handle upload using api.uploadFile (relative endpoint)
  const handleUploadFile = async (file, reaction_type = "User_Uploads") => {
    if (!file) return;
    pushMessage({ role: "assistant", content: "Uploading file...", loading: true });
    try {
      const res = await uploadFile(file, reaction_type);
      // remove loading placeholder
      setMessages((prev) => {
        const idx = prev.map((m) => m.loading).lastIndexOf(true);
        if (idx >= 0) {
          const copy = [...prev];
          copy.splice(idx, 1);
          return copy;
        }
        return prev;
      });
      pushMessage({ role: "assistant", content: "Upload complete and indexed (if supported)." });
      // refresh product list for the reaction_type
      try {
        const prods = await fetchProducts(reaction_type);
        setProducts(prods || []);
        setProductListVisible(true);
      } catch {}
      return res;
    } catch (err) {
      console.error("handleUploadFile error:", err);
      setMessages((prev) => {
        const idx = prev.map((m) => m.loading).lastIndexOf(true);
        if (idx >= 0) {
          const copy = [...prev];
          copy.splice(idx, 1);
          return copy;
        }
        return prev;
      });
      pushMessage({ role: "assistant", content: `Upload failed: ${err?.message || err}` });
      return null;
    }
  };

  const handleReactionClick = async (reactionName) => {
    setSelectedReaction(reactionName);
    try {
      const prods = await fetchProducts(reactionName);
      setProducts(prods || []);
      setProductListVisible(true);
      setExpandedViewOpen(true);
      pushMessage({ role: "assistant", content: `Found ${prods.length} products for ${reactionName}` });
    } catch (e) {
      console.error(e);
      pushMessage({ role: "assistant", content: "Error loading products for that reaction." });
    }
  };

  const handlePromptPick = async (promptText) => {
    setPromptGalleryOpen(false);
    await handleUserSend(promptText);
  };

  const handleSelectProduct = async (productId) => {
    try {
      setLoadingDetails(true);
      const meta = await fetchProductMeta(productId);
      setSelectedProduct(meta);
      setProductDetails(null);
      setSelectedSchemeUrl(null);
      setDetailModalOpen(true);

      try {
        const schemeUrl = await fetchSchemeImageUrl(productId);
        setSelectedSchemeUrl(schemeUrl);
      } catch {}

      try {
        const res = await fetchProductDetails(productId);
        const payload = (res && res.data) ? res.data : res;
        setProductDetails(payload);
        setHistory((h) => [
          { title: meta.name, content: payload.procedure ? payload.procedure.slice(0, 120) : "", productId: meta.id },
          ...h,
        ]);
      } catch (e) {
        console.error("fetchProductDetails error (select product):", e);
        pushMessage({ role: "assistant", content: "Failed to load product details." });
      }
    } catch (err) {
      console.error("handleSelectProduct error:", err);
      pushMessage({ role: "assistant", content: "Failed to load product metadata." });
    } finally {
      setLoadingDetails(false);
    }
  };

  const handleToggleCite = (product) => {
    const exists = selectedCitedDocs.find((p) => p.id === product.id);
    if (exists) {
      setSelectedCitedDocs((prev) => prev.filter((p) => p.id !== product.id));
      pushMessage({ role: "assistant", content: `Removed citation: ${product.name}` });
    } else {
      setSelectedCitedDocs((prev) => [{ id: product.id, name: product.name, reaction_type: product.reaction_type }, ...prev]);
      pushMessage({ role: "assistant", content: `Added citation: ${product.name}` });
    }
  };

  const removeCitation = (id) => {
    const found = selectedCitedDocs.find((d) => d.id === id);
    setSelectedCitedDocs((prev) => prev.filter((d) => d.id !== id));
    if (found) pushMessage({ role: "assistant", content: `Removed citation: ${found.name}` });
  };

  // main send handler (same logic as earlier working version)
  const handleUserSend = async (text) => {
    pushMessage({ role: "user", content: text });

    const norm = normalize(text);
    const match = reactions.find((r) => normalize(r) === norm || normalize(r) === normalize(text.replace(/\s+/g, "_")));
    if (match) {
      setSelectedReaction(match);
      try {
        const prods = await fetchProducts(match);
        setProducts(prods || []);
        setProductListVisible(true);
        setExpandedViewOpen(true);
        pushMessage({ role: "assistant", content: `Found ${prods.length} product${prods.length === 1 ? "" : "s"} — opened expanded view.` });
      } catch (e) {
        console.error(e);
        pushMessage({ role: "assistant", content: "Error loading products for that reaction."});
      }
      return;
    }

    if (selectedCitedDocs && selectedCitedDocs.length > 0) {
      setQueryLoading(true);
      pushMessage({ role: "assistant", content: "Searching selected documents...", loading: true });
      try {
        const ids = selectedCitedDocs.map((d) => d.id);
        const res = await queryWithCitations(ids, text);
        const payload = (res && res.data) ? res.data : res;
        setMessages((prev) => {
          const idx = prev.map((m) => m.loading).lastIndexOf(true);
          if (idx >= 0) {
            const copy = [...prev];
            copy.splice(idx, 1);
            return copy;
          }
          return prev;
        });
        const answer = payload?.answer || payload?.response || "No relevant answer found.";
        const sources = (payload?.sources || []).map((s) => ({ product_id: s.product_id, product_name: s.product_name }));
        pushMessage({ role: "assistant", content: answer, sources });
      } catch (err) {
        console.error("queryWithCitations error:", err);
        pushMessage({ role: "assistant", content: "Error querying selected documents."});
      } finally {
        setQueryLoading(false);
      }
      return;
    }

    if (!selectedProduct) {
      setQueryLoading(true);
      pushMessage({ role: "assistant", content: "Searching documents...", loading: true });
      try {
        const res = await fetchProductDetails(undefined, text);
        const payload = (res && res.data) ? res.data : res;
        setMessages((prev) => {
          const idx = prev.map((m) => m.loading).lastIndexOf(true);
          if (idx >= 0) {
            const copy = [...prev];
            copy.splice(idx, 1);
            return copy;
          }
          return prev;
        });
        if (payload && payload.api_name) {
          let summary = "";
          if (payload.api_name) summary += `API: ${payload.api_name}\n\n`;
          if (payload.reaction_chemistry) summary += `Reaction: ${payload.reaction_chemistry}\n\n`;
          if (payload.yield) summary += `Yield: ${payload.yield}\n\n`;
          if (payload.procedure) summary += `Procedure (excerpt):\n${(payload.procedure || "").slice(0, 400)}\n\n`;
          pushMessage({ role: "assistant", content: summary, tables: (payload.tables || []) });
        } else if (payload && (payload.answer || payload.response)) {
          const answer = payload.answer || payload.response || "No answer.";
          const sources = (payload.sources || []).map((s) => ({ product_id: s.product_id, product_name: s.product_name }));
          pushMessage({ role: "assistant", content: answer, sources });
        } else {
          pushMessage({ role: "assistant", content: "No structured data found. Try selecting a product or ask for specific extraction." });
        }
      } catch (err) {
        console.error("fetchProductDetails error (no product):", err);
        pushMessage({ role: "assistant", content: "Error querying documents." });
      } finally {
        setQueryLoading(false);
      }
      return;
    }

    setQueryLoading(true);
    pushMessage({ role: "assistant", content: "Fetching answer from selected document...", loading: true });
    try {
      const res = await fetchProductDetails(selectedProduct.id, text);
      const payload = (res && res.data) ? res.data : res;
      setMessages((prev) => {
        const idx = prev.map((m) => m.loading).lastIndexOf(true);
        if (idx >= 0) {
          const copy = [...prev];
          copy.splice(idx, 1);
          return copy;
        }
        return prev;
      });
      if (payload && payload.api_name) {
        let summary = "";
        if (payload.api_name) summary += `API: ${payload.api_name}\n\n`;
        if (payload.reaction_chemistry) summary += `Reaction: ${payload.reaction_chemistry}\n\n`;
        if (payload.yield) summary += `Yield: ${payload.yield}\n\n`;
        if (payload.procedure) summary += `Procedure (excerpt):\n${(payload.procedure || "").slice(0, 400)}\n\n`;
        pushMessage({ role: "assistant", content: summary, tables: (payload.tables || []) });
        setProductDetails(payload);
        setDetailModalOpen(true);
        setHistory((h) => [{ title: selectedProduct.name, content: payload.procedure ? payload.procedure.slice(0,120) : '', productId: selectedProduct.id }, ...h]);
      } else if (payload && (payload.answer || payload.response)) {
        const answer = payload.answer || payload.response || "No answer.";
        const sources = (payload.sources || []).map((s) => ({ product_id: s.product_id, product_name: s.product_name }));
        pushMessage({ role: "assistant", content: answer, sources });
      } else {
        pushMessage({ role: "assistant", content: "No answer found from document." });
      }
    } catch (err) {
      console.error("fetchProductDetails (selected) error:", err);
      pushMessage({ role: "assistant", content: "Error querying backend." });
    } finally {
      setQueryLoading(false);
    }
  };

  // slides
  const slides = [
    {
      id: 0,
      content: (
        <div className="flex flex-col items-center justify-center">
          <div className="text-lg font-semibold text-gray-700"></div>
          <img
            src={Slider1}
            alt="banner"
            className="w-full max-w-screen"
            style={{ height: '300px', objectFit: 'cover'  }}
          />
        </div>
      ),
    },
    {
      id: 1,
      content: (
        <div className="h-full w-full flex items-center justify-center text-gray-600">
          <img
            src={Slider2}
            alt="banner"
            className="w-full h-auto max-w-screen"
            style={{ maxHeight: '300%', objectFit: 'cover' }}
          />
        </div>
      ),
    },
    {
      id: 2,
      content: (
        <div className="h-full w-full flex items-center justify-center text-gray-600">
          <img
            src={Slider3}
            alt="banner"
            className="w-full h-auto max-w-screen"
            style={{ maxHeight: '300%', objectFit: 'cover' }}
          />
        </div>
      ),
    },
    {
      id: 3,
      content: (
        <div className="h-full w-full flex items-center justify-center text-gray-600">
          <img
            src={Slider4}
            alt="banner"
            className="w-full h-auto max-w-screen"
            style={{ maxHeight: '300%', objectFit: 'cover' }}
          />
        </div>
      ),
    },
    {
      id: 4,
      content: (
        <div className="h-full w-full flex items-center justify-center text-gray-600">
          <img
            src={Slider5}
            alt="banner"
            className="w-full h-auto max-w-screen"
            style={{ maxHeight: '300%', objectFit: 'cover' }}
          />
        </div>
      ),
    },
    {
      id: 5,
      content: (
        <div className="h-full w-full flex items-center justify-center text-gray-600">
          <img
            src={Slider6}
            alt="banner"
            className="w-full h-auto max-w-screen"
            style={{ height: '600px', objectFit: 'cover'  }}
          />
        </div>
      ),
    },
  ];

  const closeExpandedView = () => setExpandedViewOpen(false);

  // file input trigger
  const onPlusClick = () => {
    if (uploadInputRef.current) uploadInputRef.current.click();
  };

  const onFileInputChange = async (e) => {
    const f = e.target.files && e.target.files[0];
    if (!f) return;
    // default reaction_type 'Miscellaneous' — you could surface a small select later
    await handleUploadFile(f, "Miscellaneous");
    e.target.value = "";
  };

  return (
    <>
      <Navbar />

      <div className="min-h-screen bg-white flex justify-center items-start overflow-x-hidden">
        <div className="w-full max-w-7xl py-8 px-4">
          {/* Carousel */}
          <div className="mb-6">
          <div className="relative overflow-hidden rounded-2xl shadow-sm border border-gray-100">
            <div
              className="flex transition-transform duration-700 ease-in-out"
              style={{
                width: `${SLIDE_COUNT * 100}%`,
                transform: `translateX(-${slideIndex * (100 / SLIDE_COUNT)}%)`
              }}
            >
              {slides.map((s) => (
                <div
                  key={s.id}
                  className="w-full flex-shrink-0 p-6 bg-gray-50"
                  style={{ width: `${100 / SLIDE_COUNT}%` }}
                >
                  {/* Updated height here */}
                  <div className="h-64 flex items-center justify-center">{s.content}</div>
                </div>
              ))}
            </div>
            <div className="absolute bottom-3 left-1/2 transform -translate-x-1/2 flex gap-2">
              {slides.map((_, i) => (
                <button
                  key={i}
                  onClick={() => setSlideIndex(i)}
                  className={`w-2 h-2 rounded-full ${
                    i === slideIndex ? "bg-gray-700" : "bg-gray-300"
                  }`}
                />
              ))}
            </div>
          </div>
          </div>

          {/* Reaction tiles */}
          <div className="mb-6">
            <ReactionTiles reactions={reactions} onSelect={handleReactionClick} />
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            {/* Center: chat */}
            <div className="lg:col-span-2 flex justify-center">
              <div className="w-full max-w-2xl relative">
                <input ref={uploadInputRef} type="file" accept=".pdf,.docx,.pptx,.xlsx,.png,.jpg,.jpeg" className="hidden" onChange={onFileInputChange} />

                <ChatWindow
                  ref={chatWindowRef}
                  messages={messages}
                  onSend={handleUserSend}
                  centeredWidth="w-full"
                  loading={queryLoading || loadingDetails}
                  selectedCitedDocs={selectedCitedDocs}
                  removeCitation={removeCitation}
                />

                

                <div className="flex justify-center mt-4">
                  <button
                    onClick={() => setPromptGalleryOpen(true)}
                    className="px-4 py-2 rounded-full bg-white border shadow-sm hover:shadow-md text-sm font-medium"
                    style={{ transform: 'translateX(200px)' }}
                  >
                    Prompt Gallery
                  </button>
                </div>
              </div>
            </div>

            <div className="lg:col-span-1">
              <SidebarHistory history={history} onSelect={(h) => { if (h && h.productId) handleSelectProduct(h.productId); }} />
            </div>
          </div>

          {promptGalleryOpen && (
            <div className="fixed inset-0 z-50 flex items-center justify-center">
              <div className="absolute inset-0 bg-black/40" onClick={() => setPromptGalleryOpen(false)} />
              <div className="relative w-full max-w-3xl bg-white rounded-2xl p-6 shadow-2xl">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-lg font-semibold">Prompt Gallery</h3>
                  <button className="px-3 py-1 rounded-md" onClick={() => setPromptGalleryOpen(false)}>Close</button>
                </div>
                <PromptGallery prompts={prompts} onPick={handlePromptPick} />
              </div>
            </div>
          )}

          {expandedViewOpen && (
            <div className="fixed inset-0 z-50 bg-white/95 backdrop-blur-sm overflow-auto">
              <div className="max-w-7xl mx-auto py-8 px-6 overflow-x-hidden">
                <div className="flex items-center justify-between mb-4">
                  <div className="flex items-center gap-3">
                    <button className="px-3 py-2 rounded-md bg-gray-100" onClick={closeExpandedView}>Close</button>
                    <h2 className="text-xl font-semibold">{selectedReaction || "Explore Products"}</h2>
                  </div>
                  <div>
                    <button className="px-3 py-2 rounded-md bg-indigo-600 text-white" onClick={closeExpandedView}>Done</button>
                  </div>
                </div>

                <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                  <div className="lg:col-span-2">
                    <div className="bg-white rounded-2xl shadow p-4 h-[72vh] flex flex-col">
                      <div className="flex-1 overflow-auto">
                        <ChatWindow
                          messages={messages}
                          onSend={handleUserSend}
                          centeredWidth="w-full"
                          loading={queryLoading || loadingDetails}
                          selectedCitedDocs={selectedCitedDocs}
                          removeCitation={removeCitation}
                        />
                      </div>
                    </div>
                  </div>

                  <div className="lg:col-span-1">
                    <div className="bg-white rounded-2xl shadow p-4 h-[72vh] overflow-auto">
                      <h3 className="text-lg font-semibold mb-3">Matched Products</h3>
                      {productListVisible && products && products.length > 0 ? (
                        <ProductTabs
                          products={products}
                          onSelect={(pid) => { handleSelectProduct(pid); }}
                          onContext={(p) => handleToggleCite(p)}
                          citedIds={new Set(selectedCitedDocs.map((d) => d.id))}
                        />
                      ) : (
                        <div className="text-gray-500">No products loaded — pick a reaction tile or type a product name.</div>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}

          <ProductDetailModal
            open={detailModalOpen}
            onClose={() => setDetailModalOpen(false)}
            meta={selectedProduct}
            details={productDetails}
            loading={loadingDetails}
          />
        </div>
      </div>

      <Footer />
    </>
  );
}
#####################
#Microphonebutton

import React, { useState, useRef } from 'react';
import { FiMic, FiMicOff } from 'react-icons/fi';
import { motion } from 'framer-motion';
import { transcribeAudio } from './api';

export default function MicrophoneButton({ onText }) {
  const [listening, setListening] = useState(false);
  const [permissionDenied, setPermissionDenied] = useState(false);
  const recognitionRef = useRef(null);
  const mediaRecorderRef = useRef(null);
  const recordedChunksRef = useRef([]);

  const startBrowserRecognition = () => {
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    if (!SpeechRecognition) {
      setPermissionDenied(true);
      return;
    }
    const r = new SpeechRecognition();
    r.lang = 'en-US';
    r.interimResults = true;
    r.continuous = true;
    r.onresult = (ev) => {
      let transcript = '';
      for (let i = 0; i < ev.results.length; i++) {
        transcript += ev.results[i][0].transcript;
      }
      onText(transcript);
    };
    r.onerror = (e) => {
      console.error('SpeechRecognition error', e);
    };
    recognitionRef.current = r;
    r.start();
    setListening(true);
  };

  const stopBrowserRecognition = () => {
    if (recognitionRef.current) {
      try { recognitionRef.current.stop(); } catch(e){/*ignore*/ }
      recognitionRef.current = null;
    }
    setListening(false);
  };

  const startRecordingAndUpload = async () => {
    if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
      alert('Media devices not supported in this browser.');
      return;
    }
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      const mr = new MediaRecorder(stream);
      recordedChunksRef.current = [];
      mr.ondataavailable = (e) => {
        if (e.data.size > 0) recordedChunksRef.current.push(e.data);
      };
      mr.onstop = async () => {
        const blob = new Blob(recordedChunksRef.current, { type: 'audio/webm' });
        // Send to backend for Google STT optionally (demo expects browser STT first)
        try {
          const res = await transcribeAudio(new File([blob], 'audio.webm'), false);
          if (res.transcript) onText(res.transcript);
        } catch (err) {
          console.error('Transcription failed', err);
        }
      };
      mediaRecorderRef.current = mr;
      mr.start();
      setListening(true);
    } catch (e) {
      console.error(e);
      setPermissionDenied(true);
    }
  };

  const stopRecording = () => {
    if (mediaRecorderRef.current && mediaRecorderRef.current.state !== 'inactive') {
      mediaRecorderRef.current.stop();
    }
    setListening(false);
  };

  const toggle = () => {
    if (listening) {
      stopBrowserRecognition();
      stopRecording();
    } else {
      // Prefer browser live recognition for instant UX:
      startBrowserRecognition();
      // fallback: startRecordingAndUpload();
    }
  };

  return (
    <motion.button
      whileTap={{ scale: 0.95 }}
      onClick={toggle}
      className={`p-3 rounded-full shadow-lg ${listening ? 'bg-gradient-to-br from-secondary to-primary text-white' : 'bg-white text-primary'}`}
      title="Start/stop microphone"
    >
      {listening ? <FiMicOff size={20} /> : <FiMic size={20} />}
    </motion.button>
  );
}
###############################
#ProductDetail
import React from 'react';
import { downloadPdfUrl, fetchSchemeImageUrl } from './api';

export default function ProductDetail({ meta, details }) {
  // If no product selected
  if (!meta) {
    return (
      <div className="p-6 text-gray-500 bg-white rounded-2xl shadow-sm">
        <div className="text-lg font-medium">Select a product to view details</div>
        <div className="text-sm mt-2">Product metadata and structured tables will appear here.</div>
      </div>
    );
  }

  // Build the endpoint URLs
  const pdfUrl = downloadPdfUrl(meta.id);
  const schemeImageUrl = fetchSchemeImageUrl(meta.id);

  return (
    <div className="p-6 bg-white rounded-2xl shadow-lg">
      <div className="flex justify-between items-start">
        <div>
          <h2 className="text-2xl font-bold text-primary">{meta.name}</h2>
          <div className="text-sm text-purple-700">{meta.reaction_type}</div>
        </div>
        <div className="flex gap-2 items-center">
          {/* Scheme image preview opens in new tab; file download will trigger FileResponse */}
          <a
            href={schemeImageUrl}
            target="_blank"
            rel="noreferrer"
            className="px-3 py-1 rounded-md bg-secondary/20 text-secondary text-sm"
            title="Open synthetic scheme image"
          >
            View Scheme
          </a>

          <a
            href={pdfUrl}
            className="px-3 py-1 rounded-md bg-accent/10 text-accent text-sm"
            target="_blank"
            rel="noreferrer"
            // 'download' attribute is OK for same-origin; backend FileResponse also sets headers to force download
            download={`${meta.name}.pdf`}
            title="Download full PDF"
          >
            Download PDF
          </a>
        </div>
      </div>

      <div className="mt-6 space-y-4">
        <div>
          <h4 className="text-sm text-gray-500">API Name</h4>
          <div className="mt-1 p-3 bg-gray-50 rounded">{details.api_name || '—'}</div>
        </div>

        <div>
          <h4 className="text-sm text-gray-500">Reaction Chemistry</h4>
          <div className="mt-1 p-3 bg-gray-50 rounded">{details.reaction_chemistry || '—'}</div>
        </div>

        <div>
          <h4 className="text-sm text-gray-500">Yield</h4>
          <div className="mt-1 p-3 bg-gray-50 rounded">{details.yield || '—'}</div>
        </div>

        <div>
          <h4 className="text-sm text-gray-500">Procedure</h4>
          <div className="mt-1 p-3 bg-white rounded border whitespace-pre-wrap">{details.procedure || '—'}</div>
        </div>

        <div>
          <h4 className="text-sm text-gray-500">Tables</h4>
          {details.tables && details.tables.length > 0 ? (
            details.tables.map((t, idx) => (
              <div className="mt-3" key={idx}>
                {t.headers && t.headers.length > 0 ? (
                  <div className="overflow-auto rounded-lg border">
                    <table className="min-w-full divide-y">
                      <thead className="bg-gray-50">
                        <tr>
                          {t.headers.map((h, i) => <th key={i} className="px-4 py-2 text-left text-xs font-medium text-gray-600">{h}</th>)}
                        </tr>
                      </thead>
                      <tbody className="bg-white divide-y">
                        {t.rows.map((r, ri) => (
                          <tr key={ri}>
                            {r.map((c, ci) => <td key={ci} className="px-4 py-2 text-sm">{c}</td>)}
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                ) : (
                  <pre className="bg-gray-50 p-3 rounded whitespace-pre-wrap">{t.raw_md}</pre>
                )}
              </div>
            ))
          ) : <div className="text-sm text-gray-500">No tabular data detected.</div>}
        </div>

        {/* Scheme image preview shown below tables for better layout */}
        <div className="mt-4">
          <h4 className="text-sm text-gray-500 mb-2">Synthetic Scheme Preview</h4>
          <div className="w-full bg-gray-50 rounded p-3 flex items-center justify-center">
            <img
              src={schemeImageUrl}
              alt={`${meta.name} scheme`}
              onError={(e) => {
                // show placeholder on error
                e.currentTarget.style.display = 'none';
                // optionally show fallback text
                const parent = e.currentTarget.parentNode;
                if (parent) {
                  const node = document.createElement('div');
                  node.textContent = 'Scheme image not available.';
                  node.className = 'text-sm text-gray-500';
                  parent.appendChild(node);
                }
              }}
              style={{ maxWidth: '100%', maxHeight: '360px', objectFit: 'contain', borderRadius: '8px' }}
            />
          </div>
        </div>
      </div>
    </div>
  );
}
############################
ProductDetailModal.jsx
import React, { useEffect, useState, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import FancyLoader from './FancyLoader';
import { downloadPdfUrl, fetchSchemeImageUrl } from './api';

export default function ProductDetailModal({ open, onClose, meta, details, loading }) {
  const [schemeUrl, setSchemeUrl] = useState(null);
  const [imgStatus, setImgStatus] = useState('idle'); // idle | loading | ok | error
  const [imgError, setImgError] = useState('');
  const closeBtnRef = useRef(null);

  useEffect(() => {
    if (!open) {
      setSchemeUrl(null);
      setImgStatus('idle');
      setImgError('');
      return;
    }
    if (closeBtnRef.current) closeBtnRef.current.focus();
  }, [open]);

  // Load Scheme Image
  useEffect(() => {
    let mounted = true;
    setSchemeUrl(null);
    setImgStatus('idle');
    setImgError('');

    if (!meta || !open) return;

    const candidateUrl =
      meta.scheme_image &&
      typeof meta.scheme_image === 'string' &&
      /^https?:\/\//i.test(meta.scheme_image)
        ? meta.scheme_image
        : fetchSchemeImageUrl(meta.id);

    if (!candidateUrl) {
      setImgStatus('error');
      setImgError('No scheme image configured for this product.');
      return;
    }

    setSchemeUrl(candidateUrl);
    setImgStatus('loading');

    const img = new Image();
    img.crossOrigin = 'anonymous';
    img.onload = () => {
      if (!mounted) return;
      setImgStatus('ok');
    };
    img.onerror = (err) => {
      if (!mounted) return;
      setImgStatus('error');
      setImgError(err.message || 'Failed to load image (CORS or missing file).');
    };

    try {
      img.src = candidateUrl;
    } catch (e) {
      setImgStatus('error');
      setImgError(e.message || 'Failed to start loading image.');
    }

    return () => {
      mounted = false;
    };
  }, [meta, open]);

  // Close on ESC
  useEffect(() => {
    const handler = (e) => {
      if (e.key === 'Escape') onClose && onClose();
    };
    if (open) window.addEventListener('keydown', handler);
    return () => window.removeEventListener('keydown', handler);
  }, [open, onClose]);

  if (!open || !meta) return null;

  const pdfUrl = downloadPdfUrl(meta.id);
  const downloadScheme = () => {
    if (schemeUrl) {
      const a = document.createElement('a');
      a.href = schemeUrl;
      a.download = `${meta.name}_scheme.png`;
      a.click();
    }
  };

  const copyProcedure = async () => {
    try {
      if (!details?.procedure) return;
      await navigator.clipboard.writeText(details.procedure);
      alert('Procedure copied to clipboard');
    } catch (e) {
      alert('Failed to copy (clipboard permission denied).');
    }
  };

  const openFullImage = () => {
    if (schemeUrl) window.open(schemeUrl, '_blank', 'noopener,noreferrer');
  };

  return (
    <AnimatePresence>
      <motion.div
        key="modal-root"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        exit={{ opacity: 0 }}
        className="fixed inset-0 z-50 flex items-center justify-center bg-black/75"
        aria-modal="true"
        role="dialog"
      >
        <motion.div
          initial={{ y: -20, opacity: 0, scale: 0.95 }}
          animate={{ y: 0, opacity: 1, scale: 1 }}
          exit={{ y: -20, opacity: 0, scale: 0.95 }}
          transition={{ duration: 0.4 }}
          className="relative w-full max-w-5xl mx-4 rounded-2xl bg-white shadow-lg overflow-hidden"
          role="document"
        >
          {/* Header */}
          <div className="flex items-center justify-between px-6 py-4 border-b bg-gray-100">
            <div className="pr-4">
              <h1 className="text-2xl font-bold text-gray-800 font-['Merriweather']">{meta.name}</h1>
              <div className="text-sm text-gray-500 capitalize mt-1">{meta.reaction_type?.replace(/_/g, ' ')}</div>
            </div>
            <div className="flex items-center gap-2">
              <button
                ref={closeBtnRef}
                onClick={onClose}
                className="px-4 py-2 bg-gray-300 rounded-md hover:bg-gray-400 transition text-sm">
                Close
              </button>
            </div>
          </div>

          {/* Content */}
          <div className="p-6 grid grid-cols-1 lg:grid-cols-3 gap-6 max-h-[75vh] overflow-auto">
            {/* Main column */}
            <div className="lg:col-span-2 space-y-5">
              {/* Summary */}
              <div className="grid sm:grid-cols-3 gap-4 bg-gray-50 p-4 rounded-lg">
                {['API Name', 'Reaction Chemistry', 'Yield'].map((label, index) => (
                  <div key={index} className="text-gray-700">
                    <div className="text-xs text-gray-600">{label}</div>
                    <div className="text-sm font-medium mt-1">
                      {details ? details[label.toLowerCase().replace(/\s+/g, '_')] || '—' : 'Loading...'}
                    </div>
                  </div>
                ))}
              </div>

              {/* Procedure */}
              <div className="space-y-2">
                <div className="flex items-center justify-between text-sm font-semibold text-gray-600">
                  Procedure
                  <div className="flex gap-2">
                    <button onClick={copyProcedure} className="px-3 py-1 bg-gray-200 rounded hover:bg-gray-300">
                      Copy Procedure
                    </button>
                    <a
                      href={pdfUrl}
                      target="_blank"
                      rel="noreferrer"
                      className="px-3 py-1 bg-gray-100 border rounded hover:bg-gray-200"
                    >
                      PDF Source
                    </a>
                  </div>
                </div>
                <div
                  className="p-4 bg-gray-100 border rounded text-sm whitespace-pre-wrap font-['Roboto']"
                  style={{ fontFamily: "'Merriweather', serif" }}
                >
                  {details?.procedure || <span className="text-gray-400">Procedure not available.</span>}
                </div>
              </div>

              {/* Tables */}
              <div>
                <h3 className="text-sm font-semibold text-gray-600 mb-2">Tabular Data</h3>
                {details?.tables?.length > 0 ? (
                  <div className="space-y-4">
                    {details.tables.map((table, index) => (
                      <div key={index} className="border rounded-lg p-4 bg-gray-50">
                        <table className="text-sm min-w-full">
                          <thead>
                            <tr className="bg-gray-200">
                              {table.headers.map((header, hIndex) => (
                                <th
                                  key={hIndex}
                                  className="px-3 py-1 text-left font-semibold text-gray-700"
                                >
                                  {header}
                                </th>
                              ))}
                            </tr>
                          </thead>
                          <tbody>
                            {table.rows.map((row, rIndex) => (
                              <tr
                                key={rIndex}
                                className={`${
                                  rIndex % 2 === 0 ? 'bg-white' : 'bg-gray-100'
                                }`}
                              >
                                {row.map((item, cIndex) => (
                                  <td
                                    key={cIndex}
                                    className="px-3 py-2 text-gray-700"
                                  >
                                    {item}
                                  </td>
                                ))}
                              </tr>
                            ))}
                          </tbody>
                        </table>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="text-sm text-gray-400">
                    No tabular data detected in this document.
                  </div>
                )}
              </div>
            </div>

            {/* Scheme Preview */}
            <div className="space-y-5">
              <div className="bg-gray-100 p-5 rounded-lg flex items-center justify-center">
                {imgStatus === 'loading' || loading ? (
                  <FancyLoader message="Loading scheme preview" />
                ) : imgStatus === 'ok' ? (
                  <div className="flex flex-col items-center">
                    <img
                      src={schemeUrl}
                      alt={`${meta.name} scheme`}
                      className="max-w-full max-h-64 rounded-lg border cursor-zoom-in hover:shadow-lg"
                      onClick={openFullImage}
                    />
                    <button
                      onClick={downloadScheme}
                      className="mt-2 px-4 py-2 bg-primary text-white rounded-lg text-sm hover:bg-blue-600"
                    >
                      Download Scheme
                    </button>
                  </div>
                ) : (
                  <div className="text-gray-500 text-center">
                    {imgError || 'No scheme image provided for this product.'}
                  </div>
                )}
              </div>
            </div>
          </div>
        </motion.div>
      </motion.div>
    </AnimatePresence>
  );
}
#################
ProductGrid.jsx

import React from 'react';
import { motion } from 'framer-motion';

export default function ProductGrid({ products, onView }) {
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
      {products.map(p => (
        <motion.div key={p.id} whileHover={{ y: -6 }} className="bg-white rounded-2xl p-4 shadow-md border">
          <div className="flex justify-between items-start">
            <div>
              <h3 className="text-lg font-semibold text-primary">{p.name}</h3>
              <div className="text-xs text-purple-700 mt-1">{p.reaction_type}</div>
            </div>
            <div className="flex flex-col gap-2">
              <button className="px-3 py-1 rounded-full bg-indigo-50 text-indigo-600 text-sm" onClick={() => onView(p.id)}>View</button>
            </div>
          </div>
        </motion.div>
      ))}
    </div>
  );
}
################################
ProductTabs.jsx
import React, { useRef, useEffect } from "react";
import { motion } from "framer-motion";

/**
 * ProductTabs
 *
 * Props:
 *  - products: Array<{id, name, reaction_type, pdf_path, has_scheme_image, has_scheme_cdx}>
 *  - onSelect(productId)        // left-click / keyboard Enter to open product
 *  - onContext(product)         // right-click to toggle citation selection
 *  - citedIds: Set<string>      // set of product ids currently cited (for visual state)
 *
 * Features:
 *  - horizontal scroll area with left/right nav buttons
 *  - long-press / hold to continuously scroll (mouse + touch)
 *  - right-click toggles citation (prevents default context menu)
 *  - accessible: supports Enter key to select tile
 *  - graceful truncation + full name via title attribute
 */
export default function ProductTabs({
  products = [],
  onSelect,
  onContext,
  citedIds = new Set(),
}) {
  const scrollContainerRef = useRef(null);
  const scrollIntervalRef = useRef(null);

  useEffect(() => {
    // Cleanup on unmount
    return () => {
      if (scrollIntervalRef.current) {
        clearInterval(scrollIntervalRef.current);
        scrollIntervalRef.current = null;
      }
    };
  }, []);

  const startScrolling = (direction) => {
    if (!scrollContainerRef.current) return;
    if (scrollIntervalRef.current) return; // already scrolling

    scrollIntervalRef.current = setInterval(() => {
      scrollContainerRef.current.scrollBy({
        left: direction === "left" ? -60 : 60,
        behavior: "smooth",
      });
    }, 100);
  };

  const stopScrolling = () => {
    if (scrollIntervalRef.current) {
      clearInterval(scrollIntervalRef.current);
      scrollIntervalRef.current = null;
    }
  };

  const scrollOnce = (direction) => {
    if (!scrollContainerRef.current) return;
    stopScrolling();
    scrollContainerRef.current.scrollBy({
      left: direction === "left" ? -240 : 240,
      behavior: "smooth",
    });
  };

  return (
    <div className="bg-transparent">
      {/* Header */}
      <div className="flex items-center justify-between mb-2">
        <h3 className="text-lg font-semibold text-primary">Matched Products</h3>
        <div className="text-sm text-gray-500">Left-click to open • Right-click to cite</div>
      </div>

      {/* Navigation + Scroll area */}
      <div className="flex items-center gap-3">
        {/* Left nav */}
        <button
          aria-label="Scroll left"
          title="Scroll Left"
          className="px-3 py-2 bg-gray-200 hover:bg-gray-300 rounded-full shadow-md transition"
          onClick={() => scrollOnce("left")}
          onMouseDown={() => startScrolling("left")}
          onMouseUp={stopScrolling}
          onMouseLeave={stopScrolling}
          onTouchStart={() => startScrolling("left")}
          onTouchEnd={stopScrolling}
        >
          ←
        </button>

        {/* Scrollable container */}
        <div
          ref={scrollContainerRef}
          className="overflow-x-auto py-2 w-full no-scrollbar flex gap-3"
          role="list"
        >
          {products.map((product) => {
            const isCited = citedIds && citedIds.has && citedIds.has(product.id);
            return (
              <motion.button
                key={product.id}
                role="listitem"
                whileHover={{ y: -6 }}
                whileTap={{ scale: 0.98 }}
                onClick={() => onSelect && onSelect(product.id)}
                onContextMenu={(e) => {
                  if (onContext) {
                    e.preventDefault();
                    onContext(product);
                  }
                }}
                onKeyDown={(e) => {
                  if (e.key === "Enter" || e.key === " ") {
                    e.preventDefault();
                    onSelect && onSelect(product.id);
                  }
                }}
                title={product.name}
                className={`min-w-[220px] max-w-[220px] flex-shrink-0 bg-white border rounded-2xl p-3 shadow hover:shadow-lg transition flex flex-col justify-between text-left
                  ${isCited ? "ring-2 ring-accent" : ""}`}
                aria-pressed={isCited ? "true" : "false"}
              >
                <div className="flex items-start justify-between gap-3">
                  <div className="flex-1">
                  <div
                    className="text-sm font-semibold truncate overflow-hidden text-ellipsis whitespace-nowrap max-w-[200px]"
                    title={product.name} // tooltip for full visibility
                  >
                    {product.name}
                  </div>
                    <div className="text-xs text-gray-400 mt-1">{(product.reaction_type || "").replace(/_/g, " ")}</div>
                  </div>

                  {isCited && (
                    <div className="text-xs text-white bg-accent px-2 py-1 rounded-full">CITED</div>
                  )}
                </div>

                <div className="text-xs mt-2 text-gray-500 truncate">
                  {product.pdf_path ? product.pdf_path.split(/[\\/]/).pop() : ""}
                </div>
              </motion.button>
            );
          })}
        </div>

        {/* Right nav */}
        <button
          aria-label="Scroll right"
          title="Scroll Right"
          className="px-3 py-2 bg-gray-200 hover:bg-gray-300 rounded-full shadow-md transition"
          onClick={() => scrollOnce("right")}
          onMouseDown={() => startScrolling("right")}
          onMouseUp={stopScrolling}
          onMouseLeave={stopScrolling}
          onTouchStart={() => startScrolling("right")}
          onTouchEnd={stopScrolling}
        >
          →
        </button>
      </div>
    </div>
  );
}
########################
PromptGallery.jsx
// src/components/PromptGallery.jsx
import React from "react";
import { motion } from "framer-motion";
import { FiX } from "react-icons/fi";

/**
 * PromptGallery modal
 *
 * Props:
 *  - open: boolean
 *  - onClose: fn
 *  - prompts: [{title, prompt/text}]
 *  - onPick(promptText)
 */
export default function PromptGallery({ open = false, onClose = () => {}, prompts = [], onPick = () => {} }) {
  if (!open) return null;

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center p-6">
      <div className="absolute inset-0 bg-black/40" onClick={onClose} />
      <div className="relative w-full max-w-3xl bg-white rounded-2xl shadow-2xl z-60 p-6">
        <div className="flex items-center justify-between mb-4">
          <div className="text-lg font-semibold">Prompt gallery</div>
          <button onClick={onClose} className="p-2 rounded-full hover:bg-gray-100">
            <FiX />
          </button>
        </div>

        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
          {prompts && prompts.length > 0 ? prompts.map((p, i) => {
            const title = p.title || (p.text ? p.text.slice(0, 40) : `Prompt ${i+1}`);
            const promptText = p.prompt || p.text || p;
            return (
              <motion.button
                key={i}
                onClick={() => onPick(promptText)}
                whileHover={{ y: -6 }}
                className="bg-white border rounded-2xl p-4 text-left shadow hover:shadow-lg transition"
              >
                <div className="text-sm font-semibold mb-2">{title}</div>
                <div className="text-xs text-gray-500 truncate">{promptText}</div>
              </motion.button>
            );
          }) : (
            <div className="text-sm text-gray-500">No sample prompts available.</div>
          )}
        </div>
      </div>
    </div>
  );
}
####################
Reactionlist.jsx

import React from 'react';
import { motion } from 'framer-motion';

export default function ReactionList({ reactions, onSelect, selected }) {
  return (
    <div className="w-full">
      <h4 className="text-lg font-semibold text-primary mb-2">Reaction Types</h4>
      <div className="grid grid-cols-2 gap-2">
        {reactions.map((r) => (
          <motion.button
            key={r}
            layout
            onClick={() => onSelect(r)}
            className={`p-3 rounded-lg ${selected === r ? 'bg-gradient-to-br from-secondary to-primary text-white' : 'bg-white border'} shadow-sm`}
          >
            {r.replace(/_/g, ' ')}
          </motion.button>
        ))}
      </div>
    </div>
  );
}
######################
ReactionTiles.jsx
// src/components/ReactionTiles.jsx
import React from 'react';
import { motion } from 'framer-motion';

export default function ReactionTiles({ reactions = [], onSelect }) {
  return (
    <div className="py-3">
      <div className="flex flex-wrap gap-3">
        {reactions.map((r) => (
          <motion.button
            key={r}
            whileHover={{ scale: 1.03 }}
            whileTap={{ scale: 0.98 }}
            onClick={() => onSelect(r)}
            className="px-4 py-2 bg-gradient-to-r from-purple-100 via-purple-200 to-indigo-100 text-purple-800 rounded-2xl shadow-sm border border-purple-200 hover:shadow-md"
          >
            {r.replace(/_/g, " ")}
          </motion.button>
        ))}
      </div>
    </div>
  );
}
#####################
SidebarHistory.jsx
import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';

export default function SidebarHistory({ history = [], onSelect }) {
  const [open, setOpen] = useState(
    localStorage.getItem('sidebarHistoryOpen') === 'true' || false
  );

  useEffect(() => {
    localStorage.setItem('sidebarHistoryOpen', open);
  }, [open]);

  return (
    <motion.div
      initial={{ x: 0 }}
      animate={{ x: 0 }}
      style={{
        position: 'fixed',
        top: '4rem',
        left: '1rem',
        zIndex: 40,
      }}
    >
      <div className="flex flex-col items-end">
        {/* Toggle Button */}
        <motion.button
          onClick={() => setOpen((prev) => !prev)}
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
          style={{
            padding: '0.4rem 0.8rem', // Reduced size for a smaller button
            borderRadius: '20px',
            backgroundColor: 'rgba(200, 150, 255, 0.3)', // Light fading purple
            color: '#6b4d9b', // Darker shade for contrast
            boxShadow: '0px 2px 6px rgba(0, 0, 0, 0.1)', // Subtle shadow
            cursor: 'pointer',
            fontSize: '0.75rem', // Smaller font for compact appearance
            fontWeight: '500',
            border: open ? '1px solid rgba(200, 150, 255, 0.5)' : '1px solid rgba(220, 190, 255, 0.5)', // Border matching purple tone
            transition: 'background-color 0.3s ease, box-shadow 0.3s ease',
          }}
          title="Toggle Conversations"
        >
          {open ? 'Hide' : 'Conversations'}
        </motion.button>

        {/* Sidebar Content */}
        <motion.div
          initial={{ opacity: 0, y: -8 }}
          animate={{ opacity: open ? 1 : 0, y: open ? 0 : -8 }}
          transition={{ duration: 0.3 }}
          style={{
            display: open ? 'block' : 'none',
            width: '16rem',
            background: '#ffffff',
            border: '1px solid #e3e3e3',
            borderRadius: '12px',
            boxShadow: '0px 6px 14px rgba(0, 0, 0, 0.08)',
            padding: '1rem',
            overflow: 'hidden',
          }}
        >
          <h4
            style={{
              fontSize: '1rem',
              fontWeight: '600',
              color: '#333333',
              marginBottom: '0.8rem',
            }}
          >
            Conversations
          </h4>
          <div
            style={{
              maxHeight: '50vh',
              overflowY: 'auto',
              display: 'flex',
              flexDirection: 'column',
              gap: '0.7rem',
            }}
          >
            {history.length === 0 ? (
              <div style={{ fontSize: '0.85rem', color: '#666666' }}>
                No conversations yet.
              </div>
            ) : (
              history.map((h, i) => (
                <div
                  key={i}
                  style={{
                    padding: '0.7rem',
                    borderRadius: '8px',
                    border: '1px solid #e3e3e3',
                    cursor: 'pointer',
                    backgroundColor: '#fcfcfc', // Slightly off-white for subtle texture
                    transition: 'box-shadow 0.3s ease',
                  }}
                  className="hover:shadow-md"
                  onClick={() => onSelect(h)}
                >
                  <div style={{ fontSize: '0.85rem', fontWeight: '600', color: '#333333' }}>
                    {h.title}
                  </div>
                  <div
                    style={{
                      fontSize: '0.75rem',
                      color: '#787878',
                      marginTop: '0.5rem',
                      lineHeight: '1.3',
                      whiteSpace: 'nowrap',
                      overflow: 'hidden',
                      textOverflow: 'ellipsis',
                    }}
                  >
                    {h.content}
                  </div>
                </div>
              ))
            )}
          </div>
        </motion.div>
      </div>
    </motion.div>
  );
}
Uploadpanel.jsx

import React, { useState } from 'react';
import { uploadFile, fetchProducts } from './api';

export default function UploadPanel({ onUploaded }) {
  const [file, setFile] = useState(null);
  const [reactionType, setReactionType] = useState("User_Uploads");
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState(null);

  const submit = async (e) => {
    e.preventDefault();
    if (!file) return setMessage("Select a file first");
    setLoading(true);
    try {
      const res = await uploadFile(file, reactionType, file.name);
      setMessage("Uploaded: " + (res.meta?.name || res.product_id));
      setFile(null);
      if (onUploaded) onUploaded(res);
    } catch (err) {
      console.error(err);
      setMessage("Upload failed");
    } finally {
      setLoading(false);
    }
  };

  return (
    <form onSubmit={submit} className="p-4 bg-white rounded-xl shadow-sm">
      <div className="flex gap-2 items-center">
        <input type="file" onChange={(e) => setFile(e.target.files?.[0])} />
        <select value={reactionType} onChange={(e) => setReactionType(e.target.value)} className="px-2 py-1 border rounded">
          <option value="User_Uploads">User Uploads</option>
          <option value="C-C_Bond_Formation">C-C Bond Formation</option>
          <option value="C-N_Bond_Formation">C-N Bond Formation</option>
          {/* add others or fetch from backend */}
        </select>
        <button disabled={loading} type="submit" className="px-3 py-1 bg-primary text-white rounded">Upload</button>
      </div>
      {message && <div className="mt-2 text-sm text-gray-600">{message}</div>}
    </form>
  );
}
#############################
Login.jsx
import React, { useState } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../../AuthContext';
import drllogo from '../../assets/logo_white.svg';
import appLogo from '../../assets/ChemIntel_Logo_Colored.png';
import backgroundImage from '../../assets/background-login.png';
import logincss from '../Login/Login.module.css';

const Login = () => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const { login } = useAuth();
  const navigate = useNavigate();
  const [showPassword, setShowPassword] = useState(false);
  const [error, setError] = useState('');

  const handleUsernameChange = (e) => setUsername(e.target.value);
  const handlePasswordChange = (e) => setPassword(e.target.value);
  const toggleShowPassword = () => setShowPassword(!showPassword);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    try {
      const response = await axios.post(`http://localhost:8000/login`, { username, password });
      const { access_token , firstname,lastname } = response.data;
      login(access_token, { firstname, lastname });
      setLoading(false);
      navigate('/home');
    } catch (error) {
      setLoading(false);
      setError('Login failed. Please check your username and password.');
    }
  };

  return (
    <div
      className="container-fluid p-0"
      style={{
        backgroundImage: `url(${backgroundImage})`,
        overflow:'hidden',
        }}
    >
      <img
        className="m-4 position-absolute top-0 start-0"
        src={drllogo}
        height="40"
        alt="drl-logo"
      />
      <div
        className="row"
        style={{
          background: 'linear-gradient(180deg, #000000 5%, rgba(0, 0, 0, 0) 95.42%)',
        }}
      >
        <div className="col-lg-6"></div>
        <div className="col-lg-6 vh-100">
          <div className="row vh-100 align-items-center justify-content-center">
            <div className="col-lg-7 mx-auto">
              <div
                className="card px-5 py-2 border-0"
                style={{
                  background:
                    'linear-gradient(180deg, #FFFFFF -15.88%, rgba(255, 255, 255, 0.1) 114.25%)',
                }}
              >
                <div className="my-3">
                  <div className="fs-14 my-2 open-sans open-sans-600">Welcome to</div>
                  <img className="w-100" src={appLogo} alt="smart-formulation-logo" />
                </div>

                <div className="my-4">
                  {loading && <div className={logincss.loadingScreen}>Loading...</div>}
                  <form onSubmit={handleSubmit}>
                    <div>
                      <label
                        className="mb-2 fs-13 open-sans open-sans-500"
                        htmlFor="username"
                      >
                        Employee ID <span>(P000xxxxx)</span>:
                      </label>
                      <input
                        type="text"
                        name="username"
                        id="username"
                        value={username}
                        onChange={handleUsernameChange}
                        className="form-control fs-12 open-sans open-sans-500"
                        placeholder="Enter Username"
                        required
                      />
                    </div>
                    <div className="mt-3">
                      <label
                        className="mb-2 fs-13 open-sans open-sans-500"
                        htmlFor="password"
                      >
                        Password <span>(System Password)</span>:
                      </label>
                      <div style={{ position: 'relative' }}>
                        <input
                          type={showPassword ? 'text' : 'password'}
                          name="password"
                          id="password"
                          value={password}
                          onChange={handlePasswordChange}
                          className="form-control fs-12 open-sans open-sans-500"
                          placeholder="Enter Password"
                          required
                        />
                        <span
                          onClick={toggleShowPassword}
                          style={{
                            position: 'absolute',
                            top: '5px',
                            right: '8px',
                            cursor: 'pointer',
                          }}
                        >
                          <i className={`fa ${showPassword ? 'fa-eye' : 'fa-eye-slash'}`}></i>
                        </span>
                      </div>
                    </div>
                    {error && <div style={{ color: 'red' }}>{error}</div>}
                    <div className="my-4">
                      <button
                        type="submit"
                        className="btn btn-outline-light rounded-pill border-2 w-100 open-sans open-sans-500 fs-13"
                      >
                        Login
                      </button>
                    </div>
                  </form>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Login;
###########################
Loginmodule.css 
.loadingScreen {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    color: white;
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 24px;
    z-index: 1000;
  }
##############################
Navbar.css
.profile-icon-1, .profile-icon-2, .profile-icon-3, .profile-icon-4 {
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 15px;
    font-weight: bold;
    text-align: center;
    border-radius: 50%;
    font-family: var(--open-sans);
    font-optical-sizing: auto;
    font-style: normal;
    font-variation-settings: "wdth" 100;
  }
  
  .profile-icon-1 {
    width: 35px;
    height: 35px;
    background-color: white;
    color: #6900EF;
    padding-top: 2px;
  }
  
  .custom-btn-white {
      color: #6900EF;
      padding: 5px 15px;
      background-color: white;
      text-decoration: none;
    }
##########################
Navbar.jsx
import React from 'react';
import { useAuth } from '../../AuthContext';
import { FaSignOutAlt } from 'react-icons/fa';
import { useNavigate, Link, useLocation } from 'react-router-dom';
import drllogo from '../../assets/drllogo.svg';
import smartFormulationLogo from '../../assets/ChemIntel_Logo_Colored.png';
import infoIcon from '../../assets/help-circle.png'; // SVG as image
import './Navbar.css';

function Navbar() {
  const { user, logout } = useAuth();
  const navigate = useNavigate();
  const location = useLocation();

  const handleLogout = async () => {
    try {
      await logout();
      navigate('/');
    } catch (error) {
      console.error('Failed to logout', error);
    }
  };

  const getInitials = () => {
    if (!user) return '';
    const first = user.firstname?.charAt(0) || '';
    const last = user.lastname?.charAt(0) || '';
    return `${first}${last}`;
  };

  const isActive = (path) => location.pathname === path ? 'bold-underline' : '';

  // Dummy team data (replace with actual data or props)
  const teamMembers = [
    { username: 'Alice Johnson', designation: 'Lead Chemist', thumbnail: '' },
    { username: 'Bob Smith', designation: 'Formulation Expert', thumbnail: '' },
    { username: 'Charlie Lee', designation: 'Research Analyst', thumbnail: '' },
    // Add more team members as needed
  ];

  return (
    <>
      <div className="container-fluid bg-header header-fixed">
        <div className="d-flex">
          <div className="w-50 v-align m-1 d-flex align-items-center">
            <Link to="/home">
              <img src={drllogo} height={50} alt="dr_reddys_logo" className="d-inline py-2" />
            </Link>
            <div className="d-inline px-3 text-lt-p1">
              <span className="vl-40"></span>
            </div>
            <img src={smartFormulationLogo} alt="smart_formulation_logo" width={100} height={20} />
          </div>

          <div className="w-50 d-flex justify-content-end v-align w-100 align-items-center">
            {/* Info Icon Button to trigger modal */}
            <button
              className="text-white rounded-md px-3 flex items-center justify-center"
              data-bs-toggle="modal"
              data-bs-target="#information"
              title="information"
            >
              <img src={infoIcon} alt="Info" />
            </button>

            {/* User Initials */}
            <div className="profile-icon-1">{getInitials()}</div>
            <div className="d-inline px-3 text-lt-p1">
              <span className="vl-40"></span>
            </div>

            {/* Logout Button */}
            <span
              className="custom-btn-white open-sans rounded-pill fs-13 my-auto cursor-pointer flex items-center gap-1"
              onClick={handleLogout}
              title="Logout"
            >
              <FaSignOutAlt />
              <span>Logout</span>
            </span>
          </div>
        </div>
      </div>

      {/* Bootstrap Modal */}
      <div
        className="modal fade mt-5"
        id="information"
        tabIndex="-1"
        aria-labelledby="informationLabel"
        aria-hidden="true"
      >
        <div className="modal-dialog modal-xl">
          <div className="modal-content">
            <div className="modal-header bg-drl-color-0 border-dark">
              <div className="fw-semibold modal-title fs-20">Information</div>
              <button
                type="button"
                className="btn-close"
                data-bs-dismiss="modal"
                aria-label="Close"
              ></button>
            </div>
            <div className="modal-body">
              <div className="container-fluid">
                <div className="row" id="meet-team-container">
                  <div className="row">
                      <p>sdsdfds</p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </>
  );
}

export default Navbar;
####################
App.css


.logo {
    height: 6em;
    will-change: filter;
    transition: filter 300ms;
  }
  .logo:hover {
    filter: drop-shadow(0 0 2em #646cffaa);
  }
  .logo.react:hover {
    filter: drop-shadow(0 0 2em #61dafbaa);
  }
  
  @keyframes logo-spin {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }
  
  @media (prefers-reduced-motion: no-preference) {
    a:nth-of-type(2) .logo {
      animation: logo-spin infinite 20s linear;
    }
  }
  
  .card {
    padding: 2em;
  }
  
  .read-the-docs {
    color: #888;
  }
  
  .link{
    text-decoration: none;
    font-family: Open Sans;
    font-weight: 400;
    font-size: 14px;
    line-height: 100%;
    letter-spacing: 4%;
  }
  
  .cursor-pointer{
    cursor :pointer;
  }
  
  /* Add at end of src/styles.css */
  .truncate-ellipsis {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    display: block;
  }
  
  .no-scrollbar::-webkit-scrollbar { display: none; }
  .no-scrollbar { -ms-overflow-style: none; scrollbar-width: none; }
  
  .scrollbar-hide::-webkit-scrollbar { display: none; }
  .scrollbar-hide { -ms-overflow-style: none; scrollbar-width: none; }
  
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;  
    overflow: hidden;
  }
#############################
App.jsx
import React from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from "react-router-dom";
import { AuthProvider, useAuth } from "./AuthContext";
import { ThemeProvider } from './ThemeContext';
import "./App.css";

import Login from "./components/Login/Login";
import Home from "./components/Home/Home";


function App() {
  return (
     <ThemeProvider>
    <AuthProvider>
      <Router >
        <Routes>
          {/* Public Route */}
          <Route path="/" element={<Login />} />
          <Route path="/home" element={<Home />} />

        </Routes>
      </Router>
    </AuthProvider>
    </ThemeProvider>
  );
}

export default App;
##########################
Authcontext.jsx
import { createContext, useState, useEffect, useContext } from "react";
import React from 'react';
const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true); // to handle initial loading state

  useEffect(() => {
    try {
      const token = localStorage.getItem("token");
      const userInfo = localStorage.getItem("user");

      if (token && userInfo) {
        const parsedUser = JSON.parse(userInfo);
        setIsAuthenticated(true);
        setUser(parsedUser);
      } else {
        setIsAuthenticated(false);
        setUser(null);
      }
    } catch (error) {
      console.error("Failed to parse user info from localStorage", error);
      setIsAuthenticated(false);
      setUser(null);
    } finally {
      setLoading(false);
    }
  }, []);

  const login = (token, userInfo) => {
    if (!token || !userInfo) return; // Prevent setting empty values
    setIsAuthenticated(true);
    setUser(userInfo);
    localStorage.setItem("token", token);
    localStorage.setItem("user", JSON.stringify(userInfo));
  };

  const logout = () => {
    setIsAuthenticated(false);
    setUser(null);
    localStorage.removeItem("token");
    localStorage.removeItem("user");
  };

  // While loading, you can return null or a loading spinner
  if (loading) {
    return null; // or a loading component
  }

  return (
    <AuthContext.Provider value={{ isAuthenticated, user, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) throw new Error("useAuth must be used within an AuthProvider");
  return context;
};
#############################
index.css
:root {
    font-family: system-ui, Avenir, Helvetica, Arial, sans-serif;
    line-height: 1.5;
    font-weight: 400;
  
    color-scheme: light dark;
    
  
    font-synthesis: none;
    text-rendering: optimizeLegibility;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  
    --open-sans: "Open Sans", sans-serif;
    --color-1: rgba(45, 45, 45, 0.99);
    --color-2: #6900EF;
    --color-3: #3A0085;
    --color-4: rgba(224, 249, 226, 0.5);
    --color-5: rgba(48, 171, 48, 1);
    --color-6: rgba(249, 224, 224, 0.5);
    --color-7: rgba(235, 71, 71, 1);
    --color-8: #FFB800;
    --gradient-1: linear-gradient(109.6deg, #4C48F7 0%, #9965E2 100.84%);
  }
  
  @tailwind base;
  @tailwind components;
  @tailwind utilities;
  
  body {
      padding: 0 !important;
    margin: 0 !important;
    font-family: "Open Sans", sans-serif;
    background: linear-gradient(180deg, #fbfbff 0%, #f6f4fb 100%);
    font-family: Inter, ui-sans-serif, system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial;
  }
  
  /* chat scroll bar */
  .chat-scroll::-webkit-scrollbar { width: 10px }
  .chat-scroll::-webkit-scrollbar-thumb { background: linear-gradient(180deg, rgba(139,62,240,0.18), rgba(139,62,240,0.28)); border-radius: 10px; }
  
  
  .ba-2x {
    font-size: 2em !important;
  }
  
  .w-3 {
    width: 3% !important;
  }
  
  .w-4 {
    width: 4% !important;
  }
  
  .w-5 {
    width: 5% !important;
  }
  
  .w-6 {
    width: 6% !important;
  }
  
  .w-7 {
    width: 7% !important;
  }
  
  .w-8 {
    width: 8% !important;
  }
  
  .w-9 {
    width: 9% !important;
  }
  
  .w-10 {
    width: 10% !important;
  }
  
  .w-12 {
    width: 12% !important;
  }
  
  .w-14 {
    width: 14% !important;
  }
  
  .w-15 {
    width: 15% !important;
  }
  
  .w-16 {
    width: 16% !important;
  }
  
  .w-20 {
    width: 20% !important;
  }
  
  .w-25 {
    width: 25% !important;
  }
  
  .w-30 {
    width: 30% !important;
  }
  
  .w-33 {
    width: 33% !important;
  }
  
  .w-35 {
    width: 35% !important;
  }
  
  .w-40 {
    width: 40% !important;
  }
  
  .w-45 {
    width: 45% !important;
  }
  
  .w-46 {
    width: 46% !important;
  }
  
  .w-50 {
    width: 50% !important;
  }
  
  .w-60 {
    width: 60% !important;
  }
  
  .w-70 {
    width: 70% !important;
  }
  
  .w-80 {
    width: 80% !important;
  }
  
  .w-90 {
    width: 90% !important;
  }
  
  .w-95 {
    width: 95% !important;
  }
  
  .w-96 {
    width: 96% !important;
  }
  
  .w-97 {
    width: 97% !important;
  }
  
  .w-98 {
    width: 98% !important;
  }
  
  .w-99 {
    width: 99% !important;
  }
  
  /* custom font styles */
  .f-notoSans-light {
    font-family: 'Noto Sans', sans-serif;
    font-weight: 300;
  }
  
  .f-notoSans-regular {
    font-family: 'Noto Sans', sans-serif;
    font-weight: 400;
  }
  
  .f-notoSans-medium {
    font-family: 'Noto Sans', sans-serif;
    font-weight: 500;
  }
  
  .f-notoSans-semiBold {
    font-family: 'Noto Sans', sans-serif;
    font-weight: 600;
  }
  
  .f-notoSans-bold {
    font-family: 'Noto Sans', sans-serif;
    font-weight: 700;
  }
  
  .f-notoSans-extraBold {
    font-family: 'Noto Sans', sans-serif;
    font-weight: 800;
  }
  
  .f-notoSans-black {
    font-family: 'Noto Sans', sans-serif;
    font-weight: 900;
  }
  
  .f-ubuntu-regular {
    font-family: 'Ubuntu', sans-serif;
    font-weight: 400;
  }
  
  .f-ubuntu-medium {
    font-family: 'Ubuntu', sans-serif;
    font-weight: 500;
  }
  
  .f-ubuntu-bold {
    font-family: 'Ubuntu', sans-serif;
    font-weight: 700;
  }
  
  .f-ptSans-regular {
    font-family: 'PT Sans', sans-serif;
    font-weight: 400;
  }
  
  .f-ptSans-bold {
    font-family: 'PT Sans', sans-serif;
    font-weight: 700;
  }
  
  /* button styles */
  .btn-base {
    border-width: 1px !important;
    border-radius: 5rem !important;
    padding-right: 1.5rem !important;
    padding-left: 1.5rem !important;
    margin-right: 0.25rem !important;
    margin-left: 0.25rem !important;
    font-size: 12px !important;
  }
  
  .btn-custom-1 {
    background-color: #6900EF !important;
    color: #FFF !important;
    border-color: #6900EF !important;
  }
  
  .btn-custom-1:hover {
    background-color: #3A0085 !important;
    color: #FFF !important;
    border-color: #3A0085 !important;
  }
  
  .btn-custom-5 {
    background-color: #EBE0F9 !important;
    color: #6900EF !important;
    border-width: 1px !important;
    font-size: 13px !important;
    font-family: 'PT Sans', sans-serif;
    font-weight: 700;
  }
  
  .btn-custom-5:hover {
    background-color: #6900EF !important;
    color: #FFF !important;
  }
  
  .custom {
    font-size: 20px;
    text-align: center;
    align-items: center;
    justify-content: center;
    background: none !important;
    border-color: transparent !important;
  }
  
  .dropdown-item:focus,
  .dropdown-item:hover {
    background-color: #9965E2 !important;
    color: white !important;
  }
  
  .btn-outline-purple {
    color: #6900EF !important;
    background-color: none;
    border-color: #6900EF !important;
  }
  
  .btn-outline-purple:active {
    color: #fff !important;
    background-color: #6900EF !important;
    border-color: #6900EF !important;
  }
  
  .btn-outline-purple:hover {
    color: #fff !important;
    background: linear-gradient(109.6deg, #4C48F7 0%, #9965E2 100.84%) !important;
    border-color: #6900EF !important;
  }
  
  /* text truncation */
  .text-truncate {
    overflow: hidden;
    text-overflow: ellipsis;
    display: -webkit-box;
    -webkit-box-orient: vertical;
  }
  
  .text-truncate-2lines {
    -webkit-line-clamp: 2;
    height: 40px;
    line-height: 20px;
  }
  
  .text-truncate-3lines {
    -webkit-line-clamp: 3;
    height: 60px;
    line-height: 20px;
  }
  
  
  .card-box {
    box-shadow: 3px 3px 3px 0 rgba(192, 171, 221, 0.3) !important;
  }
  
  .slick-track {
    margin-left: 0 !important;
  }
  
  .open-sans {
    font-family: var(--open-sans);
    font-optical-sizing: auto;
    font-style: normal;
    font-variation-settings: "wdth" 100;
  }
  
  .open-sans-300 {
    font-weight: 300 !important;
  }
  
  .open-sans-400 {
    font-weight: 400 !important;
  }
  
  .open-sans-500 {
    font-weight: 500 !important;
  }
  
  .open-sans-600 {
    font-weight: 600 !important;
  }
  
  .open-sans-700 {
    font-weight: 700 !important;
  }
  
  .open-sans-800 {
    font-weight: 800 !important;
  }
  
  .fs-8 { font-size: 8px!important; }
  .fs-10 { font-size: 10px !important; }
  .fs-12 { font-size: 12px !important; }
  .fs-14 { font-size: 14px !important; }
  .fs-16 { font-size: 16px !important; }
  .fs-18 { font-size: 18px !important; }
  .fs-20 { font-size: 20px !important; }
  .fs-22 { font-size: 22px !important; }
  .fs-24 { font-size: 24px !important; }
  .fs-26 { font-size: 26px !important; }
  .fs-28 { font-size: 28px !important; }
  .fs-30 { font-size: 30px !important; }
  
  
  /* custom text colors */
  .text-bg-d1 {
    color: var(--color-1) !important;
  }
  
  .text-lt-p1 {
    color: var(--color-2) !important;
  }
  
  .text-dk-p2 {
    color: var(--color-2) !important;
  }
  
  .text-muted {
    color: gray !important;
  }
  
  .text-pp-g1 {
    background-image: var(--gradient-1);
    -webkit-background-clip: text;
    background-clip: text;
    color: transparent;
  }
  
  /* custom background colors */
  .bg-drl-color-0 {
    background: linear-gradient(109.6deg, #3A0085 0%, #4C48F7 100.84%) !important;
    color: #fff !important;
  }
  
  .bg-drl-color-1 {
    background-color: #F7F3FF !important;
    color: #000 !important;
  }
  
  .bg-header {
  background: linear-gradient(109.6deg, #3A0085 0%, #4C48F7 100.84%) !important;
  }
  
  .bg-drl-color-2 {
    background-color: #EBE0F9 !important;
    color: #000 !important;
  }
  
  .bg-drl-color-3 {
    background-color: #3A0085 !important;
    color: #fff !important;
  }
  
  .bg-drl-color-4 {
    background-color: #9965E2 !important;
    color: #fff !important;
  }
  
  .bg-drl-color-5 {
    background-color: #6900EF !important;
    color: #fff !important;
  }
  
  .bg-drl-color-6{
    background-color:  #2D2A91 !important;
    color: #fff;
  }
  
  /* Miscellaneous Styles */
  .bi-exclamation-circle {
    transform: rotate(180deg);
  }
  
  .badge-1 {
    border: 0.5px solid var(--color-4);
    background: var(--color-4);
    color: var(--color-5);
    border-radius: 5px;
    padding: 2px 4px;
  }
  
  .badge-2 {
    border: 0.5px solid var(--color-6);
    background: var(--color-6);
    color: var(--color-7);
    border-radius: 5px;
    padding: 2px 4px;
  }
  
  .badge-3 {
    border: 1px solid gold;
    background: #FFF2CF;
    border-radius: 3px;
    padding: 2px 4px;
    color: black;
    text-transform: uppercase;
    font-size: 12px;
  }
  
  .badge-4 {
    border: 1px solid #4C48F7 !important;
    border-image-source: linear-gradient(109.6deg, #4C48F7 0%, #9965E2 100.84%);
    background: rgba(153, 101, 226, 0.4);
    padding: 2px 5px;
    color: black;
    text-transform: uppercase;
    border-radius: 3px !important;
  }
  
  /* Miscellaneous */
  .pointer {
    cursor: pointer !important;
  }
  
  .not-allowed {
    cursor: not-allowed !important;
  }
  
  
  
  .bg-app {
    position: relative;
    min-height: 100vh;
    background-color: rgba(255, 255, 255, 0.85); /* Optional white overlay */
    z-index: 1;
  }
  
  .bg-app::before {
    content: '';
    position: absolute;
    top: 0; left: 0; right: 0; bottom: 0;
    background-image: url('../src/assets/images/home_background.jpg'); /* Replace with your image */
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
    opacity: 0.2; /* Control background image visibility */
    z-index: -1;
    overflow-y  : hidden !important;
  
  }
  
  
    .mainsection{
      width:97%;
      height:auto;
      border:1.5px solid #d7d7d7;
      margin : 20px;
      border-radius: 10px;
      background-color: #fff;
    }
  
  .section-header{
      background: #FBF8FF;
    }
  
  .custom-col-2{
      width :5% !important;
    }
    
  .numeric_values{
      margin : 10px;
      padding: 7px 12px;
      border :none;
      border-radius : 25px;
      background-color: #9965E2;
    }
  
    .custom-padding{
      padding:10% 20%;
  }
  
  .custom-card{
      width: 384px;
      height:419px;
      z-index: 9999 !important;
  }
  
  .outer-test-tube{
    display: flex;
    width: 130px;
    height: 135px;
    padding: 24px 40px;
    align-items: center;
    gap: 10px;
    border-radius: 24px;
    background: #F9F3FF;
    margin:25%;
  }
  
  
  .card-text-home{
      display: inline-flex;
      flex-direction: column;
      align-items: center;
      gap: 109px;
      width: 268px;
      color: rgba(45, 45, 45, 0.99);
      text-align: center;
      font-size: 32px;
      font-style: normal;
      font-weight: 600;
      line-height: normal;
      letter-spacing: 0.64px;
      border-radius: 24px;
  } 
  
  .card-hover{
      border-radius: 24px;
  }
  .card-hover:hover{
      border: 2px solid #6900EF;
      box-shadow: 0px 12px 42px -4px rgba(46, 46, 46, 0.2);
  }
  
  
  
  body {
      padding: 0 !important;
      margin: 0 !important;
  }
  
  .ba-2x {font-size: 2em !important;}
  
  
  .fs-5 {font-size: 5px !important;}
  .fs-6 {font-size: 6px !important;}
  .fs-7 {font-size: 7px !important;}
  .fs-8 {font-size: 8px !important;}
  .fs-10 {font-size: 10px !important;}
  .fs-11 {font-size: 11px !important;}
  .fs-12 {font-size: 12px !important;}
  .fs-13 {font-size: 13px !important;}
  .fs-14 {font-size: 14px !important;}
  .fs-15 {font-size: 15px !important;}
  .fs-16 {font-size: 16px !important;}
  .fs-17 {font-size: 17px !important;}
  .fs-18 {font-size: 18px !important;}
  .fs-19 {font-size: 19px !important;}
  .fs-20 {font-size: 20px !important;}
  .fs-21 {font-size: 21px !important;}
  .fs-22 {font-size: 22px !important;}
  .fs-24 {font-size: 24px !important;}
  .fs-26 {font-size: 26px !important;}
  .fs-28 {font-size: 28px !important;}
  .fs-30 {font-size: 30px !important;}
  .fs-32 {font-size: 32px !important;}
  .fs-34 {font-size: 34px !important;}
  .fs-36 {font-size: 36px !important;}
  .fs-38 {font-size: 38px !important;}
  .fs-40 {font-size: 40px !important;}
  .fs-50 {font-size: 50px !important;}
  .fs-60 {font-size: 60px !important;}
  .fs-70 {font-size: 70px !important;}
  .fs-80 {font-size: 80px !important;}
  .fs-90 {font-size: 90px !important;}
  .fs-100 {font-size: 100px !important;}
  .fs-125 {font-size: 125px !important;}
  .fs-150 {font-size: 150px !important;}
  .fs-175 {font-size: 175px !important;}
  .fs-200 {font-size: 200px !important;}
  .fs-300 {font-size: 300px !important;}
  
  .w-3 {width:3% !important;}
  .w-4 {width:4% !important;}
  .w-5 {width:5% !important;}
  .w-6 {width:6% !important;}
  .w-7 {width:7% !important;}
  .w-8 {width:8% !important;}
  .w-9 {width:9% !important;}
  .w-10 {width:10% !important;}
  .w-12 {width:12% !important;}
  .w-14 {width:14% !important;}
  .w-15 {width:15% !important;}
  .w-16 {width:16% !important;}
  .w-20 {width:20% !important;}
  .w-25 {width:25% !important;}
  .w-30 {width:30% !important;}
  .w-33 {width:33% !important;}
  .w-35 {width:35% !important;}
  .w-40 {width:40% !important;}
  .w-45 {width:45% !important;}
  .w-46 {width:46% !important;}
  .w-50 {width:50% !important;}
  .w-60 {width:60% !important;}
  .w-70 {width:70% !important;}
  .w-80 {width:80% !important;}
  .w-90 {width:90% !important;}
  .w-95 {width:95% !important;}
  .w-96 {width:96% !important;}
  .w-97 {width:97% !important;}
  .w-98 {width:98% !important;}
  .w-99 {width:99% !important;}
  
  
  /* custom font styles */
  .f-notoSans-light {font-family: 'Noto Sans',sans-serif; font-weight: 300;}
  .f-notoSans-regular {font-family: 'Noto Sans',sans-serif; font-weight: 400;}
  .f-notoSans-medium {font-family: 'Noto Sans',sans-serif; font-weight: 500;}
  .f-notoSans-semiBold {font-family: 'Noto Sans',sans-serif; font-weight: 600;}
  .f-notoSans-bold {font-family: 'Noto Sans',sans-serif; font-weight: 700;}
  .f-notoSans-extraBold {font-family: 'Noto Sans',sans-serif; font-weight: 800;}
  .f-notoSans-black {font-family: 'Noto Sans',sans-serif; font-weight: 900;}
  
  .f-ubuntu-regular {font-family: 'Ubuntu',sans-serif; font-weight: 400;}
  .f-ubuntu-medium {font-family: 'Ubuntu',sans-serif; font-weight: 500;}
  .f-ubuntu-bold {font-family: 'Ubuntu',sans-serif; font-weight: 700;}
  
  .f-ptSans-regular {font-family: 'PT Sans', sans-serif; font-weight: 400;}
  .f-ptSans-bold {font-family: 'PT Sans', sans-serif; font-weight: 700;}
  
  
  
  
  
  
  /* Miscellaneous */
  .pointer {cursor: pointer !important;}
  .not-allowed {cursor: not-allowed !important;}
  
  
  /* button styles */
  
  .btn-custom-disabled {
      background-color: lightgray !important;
      border-width: 1px !important;
      border-radius: 5rem !important;
      padding-right: 1.5rem !important;
      padding-left: 1.5rem !important;
      margin-right: 0.25rem !important;
      margin-left: 0.25rem !important;
      font-size: 12px !important;
      color: gray !important;
      pointer-events: none;
  }
  
  .btn-custom-0 {
      color: #6900EF !important;
      border-color: #6900EF !important;
      border-width: 1px !important;
      border-radius: 0.5rem !important;
      font-size: 13px !important;
      font-family: 'PT Sans', sans-serif;
      font-weight: 700;
  }
  
  .btn-custom-0:hover {
      background-color: #6900EF !important;
      color: #FFF !important;
      border-color: #6900EF !important;
      border-width: 1px;
  }
  
  .btn-custom-1 {
      background-color: #6900EF !important;
      color: #FFF !important;
      border-color: #6900EF !important;
      border-width: 1px !important;
      border-radius: 5rem !important;
      padding-right: 1.5rem !important;
      padding-left: 1.5rem !important;
      margin-right: 0.25rem !important;
      margin-left: 0.25rem !important;
      font-size: 12px !important;
  }
  
  .btn-custom-1:hover {
      background-color: #3A0085 !important;
      color: #FFF !important;
      border-color: #3A0085 !important;
      border-width: 1px;
  }
  
  .btn-custom-2 {
      background-color: #6900EF !important;
      color: #FFF !important;
      border-color: #6900EF !important;
  }
  
  
  
  .btn-custom-5 {
      background-color: #EBE0F9 !important;
      color: #6900EF !important;
      border-width: 1px !important;
      font-size: 13px !important;
      font-family: 'PT Sans', sans-serif;
      font-weight: 700;
  }
  
  .btn-custom-5:hover {
      background-color: #6900EF !important;
      color: #FFF !important;
  }
  
  .custom {
      font-size: 20px;
      text-align: center;
      align-items: center;
      justify-content: center;
      background: none !important;
      border-color: transparent !important;
  }
  
  .dropdown-item:focus,
  .dropdown-item:hover {
      background-color: #9965E2 !important;
      color: white !important;
  }
  
  .btn-outline-purple {
      color: #6900EF !important;
      background-color: none;
      border-color: #6900EF !important;
  }
  .btn-outline-purple:active {
      color: #fff !important;
      background-color: #6900EF !important;
      border-color: #6900EF !important;
  }
  .btn-outline-purple:hover {
      color: #fff !important;
      background: linear-gradient(109.6deg, #4C48F7 0%, #9965E2 100.84%) !important;
      border-color: #6900EF !important;
  }
  
  
  .text-truncate-2lines {
      overflow: hidden;
      text-overflow: ellipsis;
      display: -webkit-box;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
      height: 40px;
      line-height: 20px;
  }
  
  .text-truncate-3lines {
      overflow: hidden;
      text-overflow: ellipsis;
      display: -webkit-box;
      -webkit-line-clamp: 3;
      -webkit-box-orient: vertical;
      height: 60px;
      line-height: 20px;
  }
  
  .border-purple { border-color: #6900EF !important;}
  .card-box { box-shadow: 3px 3px 3px 0 rgba(192, 171, 221, 0.3) !important; }
  .slick-track {margin-left: 0 !important;}
#######################################
#main.jsx

import React from 'react'
import { createRoot } from 'react-dom/client'
import App from './App'
import './index.css'
import 'bootstrap/dist/css/bootstrap.min.css';
import 'bootstrap/dist/js/bootstrap.bundle.min';
import 'bootstrap-icons/font/bootstrap-icons.css';

createRoot(document.getElementById('root')).render(<App />)
######################################
Protectedroute.jsx
import { Navigate } from "react-router-dom";
import { useAuth } from "./AuthContext";

const ProtectedRoute = ({ children }) => {
  const { isAuthenticated, loading } = useAuth();

  if (loading) {
    return null; // or a loading spinner
  }

  if (!isAuthenticated) {
    return <Navigate to="/login" replace />;
  }

  return children;
};

export default ProtectedRoute;
###################################
Themecontext.jsx
import React, { createContext, useContext, useState, useEffect } from 'react';

const ThemeContext = createContext();

export const ThemeProvider = ({ children }) => {
  const [theme, setTheme] = useState("light");

  useEffect(() => {
    document.documentElement.setAttribute("data-theme", theme);
  }, [theme]);

  const toggleTheme = () => {
    setTheme((prev) => (prev === "light" ? "dark" : "light"));
  };

  return (
    <ThemeContext.Provider value={{ theme, toggleTheme }}>
      {children}
    </ThemeContext.Provider>
  );
};

export const useTheme = () => useContext(ThemeContext);
##############################
index.html
<!doctype html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <meta name="description" content="ChemIntel" />
  <link rel="icon" href="/vite.ico" />
  <title>ChemIntel</title>
  <!-- Google Font: Poppins -->
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;700&display=swap" rel="stylesheet">
</head>
<body>
  <div id="root"></div>
  <!-- React Application -->
  <script type="module" src="/src/main.jsx"></script>
</body>
</html>
#############################3
package.JSON
{
  "name": "reaction-db-frontend",
  "version": "1.0.0",
  "private": true,
  "dependencies": {
    "@headlessui/react": "^2.2.7",
    "@heroicons/react": "^2.2.0",
    "axios": "^1.4.0",
    "bootstrap": "^5.3.7",
    "bootstrap-icons": "^1.13.1",
    "clsx": "^1.2.1",
    "framer-motion": "^10.12.16",
    "marked": "^16.3.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-icons": "^5.5.0",
    "react-router-dom": "^7.8.0"
  },
  "devDependencies": {
    "@eslint/js": "^9.30.1",
    "@types/react": "^19.1.8",
    "@types/react-dom": "^19.1.6",
    "@vitejs/plugin-react": "^4.6.0",
    "autoprefixer": "^10.4.14",
    "eslint": "^9.30.1",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "globals": "^16.3.0",
    "postcss": "^8.4.21",
    "tailwindcss": "^3.4.8",
    "vite": "^5.0.0"
  },
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  }
}
#####################################
postcss.config.cjs

module.exports = {
    plugins: {
      tailwindcss: {},
      autoprefixer: {},
    },
  };
###########################
tailwind.config.js
export default {
  content: ['./index.html', './src/**/*.{js,jsx,ts,tsx}'],
  theme: {
    extend: {
      colors: {
        primary: '#6B21A8', // deep violet
        secondary: '#C084FC', // lighter violet
        accent: '#7C3AED', // purple
        bg: '#FAF8FF',
      },
      fontFamily: {
        poppins: ['Poppins', 'sans-serif'],
        roboto: ['Roboto', 'sans-serif'],
        montserrat: ['Montserrat', 'sans-serif'],
        inter: ['Inter', 'sans-serif'], // An alternative
      },
    },
  },
  plugins: [],
};
###############################
backend
# main.py
import os
import re
import glob
import base64
import io
import json
import uuid
import mimetypes
import traceback
import threading
from typing import Union, List, Optional, Dict, Any
from datetime import datetime, timedelta
from difflib import SequenceMatcher

import fitz  # PyMuPDF
import pandas as pd
from PIL import Image
from pydantic import BaseModel
from fastapi import FastAPI, HTTPException, UploadFile, File, Form, Depends, Request
from fastapi.responses import JSONResponse, FileResponse, StreamingResponse
from fastapi.middleware.cors import CORSMiddleware

# Langchain / Azure (kept as you asked — do not change unless needed)
from langchain_openai import AzureChatOpenAI
from langchain.embeddings.cache import CacheBackedEmbeddings
from langchain.storage.file_system import LocalFileStore
from langchain_openai import AzureOpenAIEmbeddings
from langchain_community.vectorstores import FAISS
from langchain.docstore.document import Document
from langchain.chains import RetrievalQA, LLMChain
from langchain.prompts import PromptTemplate

# Optional libs for PPTX generation and document parsing
try:
    from pptx import Presentation
    from pptx.util import Inches, Pt
except Exception:
    Presentation = None

try:
    import docx  # python-docx
except Exception:
    docx = None

try:
    import openpyxl
except Exception:
    openpyxl = None

# ---------------------------
# Configuration - Please populate secrets / endpoints
# ---------------------------
os.environ["KMP_DUPLICATE_LIB_OK"] = "TRUE"

# Azure Configuration (kept exactly as requested)
base_url=""
api_version="2025-01-01-preview"

api_key=""
deployment_name="api-ai4o"
model_name="gpt-4o"

# Initialize Azure services
file_store = LocalFileStore('langchain-embeddings')
base = AzureOpenAIEmbeddings(
    model="text-embedding-3-large",
    api_version="2025-01-01-preview",
    azure_endpoint="",
    api_key="",
    azure_deployment="api-ai-3l"
)
chat_model = AzureChatOpenAI(
    azure_deployment=deployment_name,
    model=model_name,
    api_version=api_version,
    api_key=api_key,
    azure_endpoint=base_url
)
cached_embeddings = CacheBackedEmbeddings.from_bytes_store(base, file_store, namespace=base.model)

AZ_BING_ENDPOINT = "https://api.bing.microsoft.com/"
AZ_BING_KEY = ""
USE_BING_DEFAULT = True

SECRET_KEY = os.environ.get("RDB_SECRET_KEY", "myFAVsecretKEY")
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 60

BASE_DIR = os.environ.get("RDB_BASE_DIR", r"C:\Users\Desktop\WORK\API\Chemhub+\Backend\Reaction_Database")
PRODUCTS_DIR = os.path.join(BASE_DIR, "Products")
SCHEMES_DIR = os.path.join(BASE_DIR, "Synthetic_Schemes")
UPLOADS_DIR = os.path.join(BASE_DIR, "User_Uploads")

os.makedirs(PRODUCTS_DIR, exist_ok=True)
os.makedirs(SCHEMES_DIR, exist_ok=True)
os.makedirs(UPLOADS_DIR, exist_ok=True)

REACTION_TYPES = ["C-C_Bond_Formation", "C-N_Bond_Formation", "Salt_Formation", "Hydrolysis", "Esterification", "Amidation", "Reduction", "Oxidation", "Cyclization", "Purification", "Miscellaneous" , "Metal mediated catalyzed", "Gate Clearance Reports", "User_Uploads"]

# ---------------------------
# Prompts (kept/back-ported from your working original)
# ---------------------------
EXTRACTION_PROMPT_TEMPLATE = """
You are a pharmaceutical chemistry expert specializing in reaction chemistry. Extract the following information from the document in a structured format Mandatorily:
1. **API Name**: The active pharmaceutical ingredient
2. **Reaction Chemistry**: Type and description
3. **Yield**: Exact yield percentages or values mentioned in the source
4. **Procedure**: Summarize the complete procedure into clear, concise numbered bullet points, preserving the key steps and important details. Do NOT omit any steps or essential content.
5. **Tabular Data**: Provide COMPLETE tabular data in markdown table format. Do NOT omit, summarize, or transform any content.

Structure your response as follows (literal headers must appear exactly like below):

### API Name
[API name here]
### Reaction Chemistry
[Reaction chemistry description here]
### Yield
[Yield value here]
### Procedure
[Complete procedure here]
### Tabular Data
[Markdown table here]

Document Content:
{context}
Question: {question}
Answer:
"""
EXTRACTION_PROMPT = PromptTemplate(template=EXTRACTION_PROMPT_TEMPLATE, input_variables=["context", "question"])

QA_PROMPT_TEMPLATE = """
You are a concise pharmaceutical chemistry expert. Use the provided document context to answer the user's question directly and concisely.

Rules (follow exactly):
- Use only the information present in the context. Do NOT hallucinate.
- Answer in one short paragraph (2-6 sentences) unless the user explicitly asks for step-by-step procedure.
- Do NOT reproduce the full document content. Do NOT provide unrequested long verbatim passages.
- If multiple documents were used, identify only those documents that were actually the sources of the answer.
- If the answer is not present in the context, say "I could not find an answer in the provided documents." (do not guess).

Context:
{context}

Question: {question}

Answer:
"""
QA_PROMPT = PromptTemplate(template=QA_PROMPT_TEMPLATE, input_variables=["context", "question"])

GENERATIVE_PROMPT_TEMPLATE = """
You are a helpful and concise pharmaceutical chemistry expert with general knowledge.
Answer the user's question directly and helpfully. If the question is a greeting or short chit-chat, reply naturally.
If you don't know the answer, say "I don't know" or "I couldn't find reliable information" (do NOT say you couldn't find it in provided documents).
Give a detailed and elaborated response.
Question: {question}
"""
GENERATIVE_PROMPT = PromptTemplate(template=GENERATIVE_PROMPT_TEMPLATE, input_variables=["question"])

# ------------------------------
# Internal caches & memory
# ------------------------------
_vectorstore_cache: Dict[str, FAISS] = {}
_product_details_cache: Dict[str, Dict[str, Any]] = {}
_vectorstore_lock = threading.Lock()

# Chat memory store (simple in-memory; replace with DB in prod)
_chat_memory: Dict[str, List[Dict[str, str]]] = {}

# ------------------------------
# Helper utilities
# ------------------------------
def find_scheme_image(reaction_type: str, product_name: str) -> Optional[str]:
    for ext in ['.jpeg', '.jpg', '.png', '.gif']:
        scheme_path = os.path.join(SCHEMES_DIR, reaction_type, f"{product_name}{ext}")
        if os.path.exists(scheme_path):
            return scheme_path
    return None

def list_products() -> List[Dict[str, Any]]:
    products = []
    for reaction_type in REACTION_TYPES:
        reaction_dir = os.path.join(PRODUCTS_DIR, reaction_type)
        if not os.path.exists(reaction_dir):
            continue
        pdf_files = glob.glob(os.path.join(reaction_dir, "*.pdf"))
        for pdf_path in pdf_files:
            filename = os.path.basename(pdf_path)
            product_name = os.path.splitext(filename)[0]
            scheme_image = find_scheme_image(reaction_type, product_name)
            scheme_cdx = os.path.join(SCHEMES_DIR, reaction_type, f"{product_name}.cdx")
            product_id = f"{reaction_type}_{product_name}"
            products.append({
                "id": product_id,
                "name": product_name,
                "reaction_type": reaction_type,
                "pdf_path": pdf_path,
                "scheme_image": scheme_image if scheme_image else None,
                "scheme_cdx": scheme_cdx if os.path.exists(scheme_cdx) else None
            })
    return products

def extract_pdf_text(pdf_path: str) -> str:
    try:
        doc = fitz.open(pdf_path)
        text = ""
        for page in doc:
            text += page.get_text() + "\n"
        return text
    except Exception as e:
        raise RuntimeError(f"Error reading PDF {pdf_path}: {e}")

def extract_docx_text(docx_path: str) -> str:
    if not docx:
        return ""
    try:
        d = docx.Document(docx_path)
        return "\n".join([p.text for p in d.paragraphs if p.text])
    except Exception:
        return ""

def extract_pptx_text(pptx_path: str) -> str:
    if not Presentation:
        return ""
    try:
        prs = Presentation(pptx_path)
        texts = []
        for slide in prs.slides:
            for shape in slide.shapes:
                if hasattr(shape, "text"):
                    texts.append(shape.text)
        return "\n".join(texts)
    except Exception:
        return ""

def extract_xlsx_text(xlsx_path: str) -> str:
    try:
        import openpyxl
        wb = openpyxl.load_workbook(xlsx_path, data_only=True)
        texts = []
        for sheet in wb.worksheets:
            for row in sheet.iter_rows(values_only=True):
                texts.append(" | ".join([str(c) if c is not None else "" for c in row]))
        return "\n".join(texts)
    except Exception:
        return ""

def chunk_text(text: str, max_chars: int = 3000) -> List[str]:
    """Simple chunker that splits into paragraphs accumulating until max_chars reached."""
    if not text:
        return []
    paragraphs = [p.strip() for p in re.split(r"\n{1,}", text) if p.strip()]
    chunks = []
    current = ""
    for p in paragraphs:
        if len(current) + len(p) + 1 > max_chars:
            if current:
                chunks.append(current.strip())
            current = p
        else:
            current = (current + "\n\n" + p).strip()
    if current:
        chunks.append(current.strip())
    return chunks

def build_product_vector_store(product: Dict[str, Any]) -> Optional[FAISS]:
    pid = product["id"]
    with _vectorstore_lock:
        if pid in _vectorstore_cache:
            return _vectorstore_cache[pid]
        # extract text from possible file types
        path = product.get("pdf_path")
        if not path or not os.path.exists(path):
            return None
        text = extract_pdf_text(path)
        if not text or len(text.strip()) < 50:
            return None
        doc = Document(page_content=text, metadata={
            "product_id": pid,
            "product_name": product["name"],
            "reaction_type": product["reaction_type"],
            "source": product["pdf_path"]
        })
        vs = FAISS.from_documents([doc], cached_embeddings)
        _vectorstore_cache[pid] = vs
        return vs

def parse_structured_response(text: str) -> Dict[str, Any]:
    result = {"raw": text, "api_name": None, "reaction_chemistry": None, "yield": None, "procedure": None, "tables": []}
    def grab(section):
        m = re.search(rf"###\s*{re.escape(section)}\s*(.*?)\s*(?=###\s*\w+|\Z)", text, re.DOTALL | re.IGNORECASE)
        return m.group(1).strip() if m else None
    result["api_name"] = grab("API Name")
    result["reaction_chemistry"] = grab("Reaction Chemistry")
    result["yield"] = grab("Yield")
    result["procedure"] = grab("Procedure")
    tab_raw = grab("Tabular Data")
    if tab_raw:
        table_patterns = re.findall(r"(\|[^\n]*\|\s*\n\|[-:\s|]*\|\s*\n(?:\|[^\n]*\|\s*\n?)*)", tab_raw, re.DOTALL)
        if table_patterns:
            for tbl_md in table_patterns:
                lines = [ln.strip().strip("|").strip() for ln in tbl_md.splitlines() if ln.strip()]
                if len(lines) >= 2:
                    header = [h.strip() for h in lines[0].split("|")]
                    rows = []
                    for rowline in lines[2:]:
                        cols = [c.strip() for c in rowline.split("|")]
                        rows.append(cols)
                    result["tables"].append({"headers": header, "rows": rows, "raw_md": tbl_md})
        else:
            result["tables"].append({"headers": [], "rows": [], "raw_md": tab_raw})
    return result

# ------------------------------
# Bing web search helper (Azure Bing)
# ------------------------------
def bing_search_azure(query: str, top: int = 3) -> List[Dict[str, str]]:
    """
    Return list of dicts: {"name":..., "snippet":..., "url":...}
    Requires AZ_BING_ENDPOINT and AZ_BING_KEY to be set.
    """
    if not AZ_BING_ENDPOINT or not AZ_BING_KEY:
        return []
    import requests
    endpoint = AZ_BING_ENDPOINT.rstrip("/") + "/v7.0/search"
    headers = {"Ocp-Apim-Subscription-Key": AZ_BING_KEY}
    params = {"q": query, "count": top}
    try:
        r = requests.get(endpoint, headers=headers, params=params, timeout=15)
        r.raise_for_status()
        j = r.json()
        results = []
        web = j.get("webPages", {}).get("value", [])
        for w in web[:top]:
            results.append({"name": w.get("name", ""), "snippet": w.get("snippet", ""), "url": w.get("url", "")})
        return results
    except Exception as e:
        print("Bing search error:", e)
        return []

# ------------------------------
# FastAPI app
# ------------------------------
app = FastAPI(title="Reaction Database AI (FastAPI)")

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # in prod restrict this
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ------------------------------
# Request models
# ------------------------------
class ProductOut(BaseModel):
    id: str
    name: str
    reaction_type: str
    has_scheme_image: bool
    has_scheme_cdx: bool

class QARequest(BaseModel):
    product_id: Optional[str] = None
    question: str = "Extract API Name, Reaction Chemistry, Yield, Procedure, and Tabular Data"
    session_id: Optional[str] = None

class QueryRequest(BaseModel):
    product_ids: List[str]
    question: str
    session_id: Optional[str] = None

# ------------------------------
# Endpoints
# ------------------------------
@app.get("/reactions", response_model=List[str])
def get_reactions():
    return REACTION_TYPES

@app.get("/products", response_model=List[ProductOut])
def get_products(reaction_type: Optional[str] = None):
    allp = list_products()
    if reaction_type:
        allp = [p for p in allp if p["reaction_type"] == reaction_type]
    out = []
    for p in allp:
        out.append(ProductOut(
            id=p["id"],
            name=p["name"],
            reaction_type=p["reaction_type"],
            has_scheme_image=bool(p["scheme_image"]),
            has_scheme_cdx=bool(p["scheme_cdx"])
        ))
    return out

@app.get("/product/{product_id}/meta")
def product_meta(product_id: str):
    products = list_products()
    for p in products:
        if p["id"] == product_id:
            return {
                "id": p["id"],
                "name": p["name"],
                "reaction_type": p["reaction_type"],
                "pdf_path": p["pdf_path"],
                "scheme_image": p["scheme_image"],
                "scheme_cdx": p["scheme_cdx"]
            }
    raise HTTPException(status_code=404, detail="Product not found")

@app.get("/product/{product_id}/pdf")
def product_pdf(product_id: str):
    meta = product_meta(product_id)
    pdf_path = meta["pdf_path"]
    if os.path.exists(pdf_path):
        return FileResponse(pdf_path, media_type="application/pdf", filename=os.path.basename(pdf_path))
    raise HTTPException(status_code=404, detail="PDF not found")

@app.get("/product/{product_id}/scheme-image")
def product_scheme_image(product_id: str):
    meta = product_meta(product_id)
    path = meta.get("scheme_image")
    if path and os.path.exists(path):
        # serve with the correct mimetype
        mime, _ = mimetypes.guess_type(path)
        return FileResponse(path, media_type=mime or "application/octet-stream", filename=os.path.basename(path))
    raise HTTPException(status_code=404, detail="Scheme image not found")

# ------------------------------
# Main product/details endpoint (merged behavior)
# ------------------------------
@app.post("/product/details")
def product_details(req: QARequest):
    """
    Behavior:
     - If req.product_id provided:
         * if canonical extraction question -> run structured extraction (cached)
         * else -> retrieval QA for that product
     - If no req.product_id:
         * Try to detect product name in question (exact substring / token-overlap / similarity)
         * If detected -> run retrieval for detected product
         * Else -> generative response (LLM) — if Bing is enabled we can optionally ground with web snippets
    """
    try:
        q_text = (req.question or "").strip()
        if not q_text:
            return JSONResponse(status_code=400, content={"error": "question is required"})

        CANONICAL_EXTRACTION = "extract api name, reaction chemistry, yield, procedure, and tabular data"

        def _normalize_alnum(s: str) -> str:
            return re.sub(r"[^a-z0-9]", "", (s or "").lower())

        def _tokens(s: str):
            return [t for t in re.split(r'[^a-z0-9]+', (s or "").lower()) if t]

        def _normalize_simple(s: str) -> str:
            return re.sub(r'[^a-z0-9\s]', ' ', (s or "").lower())

        # quick debug log
        print("=== /product/details called ===")
        print("Question:", q_text)
        print("product_id:", getattr(req, "product_id", None), "session_id:", getattr(req, "session_id", None))

        # detect whether question mentions any reaction keyword
        q_norm_simple = _normalize_simple(q_text)
        contains_reaction_keyword = any(_normalize_simple(rt).strip() in q_norm_simple for rt in REACTION_TYPES)
        print("DEBUG: contains_reaction_keyword=", contains_reaction_keyword)

        # product detection
        def _detect_product_by_name(question: str) -> Optional[Dict[str, Any]]:
            products = list_products()
            if not products:
                return None
            q_norm_alnum = _normalize_alnum(question)
            q_tokens = set(_tokens(question))
            # 1 exact normalized substring match (prefer longer names)
            sorted_products = sorted(products, key=lambda p: len(p["name"] or ""), reverse=True)
            for p in sorted_products:
                nm = _normalize_alnum(p["name"])
                if nm and nm in q_norm_alnum:
                    print(f"DEBUG: Exact normalized substring match -> {p['name']}")
                    return p
            # 2 token overlap
            token_matches = []
            for p in sorted_products:
                pname_tokens = set(_tokens(p["name"]))
                if not pname_tokens: continue
                overlap = pname_tokens.intersection(q_tokens)
                if overlap:
                    token_matches.append((p, len(overlap), len(pname_tokens), overlap))
            if token_matches:
                token_matches.sort(key=lambda x: (-(x[1] / x[2]), -x[1]))
                p_best, match_count, token_count, overlap = token_matches[0]
                ratio = match_count / token_count
                print(f"DEBUG: Token-overlap candidate -> {p_best['name']} ratio={ratio:.2f}")
                if ratio >= 0.5:
                    return p_best
            # 3 similarity fallback
            best = None
            best_ratio = 0.0
            for p in products:
                pname = (p["name"] or "").lower()
                if not pname.strip(): continue
                r1 = SequenceMatcher(None, pname, question.lower()).ratio()
                r2 = SequenceMatcher(None, _normalize_alnum(pname), _normalize_alnum(question)).ratio()
                ratio = (r1 + r2) / 2.0
                if ratio > best_ratio:
                    best_ratio = ratio
                    best = (p, ratio, r1, r2)
            if best and best[1] >= 0.60:
                p_best, ratio, r1, r2 = best
                print(f"DEBUG: Similarity candidate -> {p_best['name']} ratio={ratio:.3f}")
                return p_best
            return None

        def _run_retrieval_for_product(product: Dict[str, Any], question: str, k: int = 3) -> Dict[str, Any]:
            print(f"DEBUG: Running retrieval product {product['id']}")
            pdf_path = product.get("pdf_path")
            if not pdf_path or not os.path.exists(pdf_path):
                raise HTTPException(status_code=404, detail="PDF not found for product")
            # attempt to reuse cached vectorstore
            with _vectorstore_lock:
                vs = _vectorstore_cache.get(product["id"])
            if not vs:
                vs = build_product_vector_store(product)
                if not vs:
                    raise HTTPException(status_code=500, detail="Failed to build vector store for product")
            retriever = vs.as_retriever(search_kwargs={"k": k})
            prompt_to_use = QA_PROMPT
            qa_chain = RetrievalQA.from_chain_type(
                llm=chat_model,
                chain_type="stuff",
                retriever=retriever,
                chain_type_kwargs={"prompt": prompt_to_use},
                return_source_documents=True,
            )
            out = qa_chain({"query": question})
            answer_text = out.get("result") or out.get("output_text") or ""
            source_docs = out.get("source_documents", []) or []
            seen = set()
            sources = []
            for sd in source_docs:
                pid = sd.metadata.get("product_id")
                pname = sd.metadata.get("product_name")
                if pid and pid not in seen:
                    seen.add(pid)
                    sources.append({"product_id": pid, "product_name": pname})
            print(f"DEBUG: Retrieval answer length={len(answer_text)} sources={len(sources)}")
            return {"answer": answer_text, "sources": sources}

        # 1) explicit product path
        if req.product_id:
            products = list_products()
            product = next((p for p in products if p["id"] == req.product_id), None)
            if not product:
                return JSONResponse(status_code=404, content={"error": "Product not found"})
            is_extraction = q_text.strip().lower() == CANONICAL_EXTRACTION
            if not is_extraction:
                return _run_retrieval_for_product(product, q_text, k=3)
            # extraction path
            if req.product_id in _product_details_cache:
                print("DEBUG: returning cached extraction for", req.product_id)
                return _product_details_cache[req.product_id]
            vs = build_product_vector_store(product)
            if not vs:
                return JSONResponse(status_code=500, content={"error": "Failed to build vector store (empty/invalid PDF)"})
            retriever = vs.as_retriever(search_kwargs={"k": 1})
            qa_chain = RetrievalQA.from_chain_type(
                llm=chat_model,
                chain_type="stuff",
                retriever=retriever,
                chain_type_kwargs={"prompt": EXTRACTION_PROMPT},
                return_source_documents=False,
            )
            raw_response = qa_chain.run(q_text)
            parsed = parse_structured_response(raw_response)
            _product_details_cache[req.product_id] = parsed
            return parsed

        # 2) short greeting / generative bypass (unless reaction keyword present)
        tokens = _tokens(q_text)
        if (not contains_reaction_keyword) and (len(q_text) < 4 or (len(tokens) <= 1 and not any(c.isdigit() for c in q_text))):
            # direct generative LLM
            try:
                # optionally include Bing if enabled
                context_snips = ""
                if AZ_BING_ENDPOINT and AZ_BING_KEY:
                    snips = bing_search_azure(q_text, top=3)
                    if snips:
                        context_snips = "\n\nWeb snippets:\n" + "\n".join([f"- {s['name']}: {s['snippet']}" for s in snips])
                prompt_chain = LLMChain(llm=chat_model, prompt=GENERATIVE_PROMPT)
                # If we have context_snips, append to the question
                question_for_llm = q_text + ("\n\n" + context_snips if context_snips else "")
                raw_response = prompt_chain.predict(question=question_for_llm)
                # store to memory if session provided
                if req.session_id:
                    _chat_memory.setdefault(req.session_id, []).append({"role": "assistant", "content": raw_response})
                return {"response": raw_response}
            except Exception as e:
                print("Generative error:", e)
                tb = traceback.format_exc()
                print(tb)
                raise HTTPException(status_code=500, detail=f"Generative model error: {e}")

        # 3) detect product name in free text
        detected = _detect_product_by_name(q_text)
        if detected:
            return _run_retrieval_for_product(detected, q_text, k=3)

        # 4) fallback generative QA (optionally ground via Bing)
        try:
            context_snips = ""
            if AZ_BING_ENDPOINT and AZ_BING_KEY:
                snips = bing_search_azure(q_text, top=3)
                if snips:
                    context_snips = "\n\nWeb snippets:\n" + "\n".join([f"- {s['name']}: {s['snippet']}" for s in snips])
            prompt_chain = LLMChain(llm=chat_model, prompt=GENERATIVE_PROMPT)
            question_for_llm = q_text + ("\n\n" + context_snips if context_snips else "")
            raw_response = prompt_chain.predict(question=question_for_llm)
            if req.session_id:
                _chat_memory.setdefault(req.session_id, []).append({"role": "assistant", "content": raw_response})
            return {"response": raw_response}
        except Exception as e:
            print("Fallback generative error:", e)
            tb = traceback.format_exc()
            print(tb)
            raise HTTPException(status_code=500, detail=f"LLM fallback error: {e}")

    except HTTPException:
        raise
    except Exception as e:
        tb = traceback.format_exc()
        print("=== /product/details ERROR ===")
        print(tb)
        return JSONResponse(status_code=500, content={"error": "internal server error", "detail": str(e), "trace": tb.splitlines()[-20:]})

# ------------------------------
# Query across multiple product documents
# ------------------------------
@app.post("/query")
def query_documents(req: QueryRequest):
    if not req.product_ids:
        raise HTTPException(status_code=400, detail="product_ids must be non-empty")
    if not req.question or not req.question.strip():
        raise HTTPException(status_code=400, detail="question required")
    docs = []
    for pid in req.product_ids:
        try:
            meta = product_meta(pid)
        except HTTPException:
            continue
        pdf_path = meta.get("pdf_path")
        if not pdf_path or not os.path.exists(pdf_path):
            continue
        text = extract_pdf_text(pdf_path)
        if not text or len(text.strip()) < 50:
            continue
        docs.append(Document(page_content=text, metadata={"product_id": pid, "product_name": meta.get("name", ""), "reaction_type": meta.get("reaction_type", "")}))
    if not docs:
        raise HTTPException(status_code=404, detail="No documents available for provided product_ids")
    try:
        vector_store = FAISS.from_documents(docs, cached_embeddings)
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed building vector index: {e}")
    retriever = vector_store.as_retriever(search_kwargs={"k": 3})
    qa_chain = RetrievalQA.from_chain_type(llm=chat_model, chain_type="stuff", retriever=retriever, chain_type_kwargs={"prompt": QA_PROMPT}, return_source_documents=True)
    out = qa_chain({"query": req.question})
    answer_text = out.get("result") or out.get("output_text") or str(out)
    source_docs = out.get("source_documents", [])
    seen = set()
    sources = []
    for sd in source_docs:
        pid = sd.metadata.get("product_id")
        pname = sd.metadata.get("product_name")
        if pid and pid not in seen:
            seen.add(pid)
            sources.append({"product_id": pid, "product_name": pname})
    # store to session memory
    if req.session_id:
        _chat_memory.setdefault(req.session_id, []).append({"role": "assistant", "content": answer_text})
    return {"answer": answer_text, "sources": sources}

# ------------------------------
# Product search (autocomplete)
# ------------------------------
@app.get("/products/search")
def search_products(q: str = "", limit: int = 10):
    if q is None:
        q = ""
    q_norm = re.sub(r'[^a-z0-9]', '', q.lower())
    if q_norm == "":
        prods = list_products()[:limit]
        return [{"id": p["id"], "name": p["name"], "reaction_type": p["reaction_type"]} for p in prods]
    products = list_products()
    prefix_matches = []
    substring_matches = []
    for p in products:
        name_norm = re.sub(r'[^a-z0-9]', '', p["name"].lower())
        if name_norm.startswith(q_norm):
            prefix_matches.append(p)
        elif q_norm in name_norm:
            substring_matches.append(p)
    prefix_matches = sorted(prefix_matches, key=lambda x: -len(x["name"]))
    substring_matches = sorted(substring_matches, key=lambda x: -len(x["name"]))
    combined = (prefix_matches + substring_matches)[:limit]
    return [{"id": p["id"], "name": p["name"], "reaction_type": p["reaction_type"]} for p in combined]

# ------------------------------
# File upload endpoint (documents/images). Saves under Products/<reaction_type>/filename
# Accepts optional reaction_type form value (default: Miscellaneous)
# ------------------------------
@app.post("/upload")
async def upload_file(file: UploadFile = File(...), reaction_type: str = Form("User_Uploads")):
    safe_rt = reaction_type if reaction_type in REACTION_TYPES else "User_Uploads"
    dest_dir = os.path.join(PRODUCTS_DIR, safe_rt)
    os.makedirs(dest_dir, exist_ok=True)
    filename = os.path.basename(file.filename)
    dest_path = os.path.join(dest_dir, filename)
    # save file
    with open(dest_path, "wb") as f:
        f.write(await file.read())
    # attempt to extract text if document-like and build vectorstore
    ext = os.path.splitext(filename)[1].lower()
    text = ""
    try:
        if ext == ".pdf":
            text = extract_pdf_text(dest_path)
        elif ext in (".docx", ".doc") and docx:
            text = extract_docx_text(dest_path)
        elif ext in (".pptx", ".ppt") and Presentation:
            text = extract_pptx_text(dest_path)
        elif ext in (".xlsx", ".xls") and openpyxl:
            text = extract_xlsx_text(dest_path)
        else:
            # images or unknown file types --- store file only
            text = ""
    except Exception as e:
        print("Upload extraction error:", e)
        text = ""
    # If we have text, chunk and create FAISS (single-doc)
    if text and len(text.strip()) > 50:
        pid = f"{safe_rt}_{os.path.splitext(filename)[0]}"
        product_meta = {"id": pid, "name": os.path.splitext(filename)[0], "reaction_type": safe_rt, "pdf_path": dest_path}
        try:
            vs = build_product_vector_store(product_meta)
            # vs created/cached
        except Exception as e:
            print("Error building vectorstore for uploaded file:", e)
    return {"status": "ok", "path": dest_path, "extracted_chars": len(text)}

# ------------------------------
# Prompt gallery endpoint
# ------------------------------
@app.get("/prompt-gallery")
def prompt_gallery():
    samples = [
        {"title": "Extract reaction details", "prompt": "Extract API Name, Reaction Chemistry, Yield, Procedure, and Tabular Data"},
        {"title": "Yield only", "prompt": "What is the yield for <product-name>?"},
        {"title": "Procedure steps", "prompt": "Give the complete procedure for <product-name> exactly as written."},
        {"title": "Summarize", "prompt": "Summarize the document into 5 bullets."},
        {"title": "Generate slides", "prompt": "Create 5 PPT slides on [topic] with slide titles and bullet points."}
    ]
    return {"prompts": samples}

# ------------------------------
# PPTX slide generation
# ------------------------------
@app.post("/generate/pptx")
def generate_pptx(topic: str = Form(...), slides: int = Form(5), session_id: Optional[str] = Form(None)):
    if Presentation is None:
        raise HTTPException(status_code=500, detail="python-pptx not installed on server.")
    try:
        # Ask LLM for slide contents
        slide_prompt = f"Create {slides} slide outlines for a presentation on: {topic}. For each slide return a title and 3-5 bullet points. Output in JSON array of objects: {{'title':'','bullets':['','',...]}}"
        llm_chain = LLMChain(llm=chat_model, prompt=PromptTemplate(template="Question: {question}\nAnswer (JSON):", input_variables=["question"]))
        raw = llm_chain.predict(question=slide_prompt)
        # Try to parse JSON from raw
        try:
            # LLM may return markdown or text - try to find JSON substring
            jstart = raw.find("[")
            jend = raw.rfind("]") + 1
            slides_json = json.loads(raw[jstart:jend]) if jstart != -1 and jend != -1 else json.loads(raw)
        except Exception:
            # fallback crude parse: create simple slides from split lines
            slides_json = []
            lines = [l.strip() for l in raw.splitlines() if l.strip()]
            for i in range(min(slides, max(1, len(lines)))):
                title = lines[i][:60]
                bullets = [lines[i+1:i+4]] if i+1 < len(lines) else [[""]]
                slides_json.append({"title": title, "bullets": [" ".join(b) for b in bullets[0]]})
        # Build PPTX
        prs = Presentation()
        for s in slides_json[:slides]:
            slide = prs.slides.add_slide(prs.slide_layouts[1] if len(prs.slide_layouts) > 1 else prs.slide_layouts[0])
            title = slide.shapes.title
            title.text = s.get("title", "")[:120]
            tf = slide.shapes.placeholders[1].text_frame
            tf.clear()
            for b in s.get("bullets", [])[:6]:
                p = tf.add_paragraph()
                p.text = b
                p.level = 0
        out_path = os.path.join(UPLOADS_DIR, f"slides_{uuid.uuid4().hex[:8]}.pptx")
        prs.save(out_path)
        return FileResponse(out_path, media_type="application/vnd.openxmlformats-officedocument.presentationml.presentation", filename=os.path.basename(out_path))
    except Exception as e:
        tb = traceback.format_exc()
        print("PPT generation error:", tb)
        raise HTTPException(status_code=500, detail=f"PPT generation failed: {e}")

# ------------------------------
# Transcribe endpoint (server-side optional Google STT)
# ------------------------------
@app.post("/transcribe")
async def transcribe_audio(file: UploadFile = File(...), use_google: Optional[bool] = Form(False)):
    content = await file.read()
    if not use_google:
        return {"error": "Server-side transcription disabled. Use browser Web Speech API for demo, or set use_google=True and provide GOOGLE_CREDENTIALS_JSON."}
    if not GOOGLE_CREDENTIALS_JSON:
        return {"error": "GOOGLE_CREDENTIALS_JSON not configured."}
    try:
        from google.cloud import speech_v1p1beta1 as speech
        from google.oauth2 import service_account
    except Exception as e:
        return {"error": f"google-cloud-speech library not installed: {e}"}
    creds_info = json.loads(GOOGLE_CREDENTIALS_JSON)
    credentials = service_account.Credentials.from_service_account_info(creds_info)
    client = speech.SpeechClient(credentials=credentials)
    audio = speech.RecognitionAudio(content=content)
    config = speech.RecognitionConfig(encoding=speech.RecognitionConfig.AudioEncoding.LINEAR16, sample_rate_hertz=16000, language_code="en-US", enable_automatic_punctuation=True)
    response = client.recognize(config=config, audio=audio)
    transcripts = [r.alternatives[0].transcript for r in response.results]
    return {"transcript": " ".join(transcripts)}

# ------------------------------
# Chat memory endpoints
# ------------------------------
@app.post("/memory/{session_id}")
def append_memory(session_id: str, message: Dict[str, str]):
    """
    message = {"role": "user"|"assistant", "content": "..."}
    """
    if not session_id:
        raise HTTPException(status_code=400, detail="session_id required")
    _chat_memory.setdefault(session_id, []).append(message)
    return {"status": "ok", "count": len(_chat_memory[session_id])}

@app.get("/memory/{session_id}")
def get_memory(session_id: str):
    return {"session_id": session_id, "messages": _chat_memory.get(session_id, [])}

# ------------------------------
# Health
# ------------------------------
@app.get("/health")
def health():
    return {"status": "ok"}

# ------------------------------
# Utility: create access token and login (kept from original; relies on config.check_ldap_auth)
# ------------------------------
from jose import jwt
SECRET_KEY = "myFAVsecretKEY"
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 60

def create_access_token(data: dict, expires_delta: Union[timedelta , None] = None):
    to_encode = data.copy()
    expire = datetime.utcnow() + (expires_delta or timedelta(minutes=15))
    to_encode.update({"exp": expire})
    return jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)

@app.post("/login")
async def login(user_info: dict = Depends(lambda: {"first_name":"demo","last_name":"user"})):
    # wire to your config.check_ldap_auth in prod
    user = user_info
    if not user:
        raise HTTPException(status_code=400, detail="Invalid credentials")
    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    token = create_access_token(data={"sub": user["first_name"]}, expires_delta=access_token_expires)
    return {"access_token": token, "token_type": "Bearer", "firstname": user["first_name"], "lastname": user.get("last_name","")}

####################################end########################################
  
  
  
