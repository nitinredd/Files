import numpy as np

def calculate_f2_either85(reference_df, test_df, alpha=0.05):
    """
    1. Keep time 0.
    2. Find the first non‑zero timepoint where either mean(reference) or mean(test) > 85%.
    3. Trim both DataFrames to include rows [0 .. that timepoint].
    4. Compute:
         - f2 (conventional)
         - exp_f2 (expected)
    5. Bootstrap (1-alpha)% CIs of the means at each timepoint.
    Returns:
       f2           : conventional f2
       exp_f2       : expected f2
       times        : trimmed time array
       ref_mean     : trimmed reference means
       test_mean    : trimmed test means
       ref_ci_lower : reference lower CI band
       ref_ci_upper : reference upper CI band
       test_ci_lower: test lower CI band
       test_ci_upper: test upper CI band
    """
    # 1) times & means
    times     = reference_df.iloc[:, 0].astype(float).values
    ref_mean  = reference_df.iloc[:, 1:].mean(axis=1).values
    test_mean = test_df.iloc[:, 1:].mean(axis=1).values

    # 2) find cutoff
    cutoff = next((i for i in range(1, len(times))
                   if ref_mean[i] > 85 or test_mean[i] > 85),
                  None)
    if cutoff is None:
        raise ValueError("Neither profile exceeds 85% at any non‑zero timepoint.")

    # 3) trim
    t = times[:cutoff+1]
    r = ref_mean[:cutoff+1].copy()
    u = test_mean[:cutoff+1].copy()
    if t[0] == 0:
        r[0] = 0.0
        u[0] = 0.0

    # 4a) conventional f2
    diff   = u - r
    p      = len(diff)
    sum_sq = np.sum(diff**2)
    f2     = 100 - 25 * np.log10(1 + sum_sq / p)

    # 4b) expected f2 (simple variance‐based adjustment)
    var_ref  = reference_df.iloc[:,1:].var(axis=1, ddof=1).values[:p]
    var_test = test_df.iloc[:,1:].var(axis=1, ddof=1).values[:p]
    avg_var  = np.mean(var_ref + var_test)
    exp_f2   = 100 - 25 * np.log10(1 + (sum_sq + p * avg_var) / p)

    # 5) bootstrap CIs
    def bootstrap_ci(mat):
        B      = 1000
        n_time = mat.shape[0]
        lb, ub = np.empty(n_time), np.empty(n_time)
        for i in range(n_time):
            vals   = mat[i, :]
            boots  = np.random.choice(vals, size=(B, len(vals)), replace=True).mean(axis=1)
            lb[i], ub[i] = np.percentile(boots, [100*alpha/2, 100*(1-alpha/2)])
        return lb, ub

    ref_ci_l, ref_ci_u = bootstrap_ci(reference_df.iloc[:cutoff+1,1:].values)
    tst_ci_l, tst_ci_u = bootstrap_ci(test_df.iloc[:cutoff+1,1:].values)

    return (f2, exp_f2,
            t, r, u,
            ref_ci_l, ref_ci_u,
            tst_ci_l, tst_ci_u)
######################################
import matplotlib.pyplot as plt

elif input1 == 2:
    print("According to EMA/ICH/Canada/Australia guidelines")

    # 1) CV check
    cv_check = check_cv(test_df) and check_cv(reference_df)
    print("CV <20 at first non-zero, <10 thereafter:", cv_check)

    # 2) Verify time alignment
    if not check_same_time_points(test_df, reference_df):
        print("Error: Time points between test and reference do not match.")
    else:
        # 3) Compute both f2s and plot
        print("\nAnalysis based on ‘either >85%’ dissolution criterion:")
        try:
            (f2_conv, f2_exp,
             times, r_mean, t_mean,
             r_lb, r_ub, t_lb, t_ub) = calculate_f2_either85(reference_df, test_df)

            # Print both
            print(f"Conventional f2: {f2_conv:.2f}")
            print(f"Expected    f2: {f2_exp:.2f}")

            if not cv_check:
                print("\nWarning: CV requirements not met; interpret with caution.")

            # Plot 1: without intervals
            plt.figure(figsize=(6,4))
            plt.plot(times, r_mean, marker='o', label="Reference")
            plt.plot(times, t_mean, marker='s', label="Test")
            plt.xlabel("Time")
            plt.ylabel("Mean % Dissolved")
            plt.title("Dissolution Profile (no intervals)")
            plt.legend()
            plt.tight_layout()
            plt.show()

            # Plot 2: with 95% CI bands
            plt.figure(figsize=(6,4))
            plt.plot(times, r_mean, marker='o', label="Reference")
            plt.fill_between(times, r_lb, r_ub, alpha=0.3)
            plt.plot(times, t_mean, marker='s', label="Test")
            plt.fill_between(times, t_lb, t_ub, alpha=0.3)
            plt.xlabel("Time")
            plt.ylabel("Mean % Dissolved")
            plt.title("Dissolution Profile (95% CI bands)")
            plt.legend()
            plt.tight_layout()
            plt.show()

        except ValueError as e:
            print("❌", e)
            print("Cannot perform ‘either >85%’–based f2 calculation.")
