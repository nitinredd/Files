import os
import re
import json
import time
import tempfile
import logging
import streamlit as st
import google.auth

from moviepy.editor import VideoFileClip, AudioFileClip, TextClip, CompositeVideoClip
from gtts import gTTS
import speech_recognition as sr

# Import Gemini libraries (adjust if needed)
from vertexai.preview.generative_models import (
    GenerativeModel,
    SafetySetting,
    HarmCategory,
    HarmBlockThreshold
)

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

# Set up Google credentials and initialize Gemini model
os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "D:/datascience-254609-genai.json"  # Change path as needed
credentials, project_id = google.auth.default()
multimodal_model = GenerativeModel("gemini-2.0-flash-thinking-exp-01-21")

# Define safety settings for Gemini (as in your template)
safety_config = [
    SafetySetting(category=HarmCategory.HARM_CATEGORY_UNSPECIFIED, threshold=HarmBlockThreshold.BLOCK_NONE),
    SafetySetting(category=HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT, threshold=HarmBlockThreshold.BLOCK_NONE),
    SafetySetting(category=HarmCategory.HARM_CATEGORY_HARASSMENT, threshold=HarmBlockThreshold.BLOCK_NONE),
    SafetySetting(category=HarmCategory.HARM_CATEGORY_HATE_SPEECH, threshold=HarmBlockThreshold.BLOCK_NONE),
    SafetySetting(category=HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT, threshold=HarmBlockThreshold.BLOCK_NONE),
]

#########################
# Gemini Translation
#########################
def translate_to_spanish(text):
    """
    Use Gemini to translate English text to Spanish.
    """
    prompt = f"Translate the following English text to Spanish:\n\n{text}"
    try:
        responses = multimodal_model.generate_content([prompt], safety_settings=safety_config)
        if hasattr(responses, 'text') and responses.text:
            translated = responses.text
        else:
            # In case multiple responses are returned
            translated = ''.join([r.text for r in responses])
        logger.debug(f"Translated text: {translated}")
        return translated
    except Exception as e:
        logger.error(f"Translation error: {str(e)}")
        return text

#########################
# Offline Speech Recognition
#########################
def transcribe_audio(audio_path):
    """
    Transcribe audio using SpeechRecognition with PocketSphinx (offline).
    """
    recognizer = sr.Recognizer()
    with sr.AudioFile(audio_path) as source:
        audio_data = recognizer.record(source)
    try:
        transcript = recognizer.recognize_sphinx(audio_data)
        logger.debug(f"Transcript: {transcript}")
        return transcript
    except sr.UnknownValueError:
        logger.error("PocketSphinx could not understand audio")
        return ""
    except sr.RequestError as e:
        logger.error(f"PocketSphinx error: {e}")
        return ""

#########################
# Spanish Audio Generation
#########################
def generate_spanish_audio(text, output_path):
    """
    Generate Spanish speech from text using gTTS.
    """
    try:
        tts = gTTS(text=text, lang='es')
        tts.save(output_path)
        logger.debug(f"Spanish audio saved to {output_path}")
    except Exception as e:
        logger.error(f"gTTS error: {str(e)}")

#########################
# Subtitle Creation
#########################
def create_subtitles(text, video_duration):
    """
    Split the English transcript into sentences and distribute them over the video duration.
    This is an approximate method.
    """
    sentences = re.split(r'(?<=[.!?]) +', text)
    sentences = [s.strip() for s in sentences if s.strip()]
    num_sentences = len(sentences)
    if num_sentences == 0:
        return []
    duration_per_sentence = video_duration / num_sentences
    subtitles = []
    current_time = 0
    for sentence in sentences:
        start = current_time
        end = current_time + duration_per_sentence
        subtitles.append((start, end, sentence))
        current_time = end
    logger.debug(f"Created {len(subtitles)} subtitle segments.")
    return subtitles

#########################
# Merge Video, Audio, and Subtitles
#########################
def merge_video_audio(video_path, audio_path, subtitles, output_path):
    """
    Replace the original video audio with the Spanish audio and overlay English subtitles.
    """
    video = VideoFileClip(video_path)
    audio = AudioFileClip(audio_path)
    # Replace audio with Spanish audio
    video = video.set_audio(audio)

    subtitle_clips = []
    for start, end, text in subtitles:
        # Create a TextClip for each subtitle segment.
        txt_clip = TextClip(text, fontsize=24, color='white', bg_color='black',
                            method='caption', size=(video.w, None))
        txt_clip = txt_clip.set_position(('center', 'bottom')).set_start(start).set_duration(end - start)
        subtitle_clips.append(txt_clip)
    
    final_video = CompositeVideoClip([video, *subtitle_clips])
    final_video.write_videofile(output_path, codec='libx264', audio_codec='aac')
    final_video.close()
    video.close()
    audio.close()

#########################
# Main Streamlit App
#########################
def main():
    st.title("Video Translator: English â†’ Spanish with Subtitles")
    st.write("Upload an English video to translate its audio to Spanish and overlay English subtitles.")

    uploaded_video = st.file_uploader("Upload Video", type=["mp4", "mov", "avi"])
    
    if uploaded_video is not None:
        # Save the uploaded video to a temporary file.
        with tempfile.NamedTemporaryFile(delete=False, suffix=".mp4") as temp_video_file:
            temp_video_file.write(uploaded_video.read())
            temp_video_path = temp_video_file.name
        
        st.video(temp_video_path)

        if st.button("Translate Video"):
            with st.spinner("Processing video..."):
                try:
                    # Open the video clip and extract its duration.
                    video_clip = VideoFileClip(temp_video_path)
                    video_duration = video_clip.duration
                    # Save audio to a temporary WAV file.
                    temp_audio_file = tempfile.NamedTemporaryFile(delete=False, suffix=".wav")
                    temp_audio_path = temp_audio_file.name
                    temp_audio_file.close()
                    video_clip.audio.write_audiofile(temp_audio_path, codec='pcm_s16le')
                    video_clip.close()

                    # Transcribe the extracted audio (offline)
                    st.info("Transcribing audio...")
                    transcript = transcribe_audio(temp_audio_path)
                    if not transcript:
                        st.error("Could not transcribe audio.")
                        return

                    # Translate the transcript from English to Spanish using Gemini.
                    st.info("Translating transcript to Spanish...")
                    translated_text = translate_to_spanish(transcript)

                    # Generate Spanish audio using gTTS.
                    st.info("Generating Spanish audio...")
                    temp_spanish_audio_file = tempfile.NamedTemporaryFile(delete=False, suffix=".mp3")
                    temp_spanish_audio_path = temp_spanish_audio_file.name
                    temp_spanish_audio_file.close()
                    generate_spanish_audio(translated_text, temp_spanish_audio_path)

                    # Create English subtitles from the original transcript.
                    st.info("Creating subtitles...")
                    subtitles = create_subtitles(transcript, video_duration)

                    # Merge the video with the new Spanish audio and subtitles.
                    st.info("Merging video, audio, and subtitles...")
                    temp_output_video_file = tempfile.NamedTemporaryFile(delete=False, suffix=".mp4")
                    output_video_path = temp_output_video_file.name
                    temp_output_video_file.close()
                    merge_video_audio(temp_video_path, temp_spanish_audio_path, subtitles, output_video_path)

                    st.success("Video translation completed!")
                    st.video(output_video_path)
                    with open(output_video_path, "rb") as video_file:
                        st.download_button("Download Translated Video",
                                           video_file.read(),
                                           file_name="translated_video.mp4",
                                           mime="video/mp4")
                    
                except Exception as e:
                    st.error(f"An error occurred during processing: {str(e)}")
                    logger.exception("Processing error")
                finally:
                    # Clean up temporary files
                    for path in [temp_video_path, temp_audio_path, temp_spanish_audio_path]:
                        try:
                            if os.path.exists(path):
                                os.remove(path)
                        except Exception as cleanup_e:
                            logger.error(f"Error cleaning up temporary file {path}: {cleanup_e}")

if __name__ == "__main__":
    main()
