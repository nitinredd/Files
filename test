def create_cfd_visualization(cfd_sim, time_step):
    """Create interactive 3D visualization of CFD results"""
    grid_size = cfd_sim.grid_size
    X, Y, Z = np.mgrid[:grid_size, :grid_size, :grid_size]
    values = cfd_sim.concentration.flatten()
    
    fig = go.Figure(data=go.Volume(
        x=X.flatten(),
        y=Y.flatten(),
        z=Z.flatten(),
        value=values,
        isomin=0.1,
        isomax=0.8,
        opacity=0.2,
        surface_count=7,
        colorscale='Plasma',
        caps=dict(x_show=False, y_show=False, z_show=False),
    ))
    
    slice_pos = grid_size // 2
    
    # Create slice planes for each axis
    # For x-plane (YZ slice): x is constant, y and z vary.
    Y_mesh, Z_mesh = np.mgrid[:grid_size, :grid_size]
    X_const = np.full_like(Y_mesh, slice_pos)
    slice_data = cfd_sim.get_slice('x', slice_pos)
    fig.add_trace(go.Surface(
        x=X_const,
        y=Y_mesh,
        z=slice_data,
        colorscale='Viridis',
        showscale=False,
        opacity=0.8,
        name='YZ Plane'
    ))
    
    # For y-plane (XZ slice): y is constant, x and z vary.
    X_mesh, Z_mesh = np.mgrid[:grid_size, :grid_size]
    Y_const = np.full_like(X_mesh, slice_pos)
    slice_data = cfd_sim.get_slice('y', slice_pos)
    fig.add_trace(go.Surface(
        x=X_mesh,
        y=Y_const,
        z=slice_data,
        colorscale='Viridis',
        showscale=False,
        opacity=0.8,
        name='XZ Plane'
    ))
    
    # For z-plane (XY slice): z is constant, x and y vary.
    X_mesh, Y_mesh = np.mgrid[:grid_size, :grid_size]
    Z_const = np.full_like(X_mesh, slice_pos)
    slice_data = cfd_sim.get_slice('z', slice_pos)
    fig.add_trace(go.Surface(
        x=X_mesh,
        y=Y_mesh,
        z=Z_const,
        surfacecolor=slice_data,  # Using surfacecolor to represent the slice data
        colorscale='Viridis',
        showscale=False,
        opacity=0.8,
        name='XY Plane'
    ))
    
    fig.update_layout(
        title=f'3D Drug Diffusion CFD Simulation (Time: {cfd_sim.time_elapsed:.2f} s)',
        scene=dict(
            xaxis_title='X Position',
            yaxis_title='Y Position',
            zaxis_title='Z Position',
            camera=dict(
                eye=dict(x=1.8, y=1.8, z=0.8)
            ),
            aspectratio=dict(x=1, y=1, z=1)
        ),
        height=800,
        margin=dict(l=0, r=0, b=0, t=40)
    )
    return fig
