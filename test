import os
import io
import streamlit as st
import pandas as pd
import google.auth
from summit.domain import Domain, ContinuousVariable
from summit.strategies import TSEMO, SNOBFIT
from vertexai.preview.generative_models import GenerativeModel, SafetySetting, HarmCategory, HarmBlockThreshold

st.set_page_config(page_title="SOR Phase I - Flowrate Calculator", layout="wide")

# --- Gemini setup (fixed GCP configuration) ---
# Set up credentials
os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "D:/datascience-254609-genai.json"
credentials, project_id = google.auth.default()
# Initialize the Gemini model
multimodal_model = GenerativeModel("gemini-2.0-flash-thinking-exp-01-21")
# Safety settings (use keyword args)
safety_config = [
    SafetySetting(category=HarmCategory.HARM_CATEGORY_UNSPECIFIED,
                  threshold=HarmBlockThreshold.BLOCK_NONE),
    SafetySetting(category=HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
                  threshold=HarmBlockThreshold.BLOCK_NONE),
    SafetySetting(category=HarmCategory.HARM_CATEGORY_HARASSMENT,
                  threshold=HarmBlockThreshold.BLOCK_NONE),
    SafetySetting(category=HarmCategory.HARM_CATEGORY_HATE_SPEECH,
                  threshold=HarmBlockThreshold.BLOCK_NONE),
    SafetySetting(category=HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,
                  threshold=HarmBlockThreshold.BLOCK_NONE),
]

# --- Helper: build Summit domain from LHS sheet ---
def create_domain_X(df_lhs: pd.DataFrame) -> Domain:
    domain = Domain()
    for col in df_lhs.columns[1:]:
        col_clean = col.strip().replace(" ", "")
        if df_lhs[col].notna().all():
            lb, ub = float(df_lhs[col].iloc[1]), float(df_lhs[col].iloc[2])
            desc = str(df_lhs[col].iloc[0])
            domain += ContinuousVariable(name=col_clean, description=desc, bounds=[lb, ub])
    return domain

# --- Generate initial LHS experiments ---
@st.cache_data
def generate_lhs(df_lhs: pd.DataFrame, n_exp: int, n_obj: int) -> pd.DataFrame:
    domain = create_domain_X(df_lhs)
    if n_obj > 1:
        strat = TSEMO(domain, random_rate=0.0, n_spectral_points=4000)
        df_out = strat.suggest_experiments(n_exp, use_spectral_sample=True, pop_size=100, iterations=100)
    else:
        strat = SNOBFIT(domain)
        df_out = strat.suggest_experiments(n_exp)
    df_out = df_out.drop(columns=["strategy"])
    df_out.columns = [c[0] for c in df_out.columns]
    return df_out.reset_index(drop=True)

# --- Compute flowrates vectorized ---
@st.cache_data
def compute_flowrates(df_exp: pd.DataFrame, df_pump: pd.DataFrame, df_reactor: pd.DataFrame) -> pd.DataFrame:
    df = df_exp.copy()
    reactor_vol = float(df_reactor.iloc[0,1])
    steady_state = float(df_reactor.iloc[0,3])
    def molarity(c, mw): return c/mw*1000
    def inv_molarity(c, mw): return 1.0/molarity(c, mw)
    # Reaction time
    df['Reaction time'] = df['ResidencetimeT1'] * steady_state
    # Numerators
    num1 = inv_molarity(df_pump.iloc[0,0], df_pump.iloc[0,3])
    num2 = df['Equivalence1'] * inv_molarity(df_pump.iloc[1,0], df_pump.iloc[1,3])
    num3 = df['Equivalence2'] * inv_molarity(df_pump.iloc[2,0], df_pump.iloc[2,3])
    denom = num1 + num2 + num3
    # Flowrates
    df['Flow rate of Pump 1'] = reactor_vol / df['ResidencetimeT1'] * num1 / denom
    df['Flow rate of Pump 2'] = reactor_vol / df['ResidencetimeT1'] * num2 / denom
    df['Flow rate of Pump 3'] = reactor_vol / df['ResidencetimeT1'] * num3 / denom
    # Optional 4th pump (quench)
    if df_pump.shape[0] >= 4:
        q_factor = float(df_pump.iloc[3,4]) if not pd.isna(df_pump.iloc[3,4]) else 1.0
        df['Flow rate of Pump 4'] = q_factor * df['Flow rate of Pump 2']
    return df

# --- Streamlit UI ---
st.title("üî¨ SOR Phase I: Automated Flowrate Calculator")
master = st.sidebar.file_uploader(
    "Upload Master Excel (LHS, Pump, Objectives, Reactor)", type=["xlsx"]
)
if master:
    try:
        xls = pd.ExcelFile(master)
        df_lhs = pd.read_excel(xls, sheet_name="LHS")
        df_pump = pd.read_excel(xls, sheet_name="Pump Details")
        df_obj = pd.read_excel(xls, sheet_name="Objectives")
        df_reactor = pd.read_excel(xls, sheet_name="Reactor Details", header=None)
    except Exception as e:
        st.error(f"Error reading Excel: {e}")
        st.stop()

    n_exp = st.sidebar.number_input("Number of LHS experiments", min_value=1, value=5)
    n_obj = df_obj.shape[1] - 1

    # Prompt input and Gemini call
    st.subheader("üí¨ Describe your setup in plain English")
    prompt = st.text_area(
        "Enter prompt to Gemini:", height=150,
        placeholder="E.g., 'I have three reagent streams and one quench stream...'"
    )
    if st.button("Send to Gemini"):
        if not prompt:
            st.error("Please enter a description of your reaction and flowrate requirements.")
        else:
            try:
                response = multimodal_model.generate_content(
                    [prompt], safety_settings=safety_config
                )
                code = response.text
                st.subheader("üìù Generated flowrate.py code from Gemini")
                st.code(code, language="python")
                st.markdown("---")
            except Exception as e:
                st.error(f"Gemini call failed: {e}")

    # Generate LHS + compute flowrates
    if st.button("‚ñ∂Ô∏è Generate Flowrates"):
        with st.spinner("Computing flowrates..."):
            lhs_df = generate_lhs(df_lhs, int(n_exp), int(n_obj))
            result = compute_flowrates(lhs_df, df_pump, df_reactor)
            st.subheader("üìä LHS + Flowrate Results")
            st.dataframe(result)
            towrite = io.BytesIO()
            result.to_excel(towrite, index=False, sheet_name="Results")
            towrite.seek(0)
            st.download_button(
                "üì• Download SOR_RESULT.xlsx", data=towrite,
                file_name="SOR_RESULT.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
else:
    st.info("Please upload your master Excel file to begin.")
