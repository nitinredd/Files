import os
import json
import pandas as pd
import streamlit as st
from langchain_openai import AzureChatOpenAI
from langchain.schema import HumanMessage, SystemMessage
from langchain.embeddings.cache import CacheBackedEmbeddings
from langchain.storage.file_system import LocalFileStore
from langchain_openai import AzureOpenAIEmbeddings
from langchain.vectorstores import FAISS
from langchain.docstore.document import Document
from langchain.chains import RetrievalQA

# ---------------------------------------------------------------------------
# GPT & Embedding Configuration (as provided)
# ---------------------------------------------------------------------------
base_url = os.getenv('AZURE_BASE_URL', '')
api_version = os.getenv('AZURE_API_VERSION', '')
api_key = os.getenv('AZURE_API_KEY', '')
deployment_name = os.getenv('AZURE_DEPLOYMENT_NAME', 'GPT4o')
model_name = os.getenv('AZURE_MODEL_NAME', 'GPT4o')

chat_model = AzureChatOpenAI(
    azure_deployment=deployment_name,
    model=model_name,
    api_version=api_version,
    api_key=api_key,
    azure_endpoint=base_url
)

file_store = LocalFileStore('langchain-embeddings')
base_embed = AzureOpenAIEmbeddings(
    model=os.getenv('AZURE_EMBED_MODEL', ''),
    api_version=api_version,
    azure_endpoint=base_url,
    api_key=api_key,
    azure_deployment=os.getenv('AZURE_EMBED_DEPLOYMENT', '')
)

cached_embeddings = CacheBackedEmbeddings.from_bytes_store(
    base_embed, file_store, namespace=base_embed.model
)

# ---------------------------------------------------------------------------
# Multi-Agent Components
# ---------------------------------------------------------------------------
class ChildAgent:
    def __init__(self, name, retriever):
        self.name = name
        self.chain = RetrievalQA.from_chain_type(
            llm=chat_model,
            chain_type="stuff",
            retriever=retriever,
            return_source_documents=False
        )

    def ask(self, query):
        return self.chain.run(query)


class CoordinatorAgent:
    def __init__(self, child_agents):
        self.children = child_agents

    def coordinate(self, query):
        # ask all children and consolidate
        answers = []
        for child in self.children:
            try:
                resp = child.ask(query)
                if resp and 'not found' not in resp.lower():
                    answers.append((child.name, resp))
            except Exception:
                continue
        return answers


class OversightAgent:
    def validate(self, answers):
        if not answers:
            return None
        # pick best (first) for simplicity
        return answers[0][1]


class LearningAgent:
    def __init__(self):
        self.logs = []

    def log(self, user_query, response):
        self.logs.append({'query': user_query, 'response': response})


class AgentManager:
    def __init__(self, agents):
        self.coordinator = CoordinatorAgent(agents)
        self.oversight = OversightAgent()
        self.learning = LearningAgent()

    def handle_query(self, query):
        raw_answers = self.coordinator.coordinate(query)
        validated = self.oversight.validate(raw_answers)
        if not validated:
            answer = "Relevant information not found in the workbooks."
        else:
            answer = validated
        self.learning.log(query, answer)
        return answer

# ---------------------------------------------------------------------------
# Data & Vectorstore Setup
# ---------------------------------------------------------------------------
@st.cache_data
def load_workbooks(paths):
    dfs = {}
    for name, path in paths.items():
        xls = pd.ExcelFile(path)
        for sheet in xls.sheet_names:
            df = xls.parse(sheet)
            key = f"{name}:{sheet}"
            dfs[key] = df
    return dfs

@st.cache_resource
def build_vectorstores(dfs):
    agents = []
    for key, df in dfs.items():
        docs = []
        for _, row in df.iterrows():
            text = json.dumps(row.dropna().to_dict())
            docs.append(Document(page_content=text, metadata={'source': key}))
        store = FAISS.from_documents(docs, cached_embeddings)
        retriever = store.as_retriever(search_kwargs={"k": 5})
        agents.append(ChildAgent(name=key, retriever=retriever))
    return agents

# ---------------------------------------------------------------------------
# Streamlit UI
# ---------------------------------------------------------------------------
st.set_page_config(page_title="Excel Chatbot", page_icon="ðŸ¤–")
st.title("ðŸ¤– Excel-based Multi-Agent Chatbot")

uploaded1 = st.file_uploader("Upload 'formula_master_osd.xlsx'", type=["xlsx"] )
uploaded2 = st.file_uploader("Upload 'masterlist_osd_equipments.xlsx'", type=["xlsx"] )

if uploaded1 and uploaded2:
    with st.spinner("Loading data and building agents..."):
        paths = {
            'formula_master_osd': uploaded1,
            'masterlist_osd_equipments': uploaded2
        }
        dfs = load_workbooks(paths)
        child_agents = build_vectorstores(dfs)
        manager = AgentManager(child_agents)
    
    if 'chat_history' not in st.session_state:
        st.session_state.chat_history = []
    if 'initialized' not in st.session_state:
        st.session_state.initialized = True
        st.session_state.chat_history.append(("bot", 
            "Hi! I'm your Excel Chatbot. Here are some sample prompts to get you started:"))
        sample_prompts = [
            f"Do we have Tapasya made with Capacity 600L in FTO-3?",
            f"What is the impeller speed range in RMG for the Equipment Glatt in FTO-2?",
            f"What are the various literature sources considered in RMG?"
        ]
        for p in sample_prompts:
            st.session_state.chat_history.append(("bot", p))

    # display chat history
    for sender, msg in st.session_state.chat_history:
        if sender == 'user':
            st.markdown(f"**You:** {msg}")
        else:
            st.markdown(f"**Bot:** {msg}")

    # user input
    query = st.text_input("Your question:", key="input_query")
    if query:
        st.session_state.chat_history.append(("user", query))
        response = manager.handle_query(query)
        st.session_state.chat_history.append(("bot", response))
        st.experimental_rerun()
else:
    st.info("Please upload both Excel workbooks to initialize the chatbot.")
