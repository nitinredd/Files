def predictive_optimal_combinations_advanced(ref_df, test_df, regulation, 
                                             window_min, window_max, diff_threshold=None,
                                             interp_method='gpr'):
    """
    New approach to maximize diversity:
      - Compute valid times from the union of 3- and 5-minute intervals between window_min and window_max.
      - Use GPR interpolation (on the reference dataset) to predict dissolution percentages at each valid time.
      - Define dissolution strata (e.g., 0-30%, 30-60%, 60-90%, 90-100%).
      - For each stratum, take all valid times that fall within that predicted dissolution range.
      - The candidate sequence is the union of these times plus the endpoints.
      - Then compute the predicted dissolution (for reference and test), f2 metric, and check regulatory compliance.
    """
    import numpy as np
    
    # Step 1: Determine valid time points
    valid_times = np.unique(np.concatenate([
        np.arange(window_min, window_max+1, 3),
        np.arange(window_min, window_max+1, 5)
    ]))
    valid_times = valid_times[(valid_times >= window_min) & (valid_times <= window_max)]
    
    # Step 2: Define dissolution strata (in percent)
    strata = [(0,30), (30,60), (60,90), (90,100)]
    
    # Step 3: Setup interpolation using GPR
    from sklearn.gaussian_process import GaussianProcessRegressor
    from sklearn.gaussian_process.kernels import ConstantKernel as C, RBF, WhiteKernel
    kernel = C(1.0, (1e-3, 1e3)) * RBF(length_scale=10.0) + WhiteKernel()
    
    ref_times = ref_df.iloc[:, 0].values.astype(float)
    ref_diss = ref_df.iloc[:, 1].values.astype(float)
    test_times = test_df.iloc[:, 0].values.astype(float)
    test_diss = test_df.iloc[:, 1].values.astype(float)
    
    ref_mask = ~np.isnan(ref_times) & ~np.isnan(ref_diss)
    test_mask = ~np.isnan(test_times) & ~np.isnan(test_diss)
    
    if interp_method == 'gpr':
        def safe_gp_interpolator(x, y):
            gp = GaussianProcessRegressor(kernel=kernel, n_restarts_optimizer=3)
            valid_mask = ~np.isnan(x) & ~np.isnan(y)
            X = x[valid_mask].reshape(-1, 1)
            gp.fit(X, y[valid_mask])
            return gp
        ref_model = safe_gp_interpolator(ref_times, ref_diss)
        test_model = safe_gp_interpolator(test_times, test_diss)
        def ref_interp(x):
            return ref_model.predict(np.array(x).reshape(-1, 1))
        def test_interp(x):
            return test_model.predict(np.array(x).reshape(-1, 1))
    else:
        from scipy.interpolate import interp1d
        valid_methods = ['linear', 'nearest', 'slinear', 'quadratic', 'cubic']
        interp_method = interp_method if interp_method in valid_methods else 'linear'
        ref_interp = interp1d(ref_times[ref_mask], ref_diss[ref_mask],
                              kind=interp_method, bounds_error=False, fill_value=np.nan)
        test_interp = interp1d(test_times[test_mask], test_diss[test_mask],
                               kind=interp_method, bounds_error=False, fill_value=np.nan)
    
    # Step 4: Precompute predicted dissolution percentages for each valid time (using reference curve)
    all_valid_pred = {}
    for t in valid_times:
        pred = ref_interp(np.array([t]).reshape(-1,1))
        # Force dissolution at window_min to be 0%
        all_valid_pred[t] = 0.0 if t == window_min else float(pred[0])
    
    # Step 5: For each stratum, select all valid times whose predicted dissolution falls in that bin.
    candidate = set()
    for (low, high) in strata:
        times_in_stratum = [t for t in valid_times if low <= all_valid_pred[t] < high]
        # To enforce diversity, require at least two points if available.
        if len(times_in_stratum) >= 2:
            candidate.update(times_in_stratum)
        elif len(times_in_stratum) > 0:
            candidate.update(times_in_stratum)
    # Always include endpoints
    candidate.add(window_min)
    candidate.add(window_max)
    candidate = sorted(candidate)
    
    # Step 6: Compute predicted dissolution percentages for the candidate sequence
    if interp_method == 'gpr':
        candidate_array = np.array(candidate).reshape(-1, 1)
        ref_vals = ref_interp(candidate_array)
        test_vals = test_interp(candidate_array)
    else:
        ref_vals = ref_interp(candidate)
        test_vals = test_interp(candidate)
    
    # Force dissolution at window_min to be 0%
    if candidate[0] == window_min:
        ref_vals[0] = 0.0
        test_vals[0] = 0.0
    
    # Step 7: Compute f2 similarity metric
    diff = test_vals - ref_vals
    p_val = len(candidate)
    f2 = 100 - 25 * np.log10(1 + (np.sum(diff**2) / p_val))
    
    # Diversity flag: check that in each stratum there are at least two points (if available in valid_times)
    diverse = True
    for (low, high) in strata:
        points = [t for t in candidate if low <= all_valid_pred[t] < high]
        if len(points) < 2:
            diverse = False
            break
    
    # Regulatory compliance check (assumed external function)
    compliant, reasons = check_regulatory_compliance(
        candidate, regulation,
        dict(zip(candidate, ref_vals.flatten().tolist())),
        dict(zip(candidate, test_vals.flatten().tolist()))
    )
    
    # Build result dictionary
    result = {
        'sequence': candidate,
        'f2': round(f2, 2),
        'compliant': compliant,
        'reasons': reasons,
        'length': len(candidate),
        'diverse': diverse,
        'ref_vals': ref_vals.flatten().tolist(),
        'test_vals': test_vals.flatten().tolist()
    }
    
    # Return a list with this one candidate (since this approach yields one "most diverse" candidate)
    return [result], [result]
#########################################
if run_predictive.lower() == 'yes':
    # Determine candidate window
    window_min, window_max = determine_candidate_window(
        reference_mean_df,
        test_mean_df,
        step=5,
        initial_threshold=10
    )
    
    # Map regulation for predictive analysis
    regulation_map = {1: "FDA", 2: "EMA", 3: "China", 4: "ASEAN", 5: "ANVISA"}
    selected_regulation = regulation_map.get(input1, "FDA")
    
    print(f"\nCandidate window for combination search: {window_min} to {window_max} (using stratification based on predicted dissolution percentages)")
    
    # Run predictive analysis using the new dissolution-based stratification approach.
    results, all_results = predictive_optimal_combinations_advanced(
        reference_mean_df,
        test_mean_df,
        regulation=selected_regulation,
        window_min=window_min,
        window_max=window_max,
        diff_threshold=None,
        interp_method='gpr'
    )
    
    # For consistency, convert candidate time points to standard Python ints.
    for cand in results:
        cand['sequence'] = [int(t) for t in cand['sequence']]
    
    # Since this approach generates one candidate, set overall_best accordingly.
    overall_best = results[0] if results else None
    
    if overall_best:
        print("\n=== Optimal Predictive Combination ===")
        print(f"Condition: {overall_best.get('condition','N/A')}")
        print(f"Dissolution Range: {overall_best.get('diss_range','N/A')}")
        print(f"Time Points (diverse candidate): {overall_best['sequence']}")
        print(f"Length: {len(overall_best['sequence'])}")
        print(f"Predicted f2 Score: {overall_best['f2']}")
        print(f"Diverse Combination: {overall_best.get('diverse', False)}")
        
        if overall_best['reasons']:
            print(f"Compliance Issues: {', '.join(overall_best['reasons'])}")
        else:
            print("Regulatory Compliance: Passed")
        
        # Plot the predicted dissolution curves for the optimal candidate
        import matplotlib.pyplot as plt
        plt.figure(figsize=(12, 6))
        time_points = overall_best['sequence']
        ref_diss = interpolate_dissolution_curve(reference_mean_df, time_points, method='gpr')
        test_diss = interpolate_dissolution_curve(test_mean_df, time_points, method='gpr')
        # Force dissolution at time window_min to be 0%
        if time_points[0] == window_min:
            ref_diss[0] = 0.0
            test_diss[0] = 0.0
        plt.plot(time_points, ref_diss, 'bo-', label='Reference')
        plt.plot(time_points, test_diss, 'r*--', label='Test')
        plt.title(f"Optimal Profile: Predicted Dissolution (f2 = {overall_best['f2']})")
        plt.xlabel('Time (min)')
        plt.ylabel('Dissolution (%)')
        plt.legend()
        plt.grid(True)
        plt.show()
        
        # Print predicted dissolution percentages
        print("\nPredicted Reference Dissolution Percentages:")
        for t, d in zip(time_points, ref_diss):
            print(f"Time {t} min: {d:.2f}%")
        print("\nPredicted Test Dissolution Percentages:")
        for t, d in zip(time_points, test_diss):
            print(f"Time {t} min: {d:.2f}%")
    else:
        print("❌ No candidate sequence was generated.")
    
    # (Optional) Print all unique candidate combinations if multiple were generated.
    print("\n=== All Candidate Combination (Diverse) ===")
    for idx, cand in enumerate(results):
        seq_print = [int(t) for t in cand['sequence']]
        print(f"{idx+1:3d}. {cand.get('diss_range','N/A')} | Points: {seq_print} | Length: {len(seq_print)} | f2: {cand['f2']} | Compliant: {cand['compliant']}")
