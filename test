import React, { useState, useRef, useEffect } from 'react';
import { motion } from 'framer-motion';

export default function PdfWarningDialog({ open, onContinue, onCancel }) {
  const [email, setEmail] = useState('');
  const [agreed, setAgreed] = useState(false);
  const emailInputRef = useRef(null);

  useEffect(() => {
    if (open && emailInputRef.current) {
      emailInputRef.current.focus();
    }
    // Reset form when dialog opens
    if (open) {
      setEmail('');
      setAgreed(false);
    }
  }, [open]);

  const handleContinue = () => {
    if (email && agreed) {
      onContinue(email);
    }
  };

  const isValidEmail = (email) => {
    return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
  };

  const canContinue = email && isValidEmail(email) && agreed;

  if (!open) return null;

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/75">
      <motion.div
        initial={{ scale: 0.9, opacity: 0 }}
        animate={{ scale: 1, opacity: 1 }}
        transition={{ duration: 0.3 }}
        className="bg-white rounded-2xl shadow-2xl w-full max-w-lg mx-4 p-6"
      >
        {/* Warning Icon */}
        <div className="flex justify-center mb-4">
          <div className="w-16 h-16 rounded-full bg-yellow-100 flex items-center justify-center">
            <svg
              className="w-10 h-10 text-yellow-600"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"
              />
            </svg>
          </div>
        </div>

        {/* Warning Title */}
        <h2 className="text-2xl font-bold text-center text-gray-800 mb-4">
          Document Access Warning
        </h2>

        {/* Warning Message */}
        <div className="bg-red-50 border-l-4 border-red-500 p-4 mb-6">
          <p className="text-sm text-red-800 leading-relaxed">
            <strong>You are being watched!</strong> Please be aware that taking screenshots,
            screen recordings, or capturing the contents of the original PDF is strictly prohibited
            and may result in legal action. All access is logged and monitored.
          </p>
        </div>

        {/* Email Input */}
        <div className="mb-4">
          <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-2">
            Email Address <span className="text-red-500">*</span>
          </label>
          <input
            ref={emailInputRef}
            id="email"
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            placeholder="Enter your email address"
            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent outline-none transition"
            required
          />
          {email && !isValidEmail(email) && (
            <p className="text-xs text-red-500 mt-1">Please enter a valid email address</p>
          )}
        </div>

        {/* Agreement Checkbox */}
        <div className="mb-6">
          <label className="flex items-start cursor-pointer">
            <input
              type="checkbox"
              checked={agreed}
              onChange={(e) => setAgreed(e.target.checked)}
              className="mt-1 w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
            />
            <span className="ml-3 text-sm text-gray-700">
              I agree to the terms and conditions. I understand that unauthorized capture,
              distribution, or misuse of this document is prohibited and my access is being monitored.
            </span>
          </label>
        </div>

        {/* Action Buttons */}
        <div className="flex gap-3">
          <button
            onClick={onCancel}
            className="flex-1 px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition font-medium"
          >
            Cancel
          </button>
          <button
            onClick={handleContinue}
            disabled={!canContinue}
            className={`flex-1 px-4 py-2 rounded-lg font-medium transition ${
              canContinue
                ? 'bg-blue-600 text-white hover:bg-blue-700'
                : 'bg-gray-300 text-gray-500 cursor-not-allowed'
            }`}
          >
            Continue
          </button>
        </div>
      </motion.div>
    </div>
  );
}
####################################
import React, { useEffect, useRef, useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import PdfWarningDialog from './PdfWarningDialog';

export default function PdfViewerModal({ open, onClose, pdfUrl, productName }) {
  const [showWarning, setShowWarning] = useState(true);
  const [userEmail, setUserEmail] = useState('');
  const closeBtnRef = useRef(null);

  useEffect(() => {
    if (open) {
      setShowWarning(true);
      setUserEmail('');
    }
  }, [open]);

  useEffect(() => {
    if (open && !showWarning && closeBtnRef.current) {
      closeBtnRef.current.focus();
    }
  }, [open, showWarning]);

  // Close on ESC
  useEffect(() => {
    const handler = (e) => {
      if (e.key === 'Escape') {
        if (showWarning) {
          onClose && onClose();
        } else {
          onClose && onClose();
        }
      }
    };
    if (open) window.addEventListener('keydown', handler);
    return () => window.removeEventListener('keydown', handler);
  }, [open, onClose, showWarning]);

  const handleWarningContinue = (email) => {
    setUserEmail(email);
    setShowWarning(false);
    console.log('User accepted PDF warning:', email);
  };

  const handleWarningCancel = () => {
    onClose && onClose();
  };

  if (!open || !pdfUrl) return null;

  // Show warning dialog first
  if (showWarning) {
    return (
      <PdfWarningDialog
        open={open}
        onContinue={handleWarningContinue}
        onCancel={handleWarningCancel}
      />
    );
  }

  return (
    <AnimatePresence>
      <motion.div
        key="pdf-modal-root"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        exit={{ opacity: 0 }}
        className="fixed inset-0 z-50 flex items-center justify-center bg-black/75"
        aria-modal="true"
        role="dialog"
      >
        <motion.div
          initial={{ y: -20, opacity: 0, scale: 0.95 }}
          animate={{ y: 0, opacity: 1, scale: 1 }}
          exit={{ y: -20, opacity: 0, scale: 0.95 }}
          transition={{ duration: 0.4 }}
          className="relative w-full max-w-6xl mx-4 h-[90vh] rounded-2xl bg-white shadow-lg overflow-hidden flex flex-col"
          role="document"
        >
          {/* Header */}
          <div className="flex items-center justify-between px-6 py-4 border-b bg-gray-100 flex-shrink-0">
            <div className="pr-4">
              <h1 className="text-xl font-bold text-gray-800 font-['Merriweather']">
                {productName ? `${productName} - PDF Viewer` : 'PDF Viewer'}
              </h1>
            </div>
            <div className="flex items-center gap-2">
              <button
                ref={closeBtnRef}
                onClick={onClose}
                className="px-4 py-2 bg-gray-300 rounded-md hover:bg-gray-400 transition text-sm"
              >
                Close
              </button>
            </div>
          </div>

          {/* PDF Content */}
          <div className="flex-1 overflow-hidden">
            <iframe
              src={`${pdfUrl}#toolbar=0&navpanes=0&scrollbar=1`}
              className="w-full h-full border-0"
              title={productName ? `${productName} PDF` : 'PDF Document'}
              style={{ minHeight: '100%' }}
            />
          </div>
        </motion.div>
      </motion.div>
    </AnimatePresence>
  );
}
