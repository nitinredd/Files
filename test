import React, { useState, useRef, useEffect } from 'react'
import axios from 'axios'
import './Chatbot.css'

const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition

export default function Chatbot({ apiUrl, backgroundImage, samplePrompts }) {
  const [open, setOpen] = useState(false)
  const [tiles, setTiles] = useState({})
  const [messages, setMessages] = useState([])
  const [input, setInput] = useState('')
  const [listening, setListening] = useState(false)
  const [loading, setLoading] = useState(false)
  const recognitionRef = useRef(null)
  const messagesEndRef = useRef(null)

  // Initialize speech recognition
  useEffect(() => {
    if (!SpeechRecognition) return
    const recog = new SpeechRecognition()
    recog.continuous = false
    recog.interimResults = false
    recog.lang = 'en-US'
    recog.onstart = () => setListening(true)
    recog.onend   = () => setListening(false)
    recog.onresult = e => {
      const text = e.results[0][0].transcript
      handleSend(text)
    }
    recognitionRef.current = recog
  }, [])

  // Load sample prompts
  useEffect(() => {
    setTiles(samplePrompts || {})
  }, [samplePrompts])

  // On open, show greeting + tiles
  useEffect(() => {
    if (open && messages.length === 0 && Object.keys(tiles).length) {
      setMessages([
        { from: 'bot', text: 'Hi! How can I help?' },
        { from: 'bot', options: Object.keys(tiles) }
      ])
    }
  }, [open, tiles, messages.length])

  // Auto-scroll
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })
  }, [messages, loading])

  // Send handler
  const handleSend = async (text) => {
    // Clear any ‚Äúpending‚Äù loading
    setLoading(true)
    setMessages(m => [...m, { from: 'user', text }])
    // Show analyzing bubble
    setMessages(m => [...m, { from: 'bot', text: 'Analyzing...', loading: true }])
    setInput('')

    try {
      const res = await axios.post(apiUrl, { message: text })
      // Remove the loading message
      setMessages(m => m.filter(msg => !msg.loading))
      // Push final response
      setMessages(m => [
        ...m,
        { from: 'bot', text: res.data.response }
      ])
    } catch {
      setMessages(m => m.filter(msg => !msg.loading))
      setMessages(m => [
        ...m,
        { from: 'bot', text: 'Server error.' }
      ])
    } finally {
      setLoading(false)
    }
  }

  const startListening = () => {
    if (!recognitionRef.current) return alert('SpeechRecognition not supported')
    recognitionRef.current.start()
  }

  const playAudio = async text => {
    try {
      const audioRes = await axios.get(
        apiUrl.replace(/\/chat$/, '') + '/text-to-speech',
        { params: { text }, responseType: 'blob' }
      )
      const url = URL.createObjectURL(audioRes.data)
      new Audio(url).play()
    } catch {}
  }

  return (
    <div
      className={`chatbot-widget ${open ? 'open' : ''}`}
      style={{ backgroundImage: `url(${backgroundImage})` }}
    >
      <div className="chat-header" onClick={() => setOpen(o => !o)}>
        {open ? '‚Äì‚Äì' : 'üí¨'}
      </div>

      {open && (
        <div className="chat-body">
          <div className="messages">
            {messages.map((m,i) =>
              m.options ? (
                <div key={i} className="bot-options">
                  {m.options.map((opt,j) => (
                    <button
                      key={j}
                      className="tile-btn"
                      onClick={() => handleSend(opt)}
                    >
                      {opt}
                    </button>
                  ))}
                </div>
              ) : (
                <div key={i} className={`bubble ${m.from}`}>
                  {m.text}
                  {'loading' in m && m.loading && (
                    <img src="/spinner.gif" alt="..." className="spinner" />
                  )}
                  {m.from === 'bot' && !m.loading && (
                    <button
                      className="read-btn"
                      onClick={() => playAudio(m.text)}
                    >üîä</button>
                  )}
                </div>
              )
            )}
            <div ref={messagesEndRef} />
          </div>

          <div className="chat-input">
            <div className="mic-wrapper" onClick={startListening}>
              {listening
                ? <img src="/wave.gif" alt="listening" className="wave-gif"/>
                : <span className="mic-icon">üéôÔ∏è</span>
              }
            </div>
            <input
              value={input}
              onChange={e=>setInput(e.target.value)}
              onKeyDown={e => e.key==='Enter' && input.trim() && handleSend(input)}
              placeholder="Ask, write or search for anything..."
            />
            <button
              className="send-btn"
              disabled={!input.trim() || loading}
              onClick={()=>handleSend(input)}
            >‚û§</button>
          </div>
        </div>
      )}
    </div>
  )
}
############################
.chatbot-widget {
  position: fixed;
  bottom: 20px; right: 20px;
  width: 340px; max-height: 480px;
  font-family: 'Helvetica Neue', sans-serif;
  z-index: 1000;
}

.chat-header {
  background: radial-gradient(circle at top left, #6c5ce7, #fd79a8);
  color: #fff; text-align: center;
  padding: 10px; border-radius: 24px; cursor: pointer;
  font-size: 1.2em;
}

.chat-body {
  background: #f7f8fc; border-radius: 16px;
  margin-top: 8px; display: flex; flex-direction: column;
  box-shadow: 0 8px 24px rgba(0,0,0,0.1);
  overflow: hidden;
  height: 100%;
}

.messages {
  flex: 1; overflow-y: auto; padding: 16px;
}

.bubble {
  display: inline-block;
  padding: 12px 16px;
  margin: 8px 0;
  border-radius: 20px;
  position: relative;
  max-width: 80%;
  font-size: 0.95em;
  line-height: 1.4;
}

.bubble.user {
  background: #dfe6e9;
  margin-left: auto;
}

.bubble.bot {
  background: #ffffff;
  margin-right: auto;
}

.bubble.bot::after {
  content: '';
  position: absolute;
  top: 50%; left: -8px;
  width: 0; height: 0;
  border-top: 8px solid transparent;
  border-right: 8px solid #fff;
  border-bottom: 8px solid transparent;
  transform: translateY(-50%);
}

.bubble.user::after {
  content: '';
  position: absolute;
  top: 50%; right: -8px;
  border-top: 8px solid transparent;
  border-left: 8px solid #dfe6e9;
  border-bottom: 8px solid transparent;
  transform: translateY(-50%);
}

.bot-options {
  display: flex; flex-wrap: wrap; gap: 8px; margin: 8px 0;
}

.tile-btn {
  background: linear-gradient(135deg,#74b9ff,#a29bfe);
  border: none; border-radius: 24px;
  padding: 8px 16px; color: white; cursor: pointer;
  font-size: 0.9em; box-shadow: 0 4px 12px rgba(0,0,0,0.1);
  transition: transform .1s;
}

.tile-btn:hover {
  transform: translateY(-2px);
}

.chat-input {
  display: flex; align-items: center; padding: 12px; border-top: 1px solid #e0e0e0;
}

.mic-wrapper {
  width: 36px; height: 36px; margin-right: 8px;
  display: flex; align-items: center; justify-content: center;
  cursor: pointer;
}

.mic-icon {
  font-size: 1.5em;
}

.wave-gif {
  width: 36px; height: 36px;
}

input {
  flex: 1; padding: 10px 14px;
  border: 1px solid #ccc; border-radius: 20px;
  font-size: 0.95em;
  outline: none;
}

.send-btn {
  margin-left: 8px; background: radial-gradient(circle at top left,#6c5ce7,#fd79a8);
  border: none; color: white; width: 36px; height: 36px;
  border-radius: 50%; cursor: pointer; font-size: 1.1em;
  display: flex; align-items: center; justify-content: center;
  box-shadow: 0 4px 12px rgba(0,0,0,0.1);
}

.spinner {
  width: 16px; height: 16px; margin-left: 8px;
  vertical-align: middle;
}
