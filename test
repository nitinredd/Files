import fitz  # PyMuPDF
import pytesseract
from PIL import Image
import os
import io
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.lib.utils import ImageReader

def pdf_to_images(pdf_path):
    """
    Convert PDF pages to images using PyMuPDF
    Returns a list of PIL Images
    """
    # Open the PDF
    pdf_document = fitz.open(pdf_path)
    
    images = []
    # Iterate through pages
    for page_num in range(pdf_document.page_count):
        page = pdf_document[page_num]
        
        # Convert page to image
        pix = page.get_pixmap()
        img_data = pix.tobytes("png")
        
        # Convert to PIL Image
        img = Image.open(io.BytesIO(img_data))
        images.append(img)
    
    pdf_document.close()
    return images

def process_images_and_create_pdf(images, output_path):
    """
    Perform OCR on images and create a new PDF with the OCR'd text overlay
    """
    # Configure Tesseract for Japanese
    pytesseract.pytesseract.tesseract_cmd = r'tesseract'  # Update this path if needed
    
    # Create a new PDF
    pdf = fitz.open()
    
    for image in images:
        # Perform OCR to get text and bounding boxes
        ocr_data = pytesseract.image_to_pdf_or_hocr(image, lang='jpn', extension='pdf')
        
        # Create a temporary PDF file with OCR results
        temp_pdf_path = "temp_ocr.pdf"
        with open(temp_pdf_path, "wb") as f:
            f.write(ocr_data)
        
        # Open the temporary PDF and append it to our main PDF
        temp_pdf = fitz.open(temp_pdf_path)
        pdf.insert_pdf(temp_pdf)
        temp_pdf.close()
        
        # Clean up temporary file
        os.remove(temp_pdf_path)
    
    # Save the final PDF
    pdf.save(output_path)
    pdf.close()

def main():
    # Input and output paths
    input_pdf = input("Enter the path to your PDF file: ")
    output_pdf = input("Enter the output PDF path (including .pdf extension): ")
    
    try:
        # Convert PDF to images
        print("Converting PDF to images...")
        images = pdf_to_images(input_pdf)
        
        # Process images and create searchable PDF
        print("Performing OCR and creating searchable PDF...")
        process_images_and_create_pdf(images, output_pdf)
        
        print(f"Processing complete! Check your output PDF: {output_pdf}")
        
    except Exception as e:
        print(f"An error occurred: {str(e)}")

if __name__ == "__main__":
    main()
