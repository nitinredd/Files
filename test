# Add these imports at top if not already present
import mimetypes
from fastapi import HTTPException
from fastapi.responses import Response, JSONResponse

# Replace /product/{product_id}/scheme-image route with this:
@app.get("/product/{product_id}/scheme-image")
def product_scheme_image(product_id: str):
    """
    Read image bytes and return an inline image response with explicit CORS header.
    This avoids FileResponse defaulting to attachment in some environments.
    """
    # Lookup product metadata (re-uses your helper)
    try:
        meta = product_meta(product_id)
    except Exception as e:
        raise HTTPException(status_code=404, detail="Product not found")

    path = meta.get("scheme_image")
    if not path:
        raise HTTPException(status_code=404, detail="Scheme image not configured for this product")

    if not os.path.exists(path):
        raise HTTPException(status_code=404, detail="Scheme image file not found on server")

    # Read bytes
    try:
        with open(path, "rb") as f:
            body = f.read()
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed reading scheme image: {str(e)}")

    # Determine content type
    ctype, _ = mimetypes.guess_type(path)
    if not ctype:
        ctype = "application/octet-stream"

    filename = os.path.basename(path)

    headers = {
        # Explicit CORS header for the frontend. Change to "*" if you prefer development wildcard.
        "Access-Control-Allow-Origin": "http://localhost:5173",
        # Inline disposition so browsers render the image instead of downloading it
        "Content-Disposition": f'inline; filename="{filename}"',
        # We also include cache control so browser doesn't serve stale old headers
        "Cache-Control": "no-cache, no-store, must-revalidate",
    }

    return Response(content=body, media_type=ctype, headers=headers)
