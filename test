
=== Generating suggestion 1/2 ===
Starting optimization with 11 existing rows
Domain has 0 input vars, 2 objectives
Domain input variables: []
Domain objectives: ['Purity', 'impurity']
Original DataFrame columns: ['Equivalence1', 'Equivalence2', 'Equivalence3', 'Residencetime', 'ReactionTemperature', 'Reactiontime', 'FlowratesofPump1', 'FlowratesofPump2', 'FlowratesofPump3', 'FlowratesofPump4', 'TotalFlowrate', 'Purity', 'impurity']
Mapped objective Purity -> Purity
Mapped objective impurity -> impurity
Clean DataFrame shape: (11, 2)
Clean DataFrame columns: ['Purity', 'impurity']
Valid rows for optimization: 0
WARNING: No valid data rows found for optimization - generating random suggestion
ERROR generating suggestion 1: list index out of range
Traceback (most recent call last):
  File "C:\Users\T00009590\Documents\Current Applications\cloud_sor\self_optimization_reactions\server\utils.py", line 447, in suggest_experiments_and_append
    out = run_summit_optimization(domain, lhs, len(objectives) or 1)
  File "C:\Users\T00009590\Documents\Current Applications\cloud_sor\self_optimization_reactions\server\utils.py", line 354, in run_summit_optimization
    print(f"Generated random suggestion: {out.to_dict('records')[0]}")
IndexError: list index out of range
Using fallback row with all NaN: {'Equivalence1': nan, 'Equivalence2': nan, 'Equivalence3': nan, 'Residencetime': nan, 'ReactionTemperature': nan, 'Reactiontime': nan, 'FlowratesofPump1': nan, 'FlowratesofPump2': nan, 'FlowratesofPump3': nan, 'FlowratesofPump4': nan, 'TotalFlowrate': nan, 'Purity': nan, 'impurity': nan}

=== Generating suggestion 2/2 ===
Starting optimization with 12 existing rows
Domain has 0 input vars, 2 objectives
Domain input variables: []
Domain objectives: ['Purity', 'impurity']
Original DataFrame columns: ['Equivalence1', 'Equivalence2', 'Equivalence3', 'Residencetime', 'ReactionTemperature', 'Reactiontime', 'FlowratesofPump1', 'FlowratesofPump2', 'FlowratesofPump3', 'FlowratesofPump4', 'TotalFlowrate', 'Purity', 'impurity']
Mapped objective Purity -> Purity
Mapped objective impurity -> impurity
Clean DataFrame shape: (12, 2)
Clean DataFrame columns: ['Purity', 'impurity']
Valid rows for optimization: 0
WARNING: No valid data rows found for optimization - generating random suggestion
ERROR generating suggestion 2: list index out of range
Traceback (most recent call last):
  File "C:\Users\T00009590\Documents\Current Applications\cloud_sor\self_optimization_reactions\server\utils.py", line 447, in suggest_experiments_and_append
    out = run_summit_optimization(domain, lhs, len(objectives) or 1)
  File "C:\Users\T00009590\Documents\Current Applications\cloud_sor\self_optimization_reactions\server\utils.py", line 354, in run_summit_optimization
    print(f"Generated random suggestion: {out.to_dict('records')[0]}")
IndexError: list index out of range
Using fallback row with all NaN: {'Equivalence1': nan, 'Equivalence2': nan, 'Equivalence3': nan, 'Residencetime': nan, 'ReactionTemperature': nan, 'Reactiontime': nan, 'FlowratesofPump1': nan, 'FlowratesofPump2': nan, 'FlowratesofPump3': nan, 'FlowratesofPump4': nan, 'TotalFlowrate': nan, 'Purity': nan, 'impurity': nan}

=== Final result: 2 suggestions added ===
   Equivalence1 Equivalence2 Equivalence3 Residencetime ReactionTemperature Reactiontime  ... FlowratesofPump2 FlowratesofPump3 FlowratesofPump4 TotalFlowrate    Purity  impurity
0        2.4975       7.3669       2.7092        2.4703             59.6326       9.2873  ...           0.7013           0.9306           1.4406        4.0480 -0.133937  0.155176
1        2.3185       8.9555       2.0571        2.7640             49.7577      10.2134  ...           0.7897           0.6545           1.3346        3.6179 -0.133937  0.155176
2        2.2971      10.4607       2.2834        1.9790             37.9257       7.1755  ...           1.2218           0.9624           1.7677        5.0529 -0.133937  0.155176
3        2.8075      11.8161       2.9990        1.7732             42.2541       6.2048  ...           1.3519           1.2380           1.7315        5.6395 -0.133937  0.155176
4        1.5698       7.9803       1.5684        2.3399             54.5165       9.3000  ...           0.9685           0.6868           1.8366        4.2736 -0.133937  0.155176
5        1.9429       9.6330       1.8575        1.7367             62.4523       6.5001  ...           1.4063           0.9784           2.2093        5.7579 -0.133937  0.155176
6        2.6346       6.7571       1.9708        2.7167             59.4255      10.1775  ...           0.6247           0.6575           1.3992        3.6810 -0.133937  0.155176
7        2.1515      11.2179       2.5553        2.9064             36.4348      10.5342  ...           0.8693           0.7145           1.1728        3.4407 -0.133937  0.155176
8        2.8645       8.6566       2.8332        2.0713             46.8278       7.4882  ...           0.9131           1.0784           1.5964        4.8278 -0.133937  0.155176
9        1.8721       6.4046       2.3908        2.2940             44.6632       9.1980  ...           0.7377           0.9936           1.7431        4.3592 -0.133937  0.155176
10       1.6420      10.3384       1.7197        1.5859             54.0877       5.9865  ...           1.6970           1.0185           2.4841        6.3056 -0.133937  0.155176
11          NaN          NaN          NaN           NaN                 NaN          NaN  ...              NaN              NaN              NaN           NaN       NaN       NaN
12          NaN          NaN          NaN           NaN                 NaN          NaN  ...              NaN              NaN              NaN           NaN       NaN       NaN

[13 rows x 13 columns] ++++++++
INFO:     127.0.0.1:49666 - "OPTIONS /sor/api/result/68d3a0beb27d3006837dab01 HTTP/1.1" 200 OK
INFO:     127.0.0.1:49666 - "GET /sor/api/result/68d3a0beb27d3006837dab01 HTTP/1.1" 200 OK
12
11
Building domain...
Domain created successfully
Domain has 11 input variables and 2 objectives
Input variables: ['Equivalence1', 'Equivalence2', 'Equivalence3', 'Residencetime', 'ReactionTemperature', 'Reactiontime', 'FlowratesofPump1', 'FlowratesofPump2', 'FlowratesofPump3', 'FlowratesofPump4', 'TotalFlowrate']
Objective variables: ['Purity', 'impurity']

=== Generating suggestion 1/2 ===
Starting optimization with 11 existing rows
Domain has 11 input vars, 2 objectives
Domain input variables: ['Equivalence1', 'Equivalence2', 'Equivalence3', 'Residencetime', 'ReactionTemperature', 'Reactiontime', 'FlowratesofPump1', 'FlowratesofPump2', 'FlowratesofPump3', 'FlowratesofPump4', 'TotalFlowrate']
Domain objectives: ['Purity', 'impurity']
Original DataFrame columns: ['Equivalence1', 'Equivalence2', 'Equivalence3', 'Residencetime', 'ReactionTemperature', 'Reactiontime', 'FlowratesofPump1', 'FlowratesofPump2', 'FlowratesofPump3', 'FlowratesofPump4', 'TotalFlowrate', 'Purity', 'impurity']
Mapped Equivalence1 -> Equivalence1
Mapped Equivalence2 -> Equivalence2
Mapped Equivalence3 -> Equivalence3
Mapped Residencetime -> Residencetime
Mapped ReactionTemperature -> ReactionTemperature
Mapped Reactiontime -> Reactiontime
Mapped FlowratesofPump1 -> FlowratesofPump1
Mapped FlowratesofPump2 -> FlowratesofPump2
Mapped FlowratesofPump3 -> FlowratesofPump3
Mapped FlowratesofPump4 -> FlowratesofPump4
Mapped TotalFlowrate -> TotalFlowrate
Mapped objective Purity -> Purity
Mapped objective impurity -> impurity
Clean DataFrame shape: (11, 13)
Clean DataFrame columns: ['Equivalence1', 'Equivalence2', 'Equivalence3', 'Residencetime', 'ReactionTemperature', 'Reactiontime', 'FlowratesofPump1', 'FlowratesofPump2', 'FlowratesofPump3', 'FlowratesofPump4', 'TotalFlowrate', 'Purity', 'impurity']
Valid rows for optimization: 11
Creating DataSet...
DataSet created successfully with 11 rows
Trying TSEMO optimization...
Variable(name=Purity, description=Purity) *************************************
Variable(name=impurity, description=impurity) *************************************
C:\Users\T00009590\AppData\Local\miniconda3\envs\sorOldEnv\lib\site-packages\botorch\models\utils\assorted.py:201: InputDataWarning: Input data is not standardized. Please consider scaling the input to zero mean and unit variance.
  warnings.warn(msg, InputDataWarning)
C:\Users\T00009590\AppData\Local\miniconda3\envs\sorOldEnv\lib\site-packages\botorch\models\utils\assorted.py:201: InputDataWarning: Input data is not standardized. Please consider scaling the input to zero mean and unit variance.
  warnings.warn(msg, InputDataWarning)
TSEMO optimization successful
C:\Users\T00009590\Documents\Current Applications\cloud_sor\self_optimization_reactions\server\utils.py:420: PerformanceWarning: dropping on a non-lexsorted multi-index without a level parameter may impact performance.
  out = out.drop(columns=["strategy"])
Final optimization output shape: (1, 41)
ERROR generating suggestion 1: to_dict() takes 1 positional argument but 2 were given
Traceback (most recent call last):
  File "C:\Users\T00009590\Documents\Current Applications\cloud_sor\self_optimization_reactions\server\utils.py", line 447, in suggest_experiments_and_append
    out = run_summit_optimization(domain, lhs, len(objectives) or 1)
  File "C:\Users\T00009590\Documents\Current Applications\cloud_sor\self_optimization_reactions\server\utils.py", line 423, in run_summit_optimization
    print(f"Final optimization output: {out.to_dict('records')[0] if len(out) > 0 else 'EMPTY'}")
TypeError: to_dict() takes 1 positional argument but 2 were given
Using fallback row with all NaN: {'Equivalence1': nan, 'Equivalence2': nan, 'Equivalence3': nan, 'Residencetime': nan, 'ReactionTemperature': nan, 'Reactiontime': nan, 'FlowratesofPump1': nan, 'FlowratesofPump2': nan, 'FlowratesofPump3': nan, 'FlowratesofPump4': nan, 'TotalFlowrate': nan, 'Purity': nan, 'impurity': nan}

=== Generating suggestion 2/2 ===
Starting optimization with 12 existing rows
Domain has 11 input vars, 2 objectives
Domain input variables: ['Equivalence1', 'Equivalence2', 'Equivalence3', 'Residencetime', 'ReactionTemperature', 'Reactiontime', 'FlowratesofPump1', 'FlowratesofPump2', 'FlowratesofPump3', 'FlowratesofPump4', 'TotalFlowrate']
Domain objectives: ['Purity', 'impurity']
Original DataFrame columns: ['Equivalence1', 'Equivalence2', 'Equivalence3', 'Residencetime', 'ReactionTemperature', 'Reactiontime', 'FlowratesofPump1', 'FlowratesofPump2', 'FlowratesofPump3', 'FlowratesofPump4', 'TotalFlowrate', 'Purity', 'impurity']
Mapped Equivalence1 -> Equivalence1
Mapped Equivalence2 -> Equivalence2
Mapped Equivalence3 -> Equivalence3
Mapped Residencetime -> Residencetime
Mapped ReactionTemperature -> ReactionTemperature
Mapped Reactiontime -> Reactiontime
Mapped FlowratesofPump1 -> FlowratesofPump1
Mapped FlowratesofPump2 -> FlowratesofPump2
Mapped FlowratesofPump3 -> FlowratesofPump3
Mapped FlowratesofPump4 -> FlowratesofPump4
Mapped TotalFlowrate -> TotalFlowrate
Mapped objective Purity -> Purity
Mapped objective impurity -> impurity
Clean DataFrame shape: (12, 13)
Clean DataFrame columns: ['Equivalence1', 'Equivalence2', 'Equivalence3', 'Residencetime', 'ReactionTemperature', 'Reactiontime', 'FlowratesofPump1', 'FlowratesofPump2', 'FlowratesofPump3', 'FlowratesofPump4', 'TotalFlowrate', 'Purity', 'impurity']
Valid rows for optimization: 11
Creating DataSet...
DataSet created successfully with 11 rows
Trying TSEMO optimization...
Variable(name=Purity, description=Purity) *************************************
Variable(name=impurity, description=impurity) *************************************
C:\Users\T00009590\AppData\Local\miniconda3\envs\sorOldEnv\lib\site-packages\botorch\models\utils\assorted.py:201: InputDataWarning: Input data is not standardized. Please consider scaling the input to zero mean and unit variance.
  warnings.warn(msg, InputDataWarning)
C:\Users\T00009590\AppData\Local\miniconda3\envs\sorOldEnv\lib\site-packages\botorch\models\utils\assorted.py:201: InputDataWarning: Input data is not standardized. Please consider scaling the input to zero mean and unit variance.
  warnings.warn(msg, InputDataWarning)
TSEMO optimization successful
C:\Users\T00009590\Documents\Current Applications\cloud_sor\self_optimization_reactions\server\utils.py:420: PerformanceWarning: dropping on a non-lexsorted multi-index without a level parameter may impact performance.
  out = out.drop(columns=["strategy"])
Final optimization output shape: (1, 41)
ERROR generating suggestion 2: to_dict() takes 1 positional argument but 2 were given
Traceback (most recent call last):
  File "C:\Users\T00009590\Documents\Current Applications\cloud_sor\self_optimization_reactions\server\utils.py", line 447, in suggest_experiments_and_append
    out = run_summit_optimization(domain, lhs, len(objectives) or 1)
  File "C:\Users\T00009590\Documents\Current Applications\cloud_sor\self_optimization_reactions\server\utils.py", line 423, in run_summit_optimization
    print(f"Final optimization output: {out.to_dict('records')[0] if len(out) > 0 else 'EMPTY'}")
TypeError: to_dict() takes 1 positional argument but 2 were given
Using fallback row with all NaN: {'Equivalence1': nan, 'Equivalence2': nan, 'Equivalence3': nan, 'Residencetime': nan, 'ReactionTemperature': nan, 'Reactiontime': nan, 'FlowratesofPump1': nan, 'FlowratesofPump2': nan, 'FlowratesofPump3': nan, 'FlowratesofPump4': nan, 'TotalFlowrate': nan, 'Purity': nan, 'impurity': nan}

=== Final result: 2 suggestions added ===
    Equivalence1  Equivalence2  Equivalence3  Residencetime  ReactionTemperature  ...  FlowratesofPump3  FlowratesofPump4  TotalFlowrate    Purity  impurity
0         2.4975        7.3669        2.7092         2.4703              59.6326  ...            0.9306            1.4406         4.0480 -0.133937  0.155176
1         2.3185        8.9555        2.0571         2.7640              49.7577  ...            0.6545            1.3346         3.6179 -0.133937  0.155176
2         2.2971       10.4607        2.2834         1.9790              37.9257  ...            0.9624            1.7677         5.0529 -0.133937  0.155176
3         2.8075       11.8161        2.9990         1.7732              42.2541  ...            1.2380            1.7315         5.6395 -0.133937  0.155176
4         1.5698        7.9803        1.5684         2.3399              54.5165  ...            0.6868            1.8366         4.2736 -0.133937  0.155176
5         1.9429        9.6330        1.8575         1.7367              62.4523  ...            0.9784            2.2093         5.7579 -0.133937  0.155176
6         2.6346        6.7571        1.9708         2.7167              59.4255  ...            0.6575            1.3992         3.6810 -0.133937  0.155176
7         2.1515       11.2179        2.5553         2.9064              36.4348  ...            0.7145            1.1728         3.4407 -0.133937  0.155176
8         2.8645        8.6566        2.8332         2.0713              46.8278  ...            1.0784            1.5964         4.8278 -0.133937  0.155176
9         1.8721        6.4046        2.3908         2.2940              44.6632  ...            0.9936            1.7431         4.3592 -0.133937  0.155176
10        1.6420       10.3384        1.7197         1.5859              54.0877  ...            1.0185            2.4841         6.3056 -0.133937  0.155176
11           NaN           NaN           NaN            NaN                  NaN  ...               NaN               NaN            NaN       NaN       NaN
12           NaN           NaN           NaN            NaN                  NaN  ...               NaN               NaN            NaN       NaN       NaN

[13 rows x 13 columns] -----------------------------
INFO:     127.0.0.1:60623 - "OPTIONS /sor/api/result/68d3a0beb27d3006837dab01 HTTP/1.1" 200 OK
INFO:     127.0.0.1:60623 - "GET /sor/api/result/68d3a0beb27d3006837dab01 HTTP/1.1" 200 OK
