def create_annotated_image(original_image, zone_results, gemini_analysis):
    # Convert grayscale to RGB if necessary
    if len(original_image.shape) == 2:
        original_image = cv2.cvtColor(original_image, cv2.COLOR_GRAY2RGB)
    
    # Create a PIL Image from the numpy array
    pil_image = Image.fromarray(cv2.cvtColor(original_image, cv2.COLOR_BGR2RGB))
    draw = ImageDraw.Draw(pil_image)
    
    # Use a default font
    font = ImageFont.load_default()
    
    # Draw zone boundaries
    height, width = original_image.shape[:2]
    zone_width = width // 3
    for i in range(1, 3):
        x = i * zone_width
        draw.line([(x, 0), (x, height)], fill="red", width=2)
    
    # Add zone labels
    zone_labels = ["Dry Zone", "Wet Zone", "Optimum Zone"]
    for i, label in enumerate(zone_labels):
        x = i * zone_width + zone_width // 2
        draw.text((x, 10), label, fill="red", font=font, anchor="mt")
    
    # Draw tablet boundaries and porosity percentages for each zone
    for zone_name, tablets in zone_results.items():
        zone_index = zone_labels.index(zone_name)
        zone_start = zone_index * zone_width
        
        for tablet in tablets:
            start, end = zone_start + tablet['start'], zone_start + tablet['end']
            draw.line([(start, 0), (start, height)], fill="blue", width=1)
            draw.line([(end, 0), (end, height)], fill="blue", width=1)
            
            y_pos = 40
            for category, percentage in tablet['percentages'].items():
                text = f"{category}: {percentage:.2f}%"
                draw.text((start + 5, y_pos), text, fill="blue", font=font)
                y_pos += 20
            
            draw.text((start + 5, y_pos), f"Contrast: {tablet['contrast']:.2f}", fill="blue", font=font)
            y_pos += 20
            draw.text((start + 5, y_pos), f"Homogeneity: {tablet['homogeneity']:.2f}", fill="blue", font=font)
    
    # Add Gemini analysis to the bottom of the image
    if gemini_analysis:
        # Calculate text size and position
        lines = gemini_analysis.split('\n')
        max_width = 0
        total_height = 0
        for line in lines:
            left, top, right, bottom = font.getbbox(line)
            max_width = max(max_width, right - left)
            total_height += bottom - top

        text_position = (10, height - total_height - 10)
        
        # Add a semi-transparent background for text readability
        draw.rectangle([text_position, (width, height)], fill=(255, 255, 255, 128))
        
        # Draw the text
        current_y = text_position[1]
        for line in lines:
            draw.text((text_position[0], current_y), line, fill="black", font=font)
            left, top, right, bottom = font.getbbox(line)
            current_y += bottom - top
    
    return pil_image
