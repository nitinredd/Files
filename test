# excel_chatbot.py

import re
import os
import json
import pandas as pd
import streamlit as st
from typing import Dict, Any

# ---------- CONFIGURE YOUR EXCEL FILES HERE ----------
EXCEL_PATHS = [
    "formula master_osd.xlsx",
    "masterlist osd equipments.xlsx",
]
# ------------------------------------------------------

# ---------- AGENTS ----------

class IntentAgent:
    """Parses a natural-language query into structured intent."""
    @staticmethod
    def handle(query: str) -> Dict[str, str]:
        # Regex‐based extraction for equipment, plant
        eq = re.search(r"equipment\s+(\w+)", query, re.I)
        pl = re.search(r"plant\s+(\w+)", query, re.I)
        # Parameter = everything after the word "range" or after equipment/plant
        param = query
        if eq:
            param = param.replace(eq.group(1), "")
        if pl:
            param = param.replace(pl.group(1), "")
        param = re.sub(r"\b(what|is|the|in|for|of|range|unit|operation)\b", "", param, flags=re.I).strip()
        return {
            "equipment": eq.group(1) if eq else "",
            "plant":     pl.group(1) if pl else "",
            "parameter": param
        }

class SchemaAgent:
    """Validates sheets & columns exist, and picks the right sheet/cols."""
    def __init__(self, sheets: Dict[str, pd.DataFrame]):
        self.sheets = sheets

    def handle(self, intent: Dict[str,str]) -> Dict[str,Any]:
        # Find a sheet that contains both equipment & plant columns
        # and at least one column matching the parameter phrase.
        best = {}
        for name, df in self.sheets.items():
            cols = [c.lower() for c in df.columns]
            if intent["equipment"] and not any("equipment" in c for c in cols):
                continue
            if intent["plant"]     and not any("plant"     in c for c in cols):
                continue
            # parameter match: substring in column name
            matches = [c for c in df.columns if intent["parameter"].lower() in c.lower()]
            if matches:
                best = {
                    "sheet":  name,
                    "filters":{"equipment": intent["equipment"], "plant": intent["plant"]},
                    "columns": matches
                }
                break
        return best

class DataAgent:
    """Applies the filters & selects only those columns."""
    def __init__(self, sheets: Dict[str,pd.DataFrame]):
        self.sheets = sheets

    def handle(self, schema_map: Dict[str,Any]) -> pd.DataFrame:
        name = schema_map["sheet"]
        df   = self.sheets[name]
        f    = schema_map["filters"]
        # filter equipment & plant
        if f["equipment"]:
            eq_col = next(c for c in df.columns if "equipment" in c.lower())
            df = df[df[eq_col].astype(str).str.contains(f["equipment"], case=False)]
        if f["plant"]:
            pl_col = next(c for c in df.columns if "plant" in c.lower())
            df = df[df[pl_col].astype(str).str.contains(f["plant"], case=False)]
        return df[schema_map["columns"]]

class ResponseAgent:
    """Formats the final DataFrame into markdown."""
    @staticmethod
    def handle(df: pd.DataFrame) -> str:
        if df.empty:
            return "No matching data found."
        return df.to_markdown(index=False)

# ---------- STREAMLIT UI ----------

# Load sheets once
@st.cache_data
def load_sheets(paths):
    sheets = {}
    for p in paths:
        if not os.path.exists(p):
            st.error(f"File not found: {p}")
            continue
        xl = pd.ExcelFile(p)
        for s in xl.sheet_names:
            sheets[s] = xl.parse(s)
    return sheets

sheets = load_sheets(EXCEL_PATHS)
schema_agent = SchemaAgent(sheets)
data_agent   = DataAgent(sheets)

st.title("Excel Multi-Agent Chatbot")
st.markdown("Ask questions like: *What is the impeller speed range in unit operation RMG for the equipment Glatt in Plant F20?*")

query = st.text_input("Your question:")
if st.button("Ask") and query.strip():
    intent = IntentAgent.handle(query)
    schema_map = schema_agent.handle(intent)
    if not schema_map:
        st.error("Couldn’t map your question to any sheet/columns. Please check spelling and schema.")
    else:
        df = data_agent.handle(schema_map)
        response = ResponseAgent.handle(df)
        st.markdown(response)
