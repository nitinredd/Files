// src/components/ChatInput.jsx
import React, { useState, useEffect, useRef } from "react";
import { PaperAirplaneIcon, MicrophoneIcon } from "@heroicons/react/24/outline";
import { motion } from "framer-motion";

export default function ChatInput({ onSend, placeholder = "Ask about reaction chemistry..." }) {
  const [text, setText] = useState("");
  const [listening, setListening] = useState(false);
  const listeningTimerRef = useRef(null);
  const textareaRef = useRef(null);

  useEffect(() => {
    return () => {
      if (listeningTimerRef.current) clearTimeout(listeningTimerRef.current);
    };
  }, []);

  const handleSend = () => {
    if (!text.trim()) return;
    onSend(text.trim());
    setText("");
  };

  const handleMic = () => {
    if (listening) {
      // stop listening immediately (if we were simulating)
      setListening(false);
      if (listeningTimerRef.current) clearTimeout(listeningTimerRef.current);
      return;
    }

    // start a short simulated "listening" session
    setListening(true);

    // Simulate STT result after a short interval and populate input (dummy)
    listeningTimerRef.current = setTimeout(() => {
      const simulated = "Simulated speech input â€” please edit if needed";
      setText(simulated);
      setListening(false);

      // focus the textarea so user sees and can edit
      textareaRef.current?.focus();
    }, 1000); // 1s simulated listen
  };

  return (
    <div className="p-4 bg-white border-t flex gap-3 items-center">
      {/* Mic button */}
      <motion.button
        onClick={handleMic}
        whileTap={{ scale: 0.95 }}
        className={`rounded-full p-2 flex items-center justify-center border ${listening ? "bg-red-50 border-red-300" : "bg-gray-50 border-gray-200"}`}
        aria-label="Microphone (simulate STT)"
        title="Simulate voice input"
      >
        <motion.div
          animate={listening ? { scale: [1, 1.15, 1] } : { scale: 1 }}
          transition={listening ? { duration: 0.9, repeat: Infinity } : { duration: 0.1 }}
          className="relative flex items-center justify-center"
        >
          <MicrophoneIcon className={`w-5 h-5 ${listening ? "text-red-500" : "text-gray-500"}`} />
          {listening && (
            <span className="absolute -right-2 -top-2 w-2.5 h-2.5 bg-red-500 rounded-full shadow animate-pulse" />
          )}
        </motion.div>
      </motion.button>

      {/* Textarea */}
      <textarea
        ref={textareaRef}
        rows={1}
        value={text}
        onChange={(e) => setText(e.target.value)}
        onKeyDown={(e) => { if (e.key === "Enter" && !e.shiftKey) { e.preventDefault(); handleSend(); } }}
        className="flex-1 rounded-2xl border border-gray-200 bg-gray-50 px-4 py-3 focus:outline-none focus:ring-2 focus:ring-brandPurple-200 resize-none min-h-[44px]"
        placeholder={placeholder}
      />

      {/* Send button */}
      <motion.button
        whileTap={{ scale: 0.95 }}
        onClick={handleSend}
        className="bg-brandPurple-500 hover:bg-brandPurple-600 text-white p-3 rounded-full shadow flex items-center justify-center"
        aria-label="Send"
      >
        <PaperAirplaneIcon className="w-5 h-5" />
      </motion.button>
    </div>
  );
}
