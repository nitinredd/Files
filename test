import os
import io
import streamlit as st
import pandas as pd
import time
import google.auth
from vertexai.preview.generative_models import GenerativeModel, SafetySetting, HarmCategory, HarmBlockThreshold

# --- Gemini setup ---
os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "D:/datascience-254609-genai.json"
credentials, project_id = google.auth.default()
multimodal_model = GenerativeModel("gemini-2.0-flash-thinking-exp-01-21")
safety_config = [
    SafetySetting(category=HarmCategory.HARM_CATEGORY_UNSPECIFIED, threshold=HarmBlockThreshold.BLOCK_NONE),
    SafetySetting(category=HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT, threshold=HarmBlockThreshold.BLOCK_NONE),
    SafetySetting(category=HarmCategory.HARM_CATEGORY_HARASSMENT, threshold=HarmBlockThreshold.BLOCK_NONE),
    SafetySetting(category=HarmCategory.HARM_CATEGORY_HATE_SPEECH, threshold=HarmBlockThreshold.BLOCK_NONE),
    SafetySetting(category=HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT, threshold=HarmBlockThreshold.BLOCK_NONE),
]

def safe_gemini_call(prompt_text, max_retries=3, delay=2):
    for attempt in range(max_retries):
        try:
            return multimodal_model.generate_content([prompt_text], safety_settings=safety_config)
        except Exception:
            time.sleep(delay)
    st.error("Gemini call failed after retries.")
    return None

st.set_page_config(page_title="SOR Phase I - Flowrate Calculator", layout="wide")
st.title("ðŸ”¬ SOR Phase I: Gemini Flowrate Calculator")

# Upload and preview
master = st.file_uploader("Upload Master Excel (LHS, Pump, Reactor Details)", type=["xlsx"])
if master:
    xls = pd.ExcelFile(master)
    df_lhs = pd.read_excel(xls, sheet_name="LHS")
    df_pump = pd.read_excel(xls, sheet_name="Pump Details")
    df_reactor = pd.read_excel(xls, sheet_name="Reactor Details", header=None)
    st.subheader("Edit LHS and Pump sheets as needed")
    st.data_editor(df_lhs, num_rows="dynamic", key="lhs_editor")
    st.data_editor(df_pump, num_rows="dynamic", key="pump_editor")
    st.data_editor(df_reactor, num_rows="dynamic", key="reactor_editor")
    # capture edits
    lhs_df = st.session_state.lhs_editor
    pump_df = st.session_state.pump_editor
    reactor_df = st.session_state.reactor_editor

    n_exp = lhs_df.shape[0]

    st.subheader("ðŸ’¬ Describe your setup in plain English")
    prompt = st.text_area("Enter prompt to Gemini:", height=150,
                          placeholder="E.g., 'Compute flowrates for 3 reagent pumps and 1 quench pump using Equivalence/Molarity with reaction time = ResidenceTimeT1 Ã— steady-state factor.'")

    if st.button("ðŸ¤– Gemini Compute Flowrates"):
        if not prompt:
            st.error("Please enter a description of your reaction and flowrate requirements.")
        else:
            # instruct Gemini for exact table output
            full_prompt = (
                f"Given this master Excel with {n_exp} experiments (LHS and pump/reactor tables visible), "
                "compute a table with columns: all LHS columns (Equivalence1, Equivalence2, ..., ResidenceTimeT1, ResidenceTimeT2, ReactionTemperature1, ReactionTemperature2), "
                "Reaction Time, Flowrate of Pump1, Flowrate of Pump2, Flowrate of Pump3, and if present Flowrate of Pump4, and Total Flowrate. "
                "Return ONLY the raw CSV without explanation, matching the Excel format." 
                f"Here is the prompt: {prompt}"
            )
            response = safe_gemini_call(full_prompt)
            if response:
                # parse CSV text into DataFrame
                csv_text = response.text.strip()
                try:
                    result_df = pd.read_csv(io.StringIO(csv_text))
                    st.subheader("ðŸ“Š Gemini-generated Flowrate Results")
                    st.dataframe(result_df)
                    # download
                    towrite = io.BytesIO()
                    result_df.to_excel(towrite, index=False, sheet_name="Results")
                    towrite.seek(0)
                    st.download_button("ðŸ“¥ Download SOR_RESULT.xlsx", data=towrite,
                                       file_name="SOR_RESULT.xlsx",
                                       mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
                except Exception as e:
                    st.error(f"Failed to parse Gemini output as CSV: {e}")
else:
    st.info("Please upload your master Excel file to begin.")
