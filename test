def check_regulatory_compliance(seq, regulation, ref_means, test_means):
    """
    Check if a candidate sequence satisfies the selected regulatory rules.
    Revised rules:
      - FDA:
          * For each of reference and test, exactly one time point must have dissolution ≥85%.
      - EMA:
          * Across reference or test, at most one time point may be ≥85%.
          * At least 4 time points are required.
      - China:
          * For the reference, exactly one time point must be "around 85%" (i.e. between 84 and 86)
            and all other time points must be below 85%.
      - ASEAN:
          * There must be at least 3 time points collected before 15 minutes.
          * At the 15-minute time point (if present), the reference dissolution should be close to 80%
            (here defined as between 75 and 85).
          * Across both reference and test, only one time point in the full profile may be ≥85%.
      - ANVISA:
          * The collection must have at least 5 time points.
          * The first time point must be 0.
          * Across reference and test, only one time point may be ≥85%.
          * For f2 calculation, use the first 3 time points (excluding the 0 time point);
            these “earlier time points” should be around 40% (here defined as between 35 and 45).
    Returns a tuple (compliant, reasons) where compliant is a boolean and reasons is a list of strings.
    """
    compliant = True
    reasons = []
    
    if regulation == "FDA":
        # Count time points with ≥85% dissolution for both reference and test separately.
        ref_count = sum(1 for t in seq if ref_means[t] >= 85)
        test_count = sum(1 for t in seq if test_means[t] >= 85)
        if ref_count != 1:
            compliant = False
            reasons.append(f"Reference must have exactly one time point ≥85% (found {ref_count}).")
        if test_count != 1:
            compliant = False
            reasons.append(f"Test must have exactly one time point ≥85% (found {test_count}).")
    
    elif regulation == "EMA":
        # Combined count: only one time point overall may be ≥85%
        combined_count = sum(1 for t in seq if ref_means[t] >= 85 or test_means[t] >= 85)
        if combined_count > 1:
            compliant = False
            reasons.append("More than one time point ≥85% detected across reference/test.")
        if len(seq) < 4:
            compliant = False
            reasons.append("Insufficient time points (<4).")
    
    elif regulation == "China":
        # For reference: exactly one time point must be around 85% (between 84 and 86) 
        # and all others must be below 85%.
        around_85 = [t for t in seq if 84 <= ref_means[t] <= 86]
        above_85 = [t for t in seq if ref_means[t] > 85]
        if len(around_85) != 1:
            compliant = False
            reasons.append(f"Reference must have exactly one time point around 85% (found {len(around_85)}).")
        # Even if one time point is around 85, any other time point ≥85 is not allowed.
        if len(above_85) - len(around_85) > 0:
            compliant = False
            reasons.append("Other reference time points above 85% detected.")
    
    elif regulation == "ASEAN":
        # At least 3 time points must be before 15 minutes.
        before_15 = [t for t in seq if t < 15]
        if len(before_15) < 3:
            compliant = False
            reasons.append("Fewer than 3 time points collected before 15 minutes.")
        # At the 15-minute time point, reference should be close to 80% (between 75 and 85) if present.
        if 15 in seq:
            if not (75 <= ref_means[15] <= 85):
                compliant = False
                reasons.append("At 15 minutes, reference dissolution is not close to 80%.")
        # Combined count for any dissolution ≥85% (both reference and test) must be only one.
        combined_count = sum(1 for t in seq if ref_means[t] >= 85 or test_means[t] >= 85)
        if combined_count != 1:
            compliant = False
            reasons.append(f"ASEAN profile must have exactly one time point ≥85% (found {combined_count}).")
    
    elif regulation == "ANVISA":
        # Must have at least 5 time points.
        if len(seq) < 5:
            compliant = False
            reasons.append("Less than 5 time points collected.")
        # The first time point must be 0.
        if seq[0] != 0:
            compliant = False
            reasons.append("The first time point must be 0.")
        # Combined count for any dissolution ≥85% (both reference and test) must be only one.
        combined_count = sum(1 for t in seq if ref_means[t] >= 85 or test_means[t] >= 85)
        if combined_count != 1:
            compliant = False
            reasons.append(f"ANVISA profile must have exactly one time point ≥85% (found {combined_count}).")
        # For f2 calculation, use the first 3 time points (excluding the 0 time point);
        # these early time points should be around 40% (between 35 and 45).
        nonzero_points = [t for t in seq if t != 0]
        early_points = nonzero_points[:3]
        for t in early_points:
            if not (35 <= ref_means[t] <= 45 and 35 <= test_means[t] <= 45):
                compliant = False
                reasons.append(f"Early time point at t={t} not around 40% for both reference and test.")
    
    return (compliant, reasons)
