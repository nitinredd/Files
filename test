import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import plotly.graph_objects as go
from scipy.integrate import solve_ivp
from scipy.optimize import curve_fit
from sklearn.metrics import r2_score, mean_absolute_error
from bayes_opt import BayesianOptimization

# Initialize session state for parameter persistence
if 'D' not in st.session_state:
    st.session_state.D = 0.1
if 'calculated_D' not in st.session_state:
    st.session_state.calculated_D = None

# ---------------------- Enhanced Drug Release Models ----------------------
MODELS = {
    "Fickian Diffusion": {
        "function": lambda t, D, R: 1 - (6/np.pi**2) * np.sum([np.exp(-D*(n**2)*np.pi**2*t/R**2)/n**2 for n in range(1, 100)], axis=0),
        "params": ["D", "R"]
    },
    "Erosion-Controlled": {
        "function": lambda t, k: 1 - np.exp(-k * t),
        "params": ["k"]
    },
    "Swelling-Controlled": {
        "function": lambda t, D, Sw: 1 - np.exp(-D * t / Sw),
        "params": ["D", "Sw"]
    },
    "Higuchi Model": {
        "function": lambda t, k: k * np.sqrt(t),
        "params": ["k"]
    },
    "Korsmeyer-Peppas": {
        "function": lambda t, k, n: k * t**n,
        "params": ["k", "n"]
    }
}

# ---------------------- Streamlit UI Configuration ----------------------
st.set_page_config(page_title="PharmaSIM: Advanced Drug Release", layout="wide")
st.sidebar.title("‚öôÔ∏è Simulation Controls")

# ---------------------- Parameter Input Section ----------------------
with st.sidebar.expander("üî¨ Core Parameters", expanded=True):
    input_method = st.radio("Parameter Input Method", ["Direct Input", "Calculate Diffusion Coefficient"])
    
    if input_method == "Direct Input":
        st.session_state.D = st.number_input(
            "Diffusion Coefficient (cm¬≤/s)", 
            min_value=0.0001, 
            max_value=10.0, 
            value=st.session_state.D,
            format="%.4f"
        )
    else:
        # Stokes-Einstein Equation Calculator
        st.markdown("**Calculate D using Stokes-Einstein:**")
        col1, col2 = st.columns(2)
        with col1:
            T = st.number_input("Temperature (K)", 273.0, 373.0, 298.0)
            r = st.number_input("Radius (m)", 1e-9, 1e-4, 1e-6, format="%.2e")
        with col2:
            eta = st.number_input("Viscosity (Pa¬∑s)", 0.001, 10.0, 0.001)
            k_B = 1.380649e-23  # Boltzmann constant
        
        if st.button("Calculate D"):
            D_m2s = (k_B * T) / (6 * np.pi * eta * r)
            st.session_state.calculated_D = D_m2s * 10000  # Convert to cm¬≤/s
            st.session_state.D = st.session_state.calculated_D
        
        if st.session_state.calculated_D:
            st.success(f"Calculated D: {st.session_state.calculated_D:.2e} cm¬≤/s")

    # Common Parameters
    model_choice = st.selectbox("Release Model", list(MODELS.keys()))
    time_range = st.slider("Simulation Time (hours)", 0.1, 24.0, 10.0)
    num_points = st.slider("Data Points", 50, 1000, 200)

# ---------------------- Model-Specific Parameters ----------------------
params = {}
model_config = MODELS[model_choice]
for param in model_config["params"]:
    with st.sidebar.expander(f"‚öôÔ∏è {param} Parameters", expanded=True):
        if param == "R":
            params[param] = st.number_input(
                "Radius (cm)", 0.01, 5.0, 0.5, 
                help="Microsphere radius in centimeters"
            )
        elif param == "k":
            params[param] = st.number_input(
                "Release Constant", 0.001, 2.0, 0.1,
                format="%.3f"
            )
        elif param == "Sw":
            params[param] = st.number_input(
                "Swelling Factor", 0.1, 10.0, 2.0,
                step=0.1
            )
        elif param == "n":
            params[param] = st.number_input(
                "Release Exponent", 0.1, 1.0, 0.5,
                help="Korsmeyer-Peppas release exponent"
            )

# Add calculated D to parameters if needed
if 'D' in model_config["params"]:
    params['D'] = st.session_state.D

# ---------------------- Main Simulation Interface ----------------------
tab1, tab2 = st.tabs(["Simulation Results", "Advanced Analysis"])

with tab1:
    st.header("üìà Drug Release Profile")
    
    # Run simulation
    t = np.linspace(0, time_range, num_points)
    try:
        Mt = model_config["function"](t, *params.values())
        Mt = np.clip(Mt, 0, 1)
        
        # Plot results
        fig, ax = plt.subplots(figsize=(10, 6))
        ax.plot(t, Mt, 'b-', linewidth=2)
        ax.set_xlabel("Time (hours)", fontsize=12)
        ax.set_ylabel("Fractional Release", fontsize=12)
        ax.set_title(f"{model_choice} Release Profile", fontsize=14)
        ax.grid(True, alpha=0.3)
        st.pyplot(fig)
        
        # Display parameters
        st.subheader("Simulation Parameters")
        param_table = pd.DataFrame(params.items(), columns=["Parameter", "Value"])
        st.table(param_table)
        
    except Exception as e:
        st.error(f"Simulation error: {str(e)}")

with tab2:
    st.header("üß™ Advanced Analysis")
    
    # Bayesian Optimization
    with st.expander("ü§ñ AI Parameter Optimization"):
        st.write("Optimize formulation parameters using Bayesian methods:")
        
        def optimization_objective(D, R, Sw):
            t = np.linspace(0, 10, 100)
            Mt = MODELS["Fickian Diffusion"]["function"](t, D, R) + \
                 MODELS["Swelling-Controlled"]["function"](t, D, Sw)
            return np.max(Mt)
        
        if st.button("Run Optimization"):
            optimizer = BayesianOptimization(
                f=optimization_objective,
                pbounds={"D": (0.01, 1.0), "R": (0.1, 2.0), "Sw": (0.5, 5.0)},
                random_state=42
            )
            optimizer.maximize(init_points=5, n_iter=20)
            best_params = optimizer.max["params"]
            
            st.subheader("Optimization Results")
            st.write(f"Maximum Release: {optimizer.max['target']:.2f}")
            st.json(best_params)

    # Experimental Data Fitting
    with st.expander("üîç Experimental Data Fitting"):
        exp_data = st.file_uploader("Upload CSV Data", type=["csv"])
        if exp_data:
            df_exp = pd.read_csv(exp_data)
            try:
                t_data = df_exp['Time'].values
                y_data = df_exp['Release'].values
                
                # Fit selected model
                params_fit, r2, mae, pcov = fit_model_to_data(
                    model_config["function"],
                    t_data,
                    y_data,
                    bounds=(tuple([0.001]*len(model_config["params"])),
                           tuple([10.0]*len(model_config["params"])))
                )
                
                st.success(f"Fitting successful (R¬≤ = {r2:.2f})")
                st.write("Fitted Parameters:")
                for name, value in zip(model_config["params"], params_fit):
                    st.write(f"{name}: {value:.4f}")
                
            except Exception as e:
                st.error(f"Data fitting error: {str(e)}")

# ---------------------- 3D Visualization ----------------------
st.sidebar.header("üåê Visualization Settings")
with st.sidebar.expander("3D Parameters"):
    vis_resolution = st.slider("Grid Resolution", 10, 100, 30)
    vis_time_steps = st.slider("Time Steps", 10, 100, 20)

if st.sidebar.button("Render 3D Diffusion"):
    with st.spinner("Generating 3D visualization..."):
        X, Y = np.meshgrid(np.linspace(-1, 1, vis_resolution), 
                         np.linspace(-1, 1, vis_resolution))
        Z = np.exp(-0.2*vis_time_steps) * np.sin(np.pi * np.sqrt(X**2 + Y**2))
        
        fig = go.Figure(data=[go.Surface(z=Z, x=X, y=Y)])
        fig.update_layout(
            title="3D Drug Diffusion Profile",
            scene=dict(
                xaxis_title='X Position',
                yaxis_title='Y Position',
                zaxis_title='Concentration'
            ),
            height=800
        )
        st.plotly_chart(fig, use_container_width=True)

# ---------------------- Data Export ----------------------
st.sidebar.download_button(
    label="üì• Export Simulation Data",
    data=pd.DataFrame({"Time": t, "Release": Mt}).to_csv(index=False),
    file_name="drug_release_data.csv",
    mime="text/csv"
)
