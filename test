# ─── CONFIG ──────────────────────────────────────────────────────

# how many retrieved documents the retriever returns (lower -> fewer tokens)
RETRIEVER_K = 2  # try 2 first; reduce to 1 if you still hit token limits
#############
def build_vectorstores(dfs: dict[str, pd.DataFrame]) -> list[ChildAgent]:
    agents: list[ChildAgent] = []
    for key, df in dfs.items():
        docs = [
            Document(page_content=row["content"], metadata={"source": key})
            for _, row in df.iterrows()
        ]
        if not docs:
            continue

        # Build FAISS vector store from documents
        store = FAISS.from_documents(docs, cached_embeddings)

        # IMPORTANT CHANGE: reduce the number of retrieved docs (k) to limit prompt size
        retriever = store.as_retriever(search_kwargs={"k": RETRIEVER_K})

        # Create child agent with the (now lower-k) retriever
        agents.append(ChildAgent(name=key, retriever=retriever))
        logger.info(f"[Vectorstore] Built store for '{key}' ({len(docs)} docs) with k={RETRIEVER_K}")
    return agents
