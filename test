import streamlit as st
import tempfile
from moviepy.editor import VideoFileClip, AudioFileClip, concatenate_audioclips, AudioClip, TextClip, CompositeVideoClip

st.title("Video Audio Replacement & Editing Tool")

st.markdown("""
This tool allows you to replace the audio track in a video file with a new audio file (for example, replacing an English or Spanish audio track with Danish).  
You can also specify an offset for when the new audio should start and add caption overlays to the video.
""")

# Upload the video file
video_file = st.file_uploader("Upload your video file", type=["mp4", "mov", "avi"])
# Upload the new audio file (e.g., Danish audio)
audio_file = st.file_uploader("Upload your replacement audio file", type=["mp3", "wav", "aac"])

if video_file is not None:
    # Save uploaded video to a temporary file
    temp_video = tempfile.NamedTemporaryFile(delete=False)
    temp_video.write(video_file.read())
    temp_video.flush()
    video = VideoFileClip(temp_video.name)
    st.video(video_file)

if audio_file is not None:
    # Save uploaded audio to a temporary file
    temp_audio = tempfile.NamedTemporaryFile(delete=False)
    temp_audio.write(audio_file.read())
    temp_audio.flush()
    new_audio = AudioFileClip(temp_audio.name)
    st.audio(audio_file)

# Only proceed if both files are uploaded
if video_file and audio_file:
    st.subheader("Audio Placement Options")
    # Provide an offset slider to specify when the new audio should begin in the video timeline
    offset = st.slider("Audio offset (seconds)", min_value=0, max_value=int(video.duration), value=0, step=1)

    st.subheader("Caption Options")
    add_caption = st.checkbox("Add captions to the video")
    if add_caption:
        caption_text = st.text_input("Enter caption text")
        caption_start = st.number_input("Caption start time (seconds)", min_value=0.0, max_value=float(video.duration), value=0.0, step=0.1)
        caption_end = st.number_input("Caption end time (seconds)", min_value=0.0, max_value=float(video.duration), value=float(video.duration), step=0.1)
    
    if st.button("Process Video"):
        with st.spinner("Processing... This may take a moment."):
            # Create a silent audio clip if an offset is specified
            if offset > 0:
                # Create silence using a lambda function; duration is the offset time.
                silence = AudioClip(lambda t: 0, duration=offset, fps=new_audio.fps)
                # Concatenate silence with the new audio so that it starts after the offset
                new_audio = concatenate_audioclips([silence, new_audio])
            
            # Set the new audio for the video
            processed_video = video.set_audio(new_audio)
            
            # If caption is enabled and text is provided, overlay it on the video
            if add_caption and caption_text.strip():
                # Create a text clip for captions
                txt_clip = TextClip(caption_text, fontsize=24, color='white', bg_color='black')
                txt_clip = txt_clip.set_position(('center', 'bottom'))\
                                   .set_start(caption_start)\
                                   .set_duration(caption_end - caption_start)
                # Overlay the text clip on the video
                processed_video = CompositeVideoClip([processed_video, txt_clip])
            
            # Save the processed video to a temporary file
            output_path = tempfile.NamedTemporaryFile(suffix=".mp4", delete=False).name
            processed_video.write_videofile(output_path, codec="libx264", audio_codec="aac")
            
            st.success("Video processing complete!")
            # Provide a download button for the new video
            with open(output_path, "rb") as video_file:
                st.download_button("Download Edited Video", data=video_file, file_name="edited_video.mp4", mime="video/mp4")
