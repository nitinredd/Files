import numpy as np

def calculate_f2_china(reference_df, test_df):
    """
    China guideline:
      - Drop time = 0
      - Reference mean must have exactly one timepoint >85%, all others ≤85%
      - Compute conventional and expected f2 on the remaining points
    Returns:
      f2_conv, exp_f2, trimmed_ref_df, trimmed_test_df
    """
    # 1) Drop time=0 if present
    ref = reference_df.copy().reset_index(drop=True)
    tst = test_df.copy().reset_index(drop=True)
    if float(ref.iloc[0,0]) == 0.0:
        ref = ref.drop(0).reset_index(drop=True)
        tst = tst.drop(0).reset_index(drop=True)

    # 2) Compute means
    ref_means  = ref.iloc[:,1:].mean(axis=1).values
    test_means = tst.iloc[:,1:].mean(axis=1).values

    # 3) Check exactly one ref >85%
    count_above = np.sum(ref_means > 85)
    if count_above != 1:
        raise ValueError(
            f"Reference profile must have exactly one timepoint >85% (found {count_above})."
        )

    # 4a) conventional f2 on ALL remaining points
    diff    = test_means - ref_means
    p       = len(diff)
    sum_sq  = np.sum(diff**2)
    f2_conv = 100 - 25 * np.log10(1 + sum_sq / p)

    # 4b) expected f2
    var_ref   = ref.iloc[:,1:].var(axis=1, ddof=1).values
    var_test  = tst.iloc[:,1:].var(axis=1, ddof=1).values
    avg_var   = np.mean(var_ref + var_test)
    exp_f2    = 100 - 25 * np.log10(1 + (sum_sq + p * avg_var) / p)

    return f2_conv, exp_f2, ref, tst
##############################################
import matplotlib.pyplot as plt
from matplotlib.ticker import MaxNLocator

elif input1 == 3:
    print("According to China's guidelines")
    # CV check
    cv_check = check_cv(test_df) and check_cv(reference_df)
    print("CV <20 at first non-zero, <10 thereafter:", cv_check)

    # Time alignment check (after time0 will be dropped inside calculate)
    if not check_same_time_points(reference_df, test_df):
        print("Error: Time points between test and reference do not match.")
    else:
        print("\nAnalysis based on China’s single‑85% rule:")
        try:
            f2_conv, f2_exp, ref_trim, test_trim = calculate_f2_china(reference_df, test_df)

            # Print f2 results
            print(f"Conventional f2: {f2_conv:.2f}")
            print(f"Expected    f2: {f2_exp:.2f}")
            if not cv_check:
                print("\nWarning: CV requirements not met; interpret with caution.")

            # --- Graph 1: Simple dissolution curves ---
            times      = ref_trim.iloc[:,0].astype(float)
            r_means    = ref_trim.iloc[:,1:].mean(axis=1)
            t_means    = test_trim.iloc[:,1:].mean(axis=1)

            plt.figure(figsize=(12,6))
            plt.plot(times, r_means, marker='o', linestyle='-',  label='Reference')
            plt.plot(times, t_means, marker='o', linestyle='--', label='Test')
            plt.xlabel('Time')
            plt.ylabel('Dissolution (%)')
            plt.title('Dissolution Curves')
            plt.grid(True)
            ax = plt.gca()
            ax.yaxis.set_major_locator(MaxNLocator(integer=True, prune='lower'))
            ax.set_yticks(range(0,101,5))
            plt.legend(loc='lower right')
            plt.tight_layout()
            plt.savefig('china_dissolution_curves.png', dpi=300)
            plt.show()
            plt.close()

            # --- Graph 2: Curves with min/max intervals ---
            r_min = ref_trim.iloc[:,1:].min(axis=1)
            r_max = ref_trim.iloc[:,1:].max(axis=1)
            t_min = test_trim.iloc[:,1:].min(axis=1)
            t_max = test_trim.iloc[:,1:].max(axis=1)

            plt.figure(figsize=(12,6))
            plt.errorbar(
                times, r_means,
                yerr=[r_means - r_min, r_max - r_means],
                fmt='o-', label='Reference Mean'
            )
            plt.errorbar(
                times, t_means,
                yerr=[t_means - t_min, t_max - t_means],
                fmt='s--', label='Test Mean'
            )
            for t, mn, mx in zip(times, r_min, r_max):
                plt.hlines([mn, mx], t-0.2, t+0.2, linestyles='--', alpha=0.5)
            for t, mn, mx in zip(times, t_min, t_max):
                plt.hlines([mn, mx], t-0.2, t+0.2, linestyles='--', alpha=0.5)

            plt.xlabel('Time')
            plt.ylabel('Dissolution (%)')
            plt.title('Dissolution Curves with Intervals')
            plt.grid(True)
            ax = plt.gca()
            ax.yaxis.set_major_locator(MaxNLocator(integer=True, prune='lower'))
            ax.set_yticks(range(0,101,5))
            plt.legend(loc='lower right')
            plt.tight_layout()
            plt.savefig('china_dissolution_curves_with_intervals.png', dpi=300)
            plt.show()
            plt.close()

        except ValueError as e:
            print("❌", e)
            print("Cannot perform f2 calculation.")
