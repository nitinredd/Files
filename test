# ---------------------- Corrected CFD Solver ----------------------
class CFDSolver:
    def __init__(self, size=50):
        self.size = size
        self.x = np.linspace(-2, 2, size)
        self.y = np.linspace(-2, 2, size)
        self.z = np.linspace(-2, 2, size)
        self.X, self.Y, self.Z = np.meshgrid(self.x, self.y, self.z)
        
    def solve_transport(self, D, visc, density, release_rate, dt=0.01):
        """Solve transport equations with proper dimension handling"""
        velocity = np.zeros((3, self.size, self.size, self.size))
        concentration = np.zeros_like(self.X)
        
        # Initialize drug release at center
        concentration[self.size//2, self.size//2, self.size//2] = release_rate[0]
        
        for i in range(1, len(release_rate)):
            # Update fluid dynamics with proper gradient calculations
            new_velocity = np.zeros_like(velocity)
            for comp in range(3):
                # Calculate Laplacian for velocity component
                grad_x = np.gradient(velocity[comp], axis=0)
                grad_y = np.gradient(velocity[comp], axis=1)
                grad_z = np.gradient(velocity[comp], axis=2)
                
                laplacian = (np.gradient(grad_x, axis=0) + 
                            np.gradient(grad_y, axis=1) + 
                            np.gradient(grad_z, axis=2))
                
                # Navier-Stokes equation components
                viscous_term = visc * laplacian
                advection_term = density * (
                    velocity[0] * np.gradient(velocity[comp], axis=0) +
                    velocity[1] * np.gradient(velocity[comp], axis=1) +
                    velocity[2] * np.gradient(velocity[comp], axis=2)
                )
                
                new_velocity[comp] = velocity[comp] + dt * (viscous_term - advection_term)
            
            velocity = np.clip(new_velocity, -1e3, 1e3)  # Stability clipping
            
            # Update drug concentration with proper advection-diffusion
            grad_c = np.array(np.gradient(concentration))
            laplacian_c = np.sum([np.gradient(grad_c[i], axis=i) for i in range(3)], axis=0)
            
            advection = np.sum([
                velocity[0] * grad_c[0],
                velocity[1] * grad_c[1],
                velocity[2] * grad_c[2]
            ], axis=0)
            
            concentration += dt * (D * laplacian_c - advection) + release_rate[i]
            concentration = np.clip(concentration, 0, 1)
            
        return concentration, velocity
