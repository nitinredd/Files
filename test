import streamlit as st
from moviepy.editor import VideoFileClip, CompositeVideoClip, TextClip, AudioFileClip, vfx
import os
import tempfile

def main():
    st.title("Advanced Video Editor")

    # Initialize session state for storing video objects
    if 'edited_video' not in st.session_state:
        st.session_state.edited_video = None

    # Upload video
    uploaded_file = st.file_uploader("Upload Video", type=["mp4", "mov", "avi"])
    if uploaded_file is not None:
        # Save uploaded file to a temporary file
        tfile = tempfile.NamedTemporaryFile(delete=False, suffix=".mp4")
        tfile.write(uploaded_file.read())
        tfile.close()

        # Load video with error handling
        try:
            video = VideoFileClip(tfile.name)
        except Exception as e:
            st.error(f"Error loading video: {e}")
            return

        st.session_state.original_video = video
        duration = video.duration

        # Show original video
        st.subheader("Original Video")
        st.video(tfile.name)

        # Sidebar editing controls
        st.sidebar.header("Editing Tools")

        # Trim controls
        st.sidebar.subheader("Trim Video")
        start_time = st.sidebar.slider("Start Time (sec)", 0.0, float(duration), 0.0, step=0.1)
        end_time = st.sidebar.slider("End Time (sec)", 0.0, float(duration), float(duration), step=0.1)
        if start_time >= end_time:
            st.sidebar.error("Start time must be less than end time.")
            return

        # Begin editing with the trimmed video
        edited = video.subclip(start_time, end_time)

        # Advanced Editing: Rotation, Speed, Crop
        st.sidebar.header("Advanced Editing")
        rotation_angle = st.sidebar.slider("Rotation Angle", 0, 360, 0)
        speed_factor = st.sidebar.slider("Playback Speed", 0.5, 2.0, 1.0, step=0.1)
        
        # Crop option
        crop_option = st.sidebar.checkbox("Crop Video")
        if crop_option:
            st.sidebar.markdown("Define crop area (left, top, right, bottom)")
            crop_left = st.sidebar.number_input("Left", min_value=0, max_value=int(edited.w), value=0)
            crop_top = st.sidebar.number_input("Top", min_value=0, max_value=int(edited.h), value=0)
            crop_right = st.sidebar.number_input("Right", min_value=0, max_value=int(edited.w), value=int(edited.w))
            crop_bottom = st.sidebar.number_input("Bottom", min_value=0, max_value=int(edited.h), value=int(edited.h))
            if crop_right > crop_left and crop_bottom > crop_top:
                edited = edited.crop(x1=crop_left, y1=crop_top, x2=crop_right, y2=crop_bottom)
            else:
                st.sidebar.error("Invalid crop dimensions.")

        # Apply rotation if specified
        if rotation_angle != 0:
            edited = edited.rotate(rotation_angle)

        # Adjust playback speed if needed
        if speed_factor != 1.0:
            edited = edited.fx(vfx.speedx, factor=speed_factor)

        # Text overlay controls
        st.sidebar.header("Text Overlay")
        add_text = st.sidebar.checkbox("Add Text Overlay")
        if add_text:
            text_overlay = st.sidebar.text_input("Enter Text", value="Sample Text")
            text_start = st.sidebar.slider("Text Start Time", start_time, end_time, start_time, step=0.1)
            text_duration = st.sidebar.slider("Text Duration", 0.1, end_time - text_start, min(0.1, end_time - text_start), step=0.1)
            text_position = st.sidebar.selectbox("Text Position", ["center", "top", "bottom"])
            text_color = st.sidebar.color_picker("Text Color", "#FFFFFF")
            font_size = st.sidebar.slider("Font Size", 20, 100, 40)
            if text_overlay:
                try:
                    # Use method='label' to avoid dependency on ImageMagick
                    txt_clip = TextClip(
                        text_overlay,
                        fontsize=font_size,
                        color=text_color,
                        method='label'
                    )
                    txt_clip = txt_clip.set_position(text_position).set_start(text_start).set_duration(text_duration)
                    edited = CompositeVideoClip([edited, txt_clip])
                except Exception as e:
                    st.error(f"Error applying text overlay: {e}")

        # Audio options: Replace original audio or adjust volume
        st.sidebar.header("Audio Options")
        replace_audio = st.sidebar.checkbox("Replace Original Audio")
        if replace_audio:
            audio_file = st.sidebar.file_uploader("Upload New Audio Track", type=["mp3", "wav"])
            if audio_file is not None:
                audio_temp = tempfile.NamedTemporaryFile(delete=False, suffix=".mp3")
                audio_temp.write(audio_file.read())
                audio_temp.close()
                try:
                    audio_clip = AudioFileClip(audio_temp.name)
                    edited = edited.set_audio(audio_clip)
                except Exception as e:
                    st.error(f"Error applying new audio: {e}")
        else:
            if video.audio is not None:
                st.sidebar.subheader("Adjust Audio Volume")
                vol_factor = st.sidebar.slider("Volume Factor", 0.0, 2.0, 1.0, step=0.1)
                edited = edited.volumex(vol_factor)

        # Video filter options
        st.sidebar.header("Video Filters")
        filter_option = st.sidebar.selectbox("Choose Filter", ["None", "Black & White", "Color Boost", "Brightness"])
        if filter_option == "Black & White":
            edited = edited.fx(vfx.blackwhite)
        elif filter_option == "Color Boost":
            edited = edited.fx(vfx.colorx, 1.2)
        elif filter_option == "Brightness":
            # A simple brightness adjustment
            edited = edited.fx(vfx.lum_contrast, lum=10, contrast=1, contrast_thr=127)

        # Preview the edited video
        st.subheader("Preview Edited Video")
        preview_path = os.path.join(tempfile.gettempdir(), "preview.mp4")
        try:
            edited.write_videofile(preview_path, codec="libx264", fps=24, logger=None)
            st.video(preview_path)
        except Exception as e:
            st.error(f"Error generating preview: {e}")

        # Export video controls
        st.subheader("Export Video")
        export_name = st.text_input("File Name", "edited_video")
        export_button = st.button("Export Video")
        if export_button:
            export_path = f"{export_name}.mp4"
            try:
                edited.write_videofile(export_path, codec="libx264", fps=24, logger=None)
                with open(export_path, "rb") as file:
                    st.download_button(
                        label="Download Video",
                        data=file,
                        file_name=export_path,
                        mime="video/mp4"
                    )
            except Exception as e:
                st.error(f"Error exporting video: {e}")
            finally:
                # Clean up temporary files
                if os.path.exists(tfile.name):
                    os.unlink(tfile.name)
                if 'audio_temp' in locals() and os.path.exists(audio_temp.name):
                    os.unlink(audio_temp.name)

if __name__ == "__main__":
    main()
