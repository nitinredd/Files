// src/components/ChatWindow.jsx
import React, { useRef, useEffect, useState } from "react";
import { motion } from "framer-motion";
import { FiSend, FiPlus, FiDownload, FiX } from "react-icons/fi";
import MicrophoneButton from "./MicrophoneButton";
import { searchProducts } from "../api"; // ensure this API call exists and returns list
import clsx from "clsx";

/**
 * ChatWindow
 *
 * Props:
 *  - messages: array of chat messages [{role:'user'|'assistant', content, loading?, tables?:[], sources?:[] }]
 *  - onSend(text)
 *  - loading: boolean (shows "Generating response..." loader)
 *  - centeredWidth: tailwind class for width
 *  - onUploadFile(file): callback for uploaded file (File)
 *  - openPromptGallery(): open prompt gallery modal (callback)
 *  - selectedCitedDocs, removeCitation (kept)
 */
export default function ChatWindow({
  messages = [],
  onSend,
  loading = false,
  centeredWidth = "max-w-3xl",
  selectedCitedDocs = [],
  removeCitation = () => {},
  onUploadFile = null,
  openPromptGallery = null,
  selectedSchemeUrl = null,
  selectedProduct = null,
}) {
  const [text, setText] = useState("");
  const textareaRef = useRef();
  const [suggestions, setSuggestions] = useState([]); // {id,name,reaction_type}
  const [showSuggestions, setShowSuggestions] = useState(false);
  const [activeIndex, setActiveIndex] = useState(-1);
  const debounceRef = useRef(null);
  const containerRef = useRef(null);

  // Full-page expansion overlay open state
  const [expandedMessageIndex, setExpandedMessageIndex] = useState(null);

  // hidden file input ref
  const fileInputRef = useRef(null);

  // autosize textarea
  useEffect(() => {
    if (textareaRef.current) {
      textareaRef.current.style.height = "auto";
      textareaRef.current.style.height = textareaRef.current.scrollHeight + "px";
    }
  }, [text, messages]);

  // hide suggestions on outside click
  useEffect(() => {
    const onDocClick = (e) => {
      if (!containerRef.current) return;
      if (!containerRef.current.contains(e.target)) {
        setShowSuggestions(false);
        setActiveIndex(-1);
      }
    };
    document.addEventListener("mousedown", onDocClick);
    return () => document.removeEventListener("mousedown", onDocClick);
  }, []);

  // product suggestions debounce
  useEffect(() => {
    const q = (text || "").trim();
    if (q.length < 2) {
      setSuggestions([]);
      setShowSuggestions(false);
      setActiveIndex(-1);
      if (debounceRef.current) {
        clearTimeout(debounceRef.current);
        debounceRef.current = null;
      }
      return;
    }

    if (debounceRef.current) clearTimeout(debounceRef.current);
    debounceRef.current = setTimeout(async () => {
      try {
        const res = await searchProducts(q, 8);
        const payload = res && res.data ? res.data : res;
        setSuggestions(payload || []);
        setShowSuggestions(Array.isArray(payload) && payload.length > 0);
        setActiveIndex(-1);
      } catch (err) {
        console.error("searchProducts error:", err);
        setSuggestions([]);
        setShowSuggestions(false);
      }
    }, 220);
    return () => {
      if (debounceRef.current) {
        clearTimeout(debounceRef.current);
        debounceRef.current = null;
      }
    };
  }, [text]);

  // watch messages: auto-open expanded overlay if latest assistant message has tables or sources
  useEffect(() => {
    if (!messages || messages.length === 0) return;
    const lastIdx = messages.length - 1;
    const last = messages[lastIdx];
    if (last.role === "assistant" && (Array.isArray(last.tables) && last.tables.length > 0 || Array.isArray(last.sources) && last.sources.length > 0)) {
      // open expanded view for the latest assistant message
      setExpandedMessageIndex(lastIdx);
    }
  }, [messages]);

  const onKeyDown = (e) => {
    if (showSuggestions && suggestions.length > 0) {
      if (e.key === "ArrowDown") {
        e.preventDefault();
        setActiveIndex((i) => Math.min(i + 1, suggestions.length - 1));
        return;
      } else if (e.key === "ArrowUp") {
        e.preventDefault();
        setActiveIndex((i) => Math.max(i - 1, 0));
        return;
      } else if (e.key === "Enter" && activeIndex >= 0) {
        e.preventDefault();
        chooseSuggestion(suggestions[activeIndex]);
        return;
      } else if (e.key === "Escape") {
        setShowSuggestions(false);
        setActiveIndex(-1);
        return;
      }
    }

    if (e.key === "Enter" && !e.shiftKey && !showSuggestions) {
      e.preventDefault();
      submit();
    }
  };

  const chooseSuggestion = (s) => {
    if (!s) return;
    try {
      const el = textareaRef.current;
      if (el) {
        const cursor = el.selectionStart || text.length;
        let left = text.slice(0, cursor);
        let right = text.slice(cursor);
        const lastWs = left.lastIndexOf(" ");
        const prefix = lastWs === -1 ? "" : left.slice(0, lastWs + 1);
        const newText = prefix + s.name + (right && !right.startsWith(" ") ? " " + right : right);
        setText(newText);
      } else {
        setText((t) => (t ? t + " " + s.name : s.name));
      }
    } catch (e) {
      setText((t) => (t ? t + " " + s.name : s.name));
    }
    setShowSuggestions(false);
    setActiveIndex(-1);
    setTimeout(() => textareaRef.current && textareaRef.current.focus(), 0);
  };

  const submit = () => {
    const t = text.trim();
    if (!t) return;
    onSend(t);
    setText("");
    setSuggestions([]);
    setShowSuggestions(false);
    setActiveIndex(-1);
  };

  // handle upload (+) button click
  const triggerFileInput = () => {
    if (fileInputRef.current) fileInputRef.current.click();
  };

  const handleFileChange = async (e) => {
    const f = e.target.files && e.target.files[0];
    if (!f) return;
    if (onUploadFile) {
      try {
        await onUploadFile(f);
      } catch (err) {
        console.error("onUploadFile handler error:", err);
      }
    }
    e.target.value = null;
  };

  // render a structured table (headers, rows)
  const renderTable = (tbl, index) => {
    const headers = tbl.headers || [];
    const rows = tbl.rows || [];
    return (
      <div key={"tbl-" + index} className="mt-3 mb-4 overflow-auto rounded-lg border">
        <table className="min-w-full table-auto text-sm">
          <thead className="bg-gray-50">
            <tr>
              {headers.map((h, hi) => (
                <th key={hi} className="px-3 py-2 text-left font-medium">{h}</th>
              ))}
            </tr>
          </thead>
          <tbody>
            {rows.map((r, ri) => (
              <tr key={ri} className={ri % 2 === 0 ? "bg-white" : "bg-gray-50"}>
                {r.map((c, ci) => (
                  <td key={ci} className="px-3 py-2 align-top whitespace-pre-wrap">{c}</td>
                ))}
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    );
  };

  // render source cards (beautiful)
  const renderSources = (sources = []) => {
    if (!Array.isArray(sources) || sources.length === 0) return null;
    return (
      <div className="mt-3 grid grid-cols-1 sm:grid-cols-2 gap-3">
        {sources.map((s, i) => (
          <div key={s.product_id || i} className="border rounded-xl p-3 shadow-sm hover:shadow-lg bg-white">
            <div className="flex items-start justify-between gap-3">
              <div>
                <div className="text-sm font-semibold text-primary truncate">{s.product_name}</div>
                <div className="text-xs text-gray-500 mt-1">{s.product_id}</div>
              </div>
              <div className="flex items-center gap-2">
                <a
                  href={`/product/${encodeURIComponent(s.product_id)}/pdf`}
                  target="_blank"
                  rel="noreferrer"
                  className="px-3 py-2 bg-primary text-white rounded-md inline-flex items-center gap-2"
                  title="Download PDF"
                >
                  <FiDownload />
                  <span className="text-xs">Download</span>
                </a>
              </div>
            </div>
            {s.excerpt && <div className="mt-2 text-xs text-gray-600 whitespace-pre-wrap">{s.excerpt}</div>}
          </div>
        ))}
      </div>
    );
  };

  // render a single chat message (handles tables and sources)
  const renderMessage = (m, idx) => {
    const isUser = m.role === "user";
    return (
      <motion.div
        key={idx}
        initial={{ opacity: 0, y: 8 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.28, delay: idx * 0.02 }}
        className={`mb-3 ${isUser ? "flex justify-end" : "flex justify-start"}`}
      >
        <div className={clsx("px-4 py-3 rounded-2xl max-w-[85%] whitespace-pre-wrap break-words", {
          "bg-gradient-to-br from-secondary to-primary text-white": isUser,
          "bg-gray-50 text-gray-800": !isUser
        })}>
          {/* content */}
          <div style={{ whiteSpace: "pre-wrap" }}>{m.content}</div>

          {/* if structured tables present */}
          {Array.isArray(m.tables) && m.tables.length > 0 && (
            <div className="mt-2">
              {m.tables.map((t, i) => renderTable(t, i))}
            </div>
          )}

          {/* if sources present, render cards */}
          {Array.isArray(m.sources) && m.sources.length > 0 && (
            <div className="mt-3">
              {renderSources(m.sources)}
            </div>
          )}

          {/* small controls for assistant messages */}
          {!isUser && (Array.isArray(m.tables) && m.tables.length > 0 || Array.isArray(m.sources) && m.sources.length > 0) && (
            <div className="mt-2 flex items-center gap-2">
              <button
                className="text-xs text-primary underline"
                onClick={() => setExpandedMessageIndex(idx)}
                title="Open expanded results"
              >
                Open expanded view
              </button>
            </div>
          )}

          {/* loading spinner indicator if m.loading */}
          {m.loading && (
            <div className="mt-2 text-xs text-gray-500 flex items-center gap-2">
              <svg className="animate-spin h-4 w-4 text-gray-500" viewBox="0 0 24 24">
                <circle cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" strokeDasharray="60" strokeLinecap="round" fill="none"></circle>
              </svg>
              Generating...
            </div>
          )}
        </div>
      </motion.div>
    );
  };

  // expanded overlay content from a specific message index
  const ExpandedOverlay = ({ msgIndex, onClose }) => {
    if (msgIndex === null) return null;
    const m = messages[msgIndex];
    if (!m) return null;
    return (
      <div className="fixed inset-0 z-50 flex items-stretch justify-center p-6">
        <div className="absolute inset-0 bg-black/40" onClick={onClose} />
        <div className="relative w-full max-w-4xl bg-white rounded-2xl shadow-2xl overflow-auto z-60 p-6">
          <div className="flex items-center justify-between mb-4">
            <div className="text-lg font-semibold">Detailed results</div>
            <button onClick={onClose} className="p-2 rounded-full hover:bg-gray-100">
              <FiX />
            </button>
          </div>

          <div className="prose max-w-none">
            <pre className="whitespace-pre-wrap bg-gray-50 p-4 rounded-md">{m.content}</pre>
          </div>

          {Array.isArray(m.tables) && m.tables.length > 0 && (
            <div className="mt-4">
              <h4 className="text-sm font-semibold mb-2">Extracted tables</h4>
              {m.tables.map((t, i) => renderTable(t, i))}
            </div>
          )}

          {Array.isArray(m.sources) && m.sources.length > 0 && (
            <div className="mt-4">
              <h4 className="text-sm font-semibold mb-2">Sources</h4>
              {renderSources(m.sources)}
            </div>
          )}

          <div className="mt-6 text-right">
            <button onClick={onClose} className="px-4 py-2 bg-primary text-white rounded-md">Close</button>
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className={`mx-auto ${centeredWidth}`} ref={containerRef}>
      <div className="bg-white rounded-3xl shadow-2xl p-6">
        {/* loading / generating toast */}
        {loading && (
          <div className="mb-4 flex items-center gap-3">
            <svg className="animate-spin h-5 w-5 text-primary" viewBox="0 0 24 24">
              <circle cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="3" strokeDasharray="60" strokeLinecap="round" fill="none"></circle>
            </svg>
            <div className="text-sm text-gray-700">Generating response...</div>
          </div>
        )}

        {/* Citation chips */}
        {selectedCitedDocs && selectedCitedDocs.length > 0 && (
          <div className="mb-4 flex flex-wrap gap-2">
            {selectedCitedDocs.map((d) => (
              <div key={d.id} className="flex items-center gap-2 bg-purple-50 text-purple-800 px-3 py-1 rounded-full text-xs">
                <span className="max-w-[220px] truncate">{d.name}</span>
                <button onClick={() => removeCitation(d.id)} className="ml-1 px-1 rounded-full bg-white shadow text-xs" title="Remove citation">✕</button>
              </div>
            ))}
          </div>
        )}

        {/* Messages */}
        <div className="min-h-[240px] max-h-[56vh] overflow-auto pr-2">
          {messages.map((m, idx) => renderMessage(m, idx))}
        </div>

        {/* Input area */}
        <div className="mt-4 relative">
          <div className="flex items-end gap-3">
            {/* PLUS upload button */}
            <div className="flex items-center">
              <button
                onClick={triggerFileInput}
                title="Upload file"
                className="p-2 rounded-full border hover:bg-gray-50"
              >
                <FiPlus />
              </button>
              <input ref={fileInputRef} type="file" className="hidden" onChange={handleFileChange} />
            </div>

            {/* Microphone */}
            <MicrophoneButton onText={(t) => setText(t)} />

            {/* Textarea */}
            <textarea
              ref={textareaRef}
              value={text}
              onChange={(e) => setText(e.target.value)}
              rows={1}
              placeholder="Ask about reaction chemistry or type a product name..."
              className="flex-1 resize-none px-4 py-3 rounded-3xl border bg-white text-black focus:outline-none focus:ring-2 focus:ring-secondary scrollbar-hide"
              onKeyDown={onKeyDown}
              onFocus={() => { if (suggestions && suggestions.length > 0) setShowSuggestions(true); }}
            />

            {/* Send button */}
            <button onClick={submit} className="p-3 rounded-full bg-primary text-white shadow hover:scale-95">
              <FiSend />
            </button>
          </div>

          {/* Prompt gallery button (centered below input) */}
          <div className="mt-3 flex items-center justify-center">
            {typeof openPromptGallery === "function" && (
              <button
                onClick={() => openPromptGallery()}
                className="px-4 py-2 bg-white border rounded-full shadow-sm hover:shadow-md"
              >
                Prompt gallery
              </button>
            )}
          </div>

          {/* Suggestions dropdown */}
          {showSuggestions && suggestions && suggestions.length > 0 && (
            <div className="absolute left-16 right-0 z-40 mt-2 rounded-xl bg-white border shadow-lg overflow-hidden">
              <ul className="max-h-56 overflow-auto">
                {suggestions.map((s, i) => (
                  <li key={s.id}>
                    <button
                      className={`w-full text-left px-4 py-3 hover:bg-gray-50 flex justify-between items-center ${i === activeIndex ? "bg-gray-100" : ""}`}
                      onMouseDown={(e) => {
                        e.preventDefault();
                        chooseSuggestion(s);
                      }}
                      onMouseEnter={() => setActiveIndex(i)}
                    >
                      <div className="truncate">
                        <div className="font-medium text-sm text-primary">{s.name}</div>
                        <div className="text-xs text-gray-400 mt-1">{(s.reaction_type || "").replace(/_/g, " ")}</div>
                      </div>
                      <div className="text-xs text-gray-400 ml-4">Select</div>
                    </button>
                  </li>
                ))}
              </ul>
            </div>
          )}
        </div>
      </div>

      {/* Expanded overlay modal */}
      {expandedMessageIndex !== null && (
        <ExpandedOverlay
          msgIndex={expandedMessageIndex}
          onClose={() => setExpandedMessageIndex(null)}
        />
      )}
    </div>
  );
}
#########################
// src/components/PromptGallery.jsx
import React from "react";
import { motion } from "framer-motion";
import { FiX } from "react-icons/fi";

/**
 * PromptGallery modal
 *
 * Props:
 *  - open: boolean
 *  - onClose: fn
 *  - prompts: [{title, prompt/text}]
 *  - onPick(promptText)
 */
export default function PromptGallery({ open = false, onClose = () => {}, prompts = [], onPick = () => {} }) {
  if (!open) return null;

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center p-6">
      <div className="absolute inset-0 bg-black/40" onClick={onClose} />
      <div className="relative w-full max-w-3xl bg-white rounded-2xl shadow-2xl z-60 p-6">
        <div className="flex items-center justify-between mb-4">
          <div className="text-lg font-semibold">Prompt gallery</div>
          <button onClick={onClose} className="p-2 rounded-full hover:bg-gray-100">
            <FiX />
          </button>
        </div>

        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
          {prompts && prompts.length > 0 ? prompts.map((p, i) => {
            const title = p.title || (p.text ? p.text.slice(0, 40) : `Prompt ${i+1}`);
            const promptText = p.prompt || p.text || p;
            return (
              <motion.button
                key={i}
                onClick={() => onPick(promptText)}
                whileHover={{ y: -6 }}
                className="bg-white border rounded-2xl p-4 text-left shadow hover:shadow-lg transition"
              >
                <div className="text-sm font-semibold mb-2">{title}</div>
                <div className="text-xs text-gray-500 truncate">{promptText}</div>
              </motion.button>
            );
          }) : (
            <div className="text-sm text-gray-500">No sample prompts available.</div>
          )}
        </div>
      </div>
    </div>
  );
}
