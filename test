def create_jmp_style_qq_plot(data, title, method_name, file_name):
    """Create a JMP-style QQ plot with hyperbolic (arc-like) confidence bands."""
    if len(data) == 0:
        return None

    # Calculate theoretical quantiles and sample quantiles
    (osm, osr), (slope, intercept, r) = probplot(data, dist="norm", plot=None)

    # Dense grid for smooth band drawing
    x_grid = np.linspace(osm.min(), osm.max(), 400)
    line_y = slope * x_grid + intercept

    # Use residuals around the fitted reference line to estimate local spread
    fitted_on_osm = slope * osm + intercept
    resid = osr - fitted_on_osm
    sigma_line = np.std(resid, ddof=1) if len(resid) > 1 else np.std(data, ddof=1)

    # 95% z-value (you can tune this constant if you prefer JMP's slightly different factor)
    z = norm.ppf(0.975)

    # number of observations (for scaling)
    n = len(data)

    # Hyperbolic factor: grows roughly like sqrt(1 + x^2) -> wider in tails
    hyperbolic_factor = z * sigma_line * np.sqrt(1.0 + x_grid**2) / np.sqrt(n)

    upper_band = line_y + hyperbolic_factor
    lower_band = line_y - hyperbolic_factor

    # Build figure
    fig = go.Figure()

    # Add filled band (so it appears behind points)
    fig.add_trace(go.Scatter(
        x=np.concatenate([x_grid, x_grid[::-1]]),
        y=np.concatenate([upper_band, lower_band[::-1]]),
        fill='toself',
        fillcolor='rgba(220, 50, 50, 0.12)',  # subtle red fill
        line=dict(color='rgba(255,255,255,0)'),  # invisible line for the fill polygon
        hoverinfo='skip',
        showlegend=False,
    ))

    # Add dashed upper and lower arc lines
    fig.add_trace(go.Scatter(
        x=x_grid,
        y=upper_band,
        mode='lines',
        line=dict(color='red', width=1, dash='dot'),
        name='Upper Confidence Band',
        hoverinfo='skip',
        showlegend=False
    ))
    fig.add_trace(go.Scatter(
        x=x_grid,
        y=lower_band,
        mode='lines',
        line=dict(color='red', width=1, dash='dot'),
        name='Lower Confidence Band',
        hoverinfo='skip',
        showlegend=False
    ))

    # Add the main reference line (solid red)
    fig.add_trace(go.Scatter(
        x=x_grid,
        y=line_y,
        mode='lines',
        name='Normal Reference Line',
        line=dict(color='red', width=2, dash='solid'),
        showlegend=False,
        hovertemplate='Normal Reference Line<extra></extra>'
    ))

    # Add the data points (black circles)
    fig.add_trace(go.Scatter(
        x=osm,
        y=osr,
        mode='markers',
        name='Data Points',
        marker=dict(color='black', size=6, symbol='circle', line=dict(width=0)),
        showlegend=False,
        hovertemplate='<b>Normal Quantile:</b> %{x:.3f}<br><b>Sample Quantile:</b> %{y:.3f}<br><extra></extra>'
    ))

    # axis ranges & ticks
    x_range = max(osm) - min(osm)
    y_range = max(osr) - min(osr)
    x_margin = x_range * 0.10
    y_margin = y_range * 0.10

    x_ticks = [-2.5, -2, -1.5, -1, -0.5, 0, 0.5, 1, 1.5, 2]
    x_ticks = [tick for tick in x_ticks if min(osm)-x_margin <= tick <= max(osm)+x_margin]

    mean_val = np.mean(data)
    std_val = np.std(data, ddof=1)
    skewness_val = skew(data)
    kurtosis_val = kurtosis(data)

    fig.update_layout(
        title=dict(
            text=f'<b>Normal Quantile Plot</b><br><span style="font-size:12px;">{method_name} - {file_name.replace(".xlsx", "")}</span>',
            x=0.5, y=0.95, font=dict(size=14, color='black', family='Arial')
        ),
        xaxis=dict(
            title=dict(text='<b>Normal Quantile</b>', font=dict(size=12, color='black', family='Arial')),
            range=[min(osm)-x_margin, max(osm)+x_margin],
            tickvals=x_ticks,
            tickmode='array',
            gridcolor='lightgray',
            gridwidth=0.5,
            showgrid=True,
            zeroline=True,
            zerolinecolor='lightgray',
            zerolinewidth=0.8,
            tickfont=dict(size=10, color='black', family='Arial'),
            linecolor='black',
            linewidth=1,
            mirror=True
        ),
        yaxis=dict(
            title=dict(text='<b>Sample Quantile</b>', font=dict(size=12, color='black', family='Arial')),
            range=[min(osr)-y_margin, max(osr)+y_margin],
            gridcolor='lightgray',
            gridwidth=0.5,
            showgrid=True,
            zeroline=True,
            zerolinecolor='lightgray',
            zerolinewidth=0.8,
            tickfont=dict(size=10, color='black', family='Arial'),
            linecolor='black',
            linewidth=1,
            mirror=True
        ),
        plot_bgcolor='white',
        paper_bgcolor='white',
        font=dict(family="Arial, sans-serif"),
        hovermode='closest',
        width=600,
        height=500,
        margin=dict(l=80, r=100, t=80, b=60),
        showlegend=False
    )

    stats_text = (
        f'<b>Statistics:</b><br>'
        f'Mean: {mean_val:.4f}<br>'
        f'Std Dev: {std_val:.4f}<br>'
        f'Skewness: {skewness_val:.4f}<br>'
        f'Kurtosis: {kurtosis_val:.4f}<br>'
        f'RÂ²: {r**2:.4f}<br>'
        f'N: {n:,}'
    )

    fig.add_annotation(
        x=0.98, y=0.98, xref="paper", yref="paper",
        text=stats_text, showarrow=False, align="left",
        bgcolor="white", bordercolor="black", borderwidth=1, borderpad=6,
        font=dict(size=9, color='black', family='Arial')
    )

    return fig
