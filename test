src/index.css
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  background: linear-gradient(180deg, #fbfbff 0%, #f6f4fb 100%);
  font-family: Inter, ui-sans-serif, system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial;
}

/* chat scroll bar */
.chat-scroll::-webkit-scrollbar { width: 10px }
.chat-scroll::-webkit-scrollbar-thumb { background: linear-gradient(180deg, rgba(139,62,240,0.18), rgba(139,62,240,0.28)); border-radius: 10px; }

##########################
package.json
{
  "name": "pharma-frontend",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "@headlessui/react": "^1.8.0",
    "@heroicons/react": "^2.0.18",
    "clsx": "^1.2.1",
    "framer-motion": "^10.12.16"
  },
  "devDependencies": {
    "autoprefixer": "^10.4.14",
    "postcss": "^8.4.24",
    "tailwindcss": "^3.4.7",
    "vite": "^5.2.0"
  }
}
###################################
tailwind.config.js
/** @type {import('tailwindcss').Config} */
export default {
    content: [
      "./index.html",
      "./src/**/*.{js,jsx,ts,tsx}"
    ],
    theme: {
      extend: {
        colors: {
          brandPurple: {
            50: '#f7f6fb',
            100: '#efebfb',
            200: '#dcc9fb',
            300: '#c9a7fa',
            400: '#b06bf8',
            500: '#8b3ef0',
            600: '#6f2bd8',
            700: '#5a1fae',
            800: '#40167f',
            900: '#2a0e52'
          }
        },
        boxShadow: {
          'soft-lg': '0 10px 30px rgba(107,70,193,0.12)'
        }
      }
    },
    plugins: []
  };
###########################################
postcss.config.js
export default {
    plugins: {
      tailwindcss: {},
      autoprefixer: {}
    }
  }
  ###################################
  index.html
  <!doctype html>
<html>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>PharmaReaction UI — Demo</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>
###############################
src/main.jsx
import React from "react";
import { createRoot } from "react-dom/client";
import App from "./App";
import "./index.css";

createRoot(document.getElementById("root")).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);
########################3
src/index.css
@tailwind base;
@tailwind components;
@tailwind utilities;

/* small custom styles */
body {
  background: linear-gradient(180deg, #fbfbff 0%, #f6f4fb 100%);
  font-family: Inter, ui-sans-serif, system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial;
}

/* chat scroll bar */
.chat-scroll::-webkit-scrollbar { width: 8px }
.chat-scroll::-webkit-scrollbar-thumb { background: rgba(139, 62, 240, 0.25); border-radius: 8px; }
########################
src/config.js
// Toggle to false to call real backend endpoints (you'll need to implement those endpoints).
export const USE_MOCK = true;

// When USE_MOCK=false, set API_BASE_URL to your Streamlit backend (if you expose http endpoints).
export const API_BASE_URL = "http://localhost:8501"; // example; wire this to your backend
####################
src/mockData.js
// Mock product + chat thread data for demo
export const REACTION_TYPES = [
    "C-C Bond Formation","C-N Bond Formation","Salt Formation","Hydrolysis",
    "Amidation","Reduction","Oxidation","Cyclization","Purification",
    "Metal mediated-catalyzed","C-halogen Bond Formation","Miscellaneous"
  ];
  
  export const MOCK_PRODUCTS = [
    {
      id: "C-C Bond Formation_ProductA",
      name: "Product A",
      reaction_type: "C-C Bond Formation",
      pdf_preview: "/assets/sample_pdf_preview.png",
      scheme_image: "/assets/sample_scheme.png",
      scheme_cdx_available: true
    },
    {
      id: "Amidation_ProductB",
      name: "Product B",
      reaction_type: "Amidation",
      pdf_preview: "/assets/sample_pdf_preview.png",
      scheme_image: null,
      scheme_cdx_available: false
    }
  ];
  
  export const MOCK_THREADS = [
    { id: "t-1", title: "C-C Bond Review", snippet: "Ask about yields and procedure..." },
    { id: "t-2", title: "Amidation inquiries", snippet: "Find Product B details" }
  ];
#########################
src/components/ChatWindow.jsx
import React, { useEffect, useRef } from "react";
import { motion, AnimatePresence } from "framer-motion";
import clsx from "clsx";

const container = {
  hidden: { opacity: 0 },
  show: { opacity: 1, transition: { staggerChildren: 0.06 } }
};

const messageVariants = {
  hidden: { opacity: 0, y: 8, scale: 0.98 },
  show: { opacity: 1, y: 0, scale: 1, transition: { type: "spring", stiffness: 700, damping: 28 } },
  exit: { opacity: 0, y: -10, transition: { duration: 0.15 } }
};

export default function ChatWindow({ messages }) {
  const endRef = useRef(null);

  useEffect(() => {
    endRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  return (
    <div className="flex-1 p-6 overflow-auto chat-scroll">
      <motion.div
        className="bg-white rounded-2xl shadow-soft-lg p-6 min-h-[60vh] flex flex-col gap-4"
        variants={container}
        initial="hidden"
        animate="show"
      >
        <AnimatePresence initial={false}>
          {messages.length === 0 ? (
            <motion.div key="empty" className="text-center text-gray-400 py-10" variants={messageVariants}>
              No messages yet — start a conversation.
            </motion.div>
          ) : (
            messages.map((m, i) => (
              <motion.div
                key={i + "-" + m.content.slice(0,20)}
                className={clsx(
                  "max-w-[80%] p-4 rounded-2xl break-words",
                  m.role === "user"
                    ? "ml-auto bg-gradient-to-r from-brandPurple-400 to-brandPurple-600 text-white shadow-md"
                    : "bg-gray-50 text-gray-800 border border-gray-100"
                )}
                variants={messageVariants}
                initial="hidden"
                animate="show"
                exit="exit"
                layout
              >
                {m.content.split("\n").map((line, idx) => <div key={idx}>{line}</div>)}
              </motion.div>
            ))
          )}
        </AnimatePresence>

        <div ref={endRef} />
      </motion.div>
    </div>
  );
}

#############################
src/components/ChatInput.jsx
import React, { useState } from "react";
import { PaperAirplaneIcon } from "@heroicons/react/24/outline";
import { motion } from "framer-motion";

export default function ChatInput({ onSend, placeholder = "Ask about reaction chemistry..." }) {
  const [text, setText] = useState("");

  const handleSend = () => {
    if (!text.trim()) return;
    onSend(text.trim());
    setText("");
  };

  return (
    <div className="p-4 bg-white border-t flex gap-3 items-center">
      <textarea
        rows={1}
        value={text}
        onChange={(e) => setText(e.target.value)}
        onKeyDown={(e) => { if (e.key === "Enter" && !e.shiftKey) { e.preventDefault(); handleSend(); } }}
        className="flex-1 rounded-2xl border border-gray-200 bg-gray-50 px-4 py-3 focus:outline-none focus:ring-2 focus:ring-brandPurple-200 resize-none"
        placeholder={placeholder}
      />
      <motion.button
        whileTap={{ scale: 0.95 }}
        onClick={handleSend}
        className="bg-brandPurple-500 hover:bg-brandPurple-600 text-white p-3 rounded-full shadow"
        aria-label="Send"
      >
        <PaperAirplaneIcon className="w-5 h-5 transform rotate-45" />
      </motion.button>
    </div>
  );
}

###########################
src/components/ChatInput.jsx
import React, { useState } from "react";
import { PaperAirplaneIcon } from "@heroicons/react/24/outline";

export default function ChatInput({ onSend, placeholder = "Ask about reaction chemistry..." }) {
  const [text, setText] = useState("");

  const handleSend = () => {
    if (!text.trim()) return;
    onSend(text.trim());
    setText("");
  };

  return (
    <div className="p-4 bg-white border-t flex gap-3 items-center">
      <input
        value={text}
        onChange={(e) => setText(e.target.value)}
        onKeyDown={(e) => { if (e.key === "Enter" && !e.shiftKey) { e.preventDefault(); handleSend(); } }}
        className="flex-1 rounded-full border-gray-200 bg-gray-50 px-4 py-3 focus:outline-none focus:ring-2 focus:ring-brandPurple-200"
        placeholder={placeholder}
      />
      <button onClick={handleSend} className="bg-brandPurple-500 hover:bg-brandPurple-600 text-white p-3 rounded-full">
        <PaperAirplaneIcon className="w-5 h-5 transform rotate-45" />
      </button>
    </div>
  );
}
###############################
src/components/ChatHistory.jsx
import React from "react";
import { motion, AnimatePresence } from "framer-motion";

export default function ChatHistory({ threads = [], onSelect }) {
  const items = threads.length ? threads : [
    { id: "t-1", title: "C-C Bond Review", snippet: "Ask about yields and procedure..." },
    { id: "t-2", title: "Amidation inquiries", snippet: "Find Product B details" }
  ];

  return (
    <aside className="w-full md:w-80 bg-white border-l p-4 flex flex-col gap-4">
      <div className="flex items-center justify-between">
        <h3 className="text-lg font-semibold text-brandPurple-700">Conversations</h3>
        <button className="text-sm text-gray-500">New</button>
      </div>

      <div className="space-y-2 overflow-auto">
        <AnimatePresence>
          {items.map((t, idx) => (
            <motion.div
              key={t.id}
              initial={{ opacity: 0, x: 8 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: -8 }}
              transition={{ duration: 0.18, delay: idx * 0.03 }}
              onClick={() => onSelect?.(t.id)}
              className="p-3 rounded-lg hover:bg-gray-50 cursor-pointer border flex flex-col"
            >
              <div className="font-medium text-sm text-gray-700">{t.title}</div>
              <div className="text-xs text-gray-400 mt-1">{t.snippet}</div>
            </motion.div>
          ))}
        </AnimatePresence>
      </div>

      <div className="mt-auto text-xs text-gray-400">
        Demo UI • Light violet theme • Built with React + Tailwind + Framer Motion
      </div>
    </aside>
  );
}

################################
src/components/ProductGrid.jsx
import React from "react";
import { motion } from "framer-motion";

export default function ProductGrid({ products = [], onSelect }) {
  return (
    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
      {products.map((p, i) => (
        <motion.div
          key={p.id}
          layout
          whileHover={{ y: -6, scale: 1.02 }}
          transition={{ type: "spring", stiffness: 380, damping: 28 }}
          className="bg-white p-4 rounded-2xl shadow-md hover:shadow-xl border border-transparent hover:border-brandPurple-200 cursor-pointer"
          onClick={() => onSelect(p)}
        >
          <div className="flex items-center gap-4">
            <div className="w-16 h-16 rounded-lg bg-gradient-to-br from-brandPurple-50 to-brandPurple-100 flex items-center justify-center shadow-inner text-white text-lg font-bold">
              {p.name.slice(0,2).toUpperCase()}
            </div>

            <div className="flex-1">
              <div className="text-base font-semibold text-brandPurple-700">{p.name}</div>
              <div className="text-sm text-gray-400 mt-1">{p.reaction_type}</div>
              <div className="mt-2 text-xs text-gray-500">
                Click to open product details and extracted procedure.
              </div>
            </div>

            <div className="flex flex-col items-end gap-2">
              <div className="text-xs text-gray-400">PDF</div>
              <div className="text-sm font-medium text-brandPurple-600">Open</div>
            </div>
          </div>

          <div className="mt-4 text-sm text-gray-500">
            <div className="flex gap-2 items-center">
              <div className="px-2 py-1 rounded-full text-xs bg-brandPurple-50 text-brandPurple-600">#{p.reaction_type.split(" ")[0]}</div>
              <div className="px-2 py-1 rounded-full text-xs bg-gray-50 text-gray-600">CDX {p.scheme_cdx_available ? "✓" : "—"}</div>
            </div>
          </div>
        </motion.div>
      ))}
    </div>
  );
}

##############################
src/components/ProductDetailDrawer.jsx
import React from "react";
import { motion, AnimatePresence } from "framer-motion";

const backdrop = { visible: { opacity: 1 }, hidden: { opacity: 0 } };
const drawer = {
  hidden: { x: "100%" },
  visible: { x: 0, transition: { type: "spring", stiffness: 320, damping: 30 } },
  exit: { x: "100%", transition: { duration: 0.18 } }
};

export default function ProductDetailDrawer({ product, onClose }) {
  return (
    <AnimatePresence>
      {product && (
        <motion.div className="fixed inset-0 z-50" initial="hidden" animate="visible" exit="hidden">
          <motion.div
            className="absolute inset-0 bg-black/30"
            variants={backdrop}
            initial="hidden"
            animate="visible"
            exit="hidden"
            onClick={onClose}
          />
          <motion.div
            className="absolute right-0 top-0 h-full w-full sm:w-[560px] bg-white shadow-2xl p-6 overflow-auto"
            variants={drawer}
            initial="hidden"
            animate="visible"
            exit="exit"
          >
            <div className="flex items-start justify-between gap-4">
              <div>
                <h2 className="text-2xl font-bold text-brandPurple-700">{product.name}</h2>
                <div className="text-sm text-gray-400 mt-1">{product.reaction_type}</div>
              </div>
              <div>
                <button onClick={onClose} className="text-sm px-3 py-2 rounded-md bg-gray-100">Close</button>
              </div>
            </div>

            <div className="mt-6 grid grid-cols-1 gap-4">
              <div className="rounded-md overflow-hidden border">
                {product.pdf_preview ? (
                  <img src={product.pdf_preview} alt="pdf preview" className="w-full object-cover" />
                ) : (
                  <div className="p-10 text-center text-gray-400">No preview</div>
                )}
              </div>

              <div className="border p-3 rounded-md flex flex-col gap-3">
                <div className="flex items-center justify-between">
                  <div className="font-medium">Synthetic Scheme</div>
                  <div className="text-xs text-gray-400">High-res</div>
                </div>

                {product.scheme_image ? (
                  <img src={product.scheme_image} alt="scheme" className="w-full mt-2 rounded-md" />
                ) : (
                  <div className="mt-2 text-sm text-gray-400">No scheme available</div>
                )}

                <div className="mt-3 flex gap-2">
                  <button className="px-3 py-2 rounded-md text-white bg-brandPurple-500 hover:bg-brandPurple-600 transition">📥 Download PDF</button>
                  {product.scheme_cdx_available ? (
                    <button className="px-3 py-2 rounded-md bg-gray-100">📥 Download CDX</button>
                  ) : (
                    <button disabled className="px-3 py-2 rounded-md bg-gray-50 text-gray-300">CDX not available</button>
                  )}
                </div>
              </div>

              <div className="border p-3 rounded-md">
                <div className="font-medium">Extracted details</div>
                <pre className="text-xs bg-gray-50 p-3 rounded mt-2 text-gray-600 whitespace-pre-wrap">
API Name: —
Reaction Chemistry: —
Yield: —
Procedure: —
Tabular Data: —
(Connect to backend to populate)
                </pre>
              </div>
            </div>
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
}

###############################
src/App.jsx
import React, { useEffect, useState } from "react";
import ChatWindow from "./components/ChatWindow";
import ChatInput from "./components/ChatInput";
import ChatHistory from "./components/ChatHistory";
import ProductGrid from "./components/ProductGrid";
import ProductDetailDrawer from "./components/ProductDetailDrawer";

import { USE_MOCK } from "./config";
import { REACTION_TYPES, MOCK_PRODUCTS } from "./mockData";
import { MagnifyingGlassIcon } from "@heroicons/react/24/outline";

export default function App() {
  const [messages, setMessages] = useState([
    { role: "assistant", content: "Hello! I'm your Pharma Reaction Expert. Ask me about any reaction chemistry." }
  ]);
  const [threads, setThreads] = useState([]);
  const [currentProducts, setCurrentProducts] = useState([]);
  const [selectedProduct, setSelectedProduct] = useState(null);

  useEffect(() => {
    // load threads from localStorage if present
    const saved = localStorage.getItem("pharma_threads");
    if (saved) setThreads(JSON.parse(saved));
  }, []);

  useEffect(() => {
    localStorage.setItem("pharma_threads", JSON.stringify(threads));
  }, [threads]);

  async function handleSend(text) {
    // append user message
    const userMsg = { role: "user", content: text };
    setMessages(prev => [...prev, userMsg]);

    // detect reaction type by matching the list (mirrors backend logic)
    const matched = REACTION_TYPES.find(rt => new RegExp("\\b" + rt + "\\b", "i").test(text));
    if (matched) {
      // demo: if using mock, show MOCK_PRODUCTS filtered by reaction_type
      if (USE_MOCK) {
        const found = MOCK_PRODUCTS.filter(p => p.reaction_type === matched);
        setCurrentProducts(found);
        setMessages(prev => [...prev, { role: "assistant", content: `Found ${found.length} products for ${matched}` }]);
      } else {
        // call backend (endpoint must be implemented)
        try {
          const res = await fetch(`${API_BASE_URL}/api/reaction?type=${encodeURIComponent(matched)}`);
          const data = await res.json();
          setCurrentProducts(data.products || []);
          setMessages(prev => [...prev, { role: "assistant", content: `Found ${data.products?.length || 0} products for ${matched}` }]);
        } catch (err) {
          setMessages(prev => [...prev, { role: "assistant", content: `Error fetching products for ${matched}` }]);
        }
      }

      // Save to threads for demo
      setThreads(prev => [{ id: "t-" + Date.now(), title: matched, snippet: text }, ...prev].slice(0, 10));
    } else {
      // Not a reaction-specific query — show friendly assistant reply
      setMessages(prev => [...prev, { role: "assistant", content: "Please ask about a specific reaction chemistry type (e.g. Amidation, Reduction, C-C Bond Formation)." }]);
    }
  }

  const onSelectProduct = (product) => {
    setSelectedProduct(product);
  };

  return (
    <div className="min-h-screen grid grid-cols-1 md:grid-cols-[1fr_320px] gap-6 p-6">
      {/* Main content column */}
      <div className="flex flex-col gap-4">
        <header className="bg-gradient-to-r from-brandPurple-300 to-brandPurple-500 rounded-2xl p-6 text-white shadow-soft-lg">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-2xl font-bold">PharmaReaction AI</h1>
              <p className="text-sm mt-1 opacity-90">Reaction Chemistry Knowledge Base — demo frontend</p>
            </div>
            <div className="flex items-center gap-3">
              <button className="bg-white/20 px-3 py-2 rounded-md">Demo</button>
              <div className="text-xs text-white/90">Light violet theme</div>
            </div>
          </div>
        </header>

        <div className="flex gap-6">
          {/* Left column: optional product list */}
          <div className="w-80 hidden lg:block">
            <div className="bg-white p-4 rounded-xl border">
              <div className="flex items-center gap-3">
                <MagnifyingGlassIcon className="w-5 h-5 text-gray-400" />
                <input className="flex-1 outline-none" placeholder="Filter products (demo)" />
              </div>
              <div className="mt-4">
                <h4 className="text-xs text-gray-500">Reaction types</h4>
                <div className="mt-2 space-y-2 text-sm">
                  {REACTION_TYPES.slice(0,6).map((r) => <div key={r} className="p-2 bg-gray-50 rounded">{r}</div>)}
                </div>
              </div>
            </div>
          </div>

          {/* Chat area */}
          <div className="flex-1 flex flex-col rounded-xl">
            <ChatWindow messages={messages} />
            <ChatInput onSend={handleSend} />
          </div>
        </div>

        {/* Products result area */}
        <div className="mt-4">
          {currentProducts.length > 0 && (
            <div className="bg-white p-4 rounded-xl border">
              <div className="flex items-center justify-between">
                <h3 className="font-semibold text-brandPurple-700">Products</h3>
                <div className="text-sm text-gray-500">{currentProducts.length} results</div>
              </div>
              <div className="mt-4">
                <ProductGrid products={currentProducts} onSelect={onSelectProduct} />
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Right column: chat history */}
      <div>
        <ChatHistory threads={threads} onSelect={(id) => alert("Thread selected: " + id)} />
      </div>

      {/* Product drawer */}
      <ProductDetailDrawer product={selectedProduct} onClose={() => setSelectedProduct(null)} />
    </div>
  );
}
################################
