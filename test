import streamlit as st
from moviepy.editor import VideoFileClip, AudioFileClip
import tempfile
import os
from pathlib import Path
import shutil

def process_video(video_file, audio_file):
    """Replace audio in video with new audio file"""
    try:
        # Create temporary directory
        temp_dir = tempfile.mkdtemp()
        
        # Save uploaded files to temporary directory
        temp_video_path = os.path.join(temp_dir, "temp_video.mp4")
        temp_audio_path = os.path.join(temp_dir, "temp_audio.mp3")
        output_path = os.path.join(temp_dir, "output_video.mp4")
        
        # Save uploaded files
        with open(temp_video_path, "wb") as f:
            f.write(video_file.read())
        with open(temp_audio_path, "wb") as f:
            f.write(audio_file.read())
            
        # Load video and audio
        video = VideoFileClip(temp_video_path)
        new_audio = AudioFileClip(temp_audio_path)
        
        # If audio is longer/shorter than video, adjust it to video duration
        if new_audio.duration != video.duration:
            new_audio = new_audio.set_duration(video.duration)
        
        # Replace audio
        final_video = video.set_audio(new_audio)
        
        # Write output video
        final_video.write_videofile(
            output_path,
            codec='libx264',
            audio_codec='aac',
            temp_audiofile=os.path.join(temp_dir, 'temp-audio.m4a'),
            remove_temp=True
        )
        
        # Close clips to free up resources
        video.close()
        new_audio.close()
        final_video.close()
        
        # Read the output file
        with open(output_path, 'rb') as f:
            video_bytes = f.read()
            
        # Clean up temporary directory
        shutil.rmtree(temp_dir)
        
        return video_bytes
        
    except Exception as e:
        if 'temp_dir' in locals():
            shutil.rmtree(temp_dir)
        raise e

def main():
    st.title("Video Audio Replacement Tool")
    st.write("Upload a video and a Spanish audio file to replace the original audio")
    
    # File uploaders
    video_file = st.file_uploader("Upload Video", type=['mp4'])
    audio_file = st.file_uploader("Upload Spanish Audio", type=['mp3'])
    
    if video_file and audio_file:
        if st.button("Replace Audio"):
            try:
                with st.spinner("Processing... This may take a few minutes."):
                    # Process the video
                    output_video = process_video(video_file, audio_file)
                    
                    # Create download button
                    st.success("Processing complete! Click below to download.")
                    st.download_button(
                        label="Download Video",
                        data=output_video,
                        file_name="spanish_video.mp4",
                        mime="video/mp4"
                    )
                    
            except Exception as e:
                st.error(f"An error occurred: {str(e)}")

if __name__ == "__main__":
    main()
