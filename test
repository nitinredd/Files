import fitz
import pytesseract
from PIL import Image
from docx import Document
from docx.shared import Inches
from docx.oxml import OxmlElement
from docx.oxml.ns import qn
import numpy as np

def set_japanese_font(paragraph):
    """Set Japanese font for a paragraph"""
    for run in paragraph.runs:
        run.font.name = 'Yu Gothic'
        run._element.rPr.rFonts.set(qn('w:eastAsia'), 'Yu Gothic')

def convert_secure_pdf_to_word(pdf_path, output_path, dpi=300):
    """
    Convert Japanese PDF to Word document securely using only local processing
    
    Args:
        pdf_path (str): Path to input PDF
        output_path (str): Path for output Word document
        dpi (int): Resolution for image processing
    """
    try:
        # Create Word document
        doc = Document()
        
        # Set default font for Japanese
        style = doc.styles['Normal']
        style.font.name = 'Yu Gothic'
        style._element.rPr.rFonts.set(qn('w:eastAsia'), 'Yu Gothic')
        
        # Open PDF
        pdf_document = fitz.open(pdf_path)
        
        for page_num in range(pdf_document.page_count):
            print(f"Processing page {page_num + 1}/{pdf_document.page_count}...")
            
            # Get the page
            page = pdf_document[page_num]
            
            # Convert to image
            pix = page.get_pixmap(matrix=fitz.Matrix(dpi/72, dpi/72))
            img = Image.frombytes("RGB", [pix.width, pix.height], pix.samples)
            
            # Configure OCR for Japanese
            custom_config = r'--oem 3 --psm 6 -l jpn'
            
            # Get text with layout analysis
            data = pytesseract.image_to_data(img, output_type=pytesseract.Output.DICT, 
                                           config=custom_config)
            
            current_block = -1
            text_buffer = []
            
            # Process OCR results
            for i in range(len(data['text'])):
                if int(data['conf'][i]) > 20:  # Filter low-confidence results
                    if data['block_num'][i] != current_block:
                        # Write buffered text
                        if text_buffer:
                            text = ' '.join(text_buffer).strip()
                            if text:
                                p = doc.add_paragraph(text)
                                set_japanese_font(p)
                            text_buffer = []
                        current_block = data['block_num'][i]
                    
                    text_buffer.append(data['text'][i])
            
            # Write remaining text
            if text_buffer:
                text = ' '.join(text_buffer).strip()
                if text:
                    p = doc.add_paragraph(text)
                    set_japanese_font(p)
            
            # Add page break if not last page
            if page_num < pdf_document.page_count - 1:
                doc.add_page_break()
            
            # Clean up
            img.close()
        
        # Save document
        doc.save(output_path)
        print(f"Document successfully saved to {output_path}")
        
        # Close PDF
        pdf_document.close()
        
    except Exception as e:
        print(f"An error occurred: {str(e)}")

if __name__ == "__main__":
    pdf_path = "input.pdf"
    output_path = "output.docx"
    convert_secure_pdf_to_word(pdf_path, output_path)
