def stream_json_data(path: str) -> List[Dict]:
    """Load a JSON file that may be:
       - a single JSON object ({}),
       - a JSON array ([]), or
       - newline-delimited JSON (JSONL).
    """
    if not os.path.exists(path):
        logger.error(f"File not found: {path}")
        return []

    data: List[Dict] = []
    try:
        with open(path, 'r', encoding='utf-8') as f:
            text = f.read()
            # Strip any BOM then whitespace
            stripped = text.lstrip('\ufeff').strip()

            # Try parsing as a full JSON document
            try:
                parsed = json.loads(text)
                if isinstance(parsed, dict):
                    data = [parsed]
                elif isinstance(parsed, list):
                    data = parsed
                else:
                    logger.warning(f"Unexpected JSON root type: {type(parsed)}")
                logger.info(f"Loaded {len(data)} record(s) from full-JSON parse of {path}")
                return data
            except json.JSONDecodeError:
                # Not a single JSON doc â†’ maybe JSONL
                logger.info(f"Full-JSON parse failed, falling back to JSONL for {path}")
                f.seek(0)

            # JSONL branch
            for line in f:
                line = line.strip()
                if not line:
                    continue
                try:
                    record = json.loads(line)
                    data.append(record)
                except json.JSONDecodeError:
                    logger.warning(f"Invalid JSON line in {path}: {line[:100]}...")

        logger.info(f"Loaded {len(data)} record(s) from JSONL of {path}")
        return data

    except Exception as e:
        logger.error(f"Error loading {path}: {e}")
        return []
