package.json
{
  "name": "reaction-db-frontend",
  "version": "1.0.0",
  "private": true,
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "axios": "^1.4.0",
    "framer-motion": "^10.12.16"
  },
  "devDependencies": {
    "vite": "^5.0.0",
    "tailwindcss": "^3.4.8",
    "postcss": "^8.4.21",
    "autoprefixer": "^10.4.14"
  },
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  }
}
############################3
tailwind.config.js
export default {
    content: ['./index.html', './src/**/*.{js,jsx,ts,tsx}'],
    theme: {
      extend: {
        colors: {
          primary: '#6B21A8', // deep violet
          secondary: '#C084FC', // lighter violet
          accent: '#7C3AED', // purple
          bg: '#FAF8FF',
        }
      }
    },
    plugins: [],
  }
###########################
postcss.config.js
export default {
    plugins: {
      tailwindcss: {},
      autoprefixer: {},
    },
  };
#####################
public/index.html
<!doctype html>
<html>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <title>Reaction Database AI â€” Demo</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/index.jsx"></script>
  </body>
</html>
###########################
src/styles.css
@tailwind base;
@tailwind components;
@tailwind utilities;

/* small customizations */
body {
  background: linear-gradient(180deg, #FBFAFF 0%, #F6F0FF 100%);
  font-family: Inter, ui-sans-serif, system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial;
}
###########################
src/index.jsx
import React from 'react'
import { createRoot } from 'react-dom/client'
import App from './App'
import './styles.css'

createRoot(document.getElementById('root')).render(<App />)
#########################
src/api.js
import axios from 'axios';
export const BASE_URL = 'http://localhost:8000';

export const api = axios.create({
  baseURL: BASE_URL,
  timeout: 60000,
});

// API helpers
export const fetchReactions = () => api.get('/reactions').then(r => r.data);
export const fetchProducts = (reaction) => api.get('/products', { params: reaction ? { reaction_type: reaction } : {} }).then(r => r.data);
export const fetchProductMeta = (productId) => api.get(`/product/${productId}/meta`).then(r => r.data);
export const downloadPdfUrl = (productId) => `${BASE_URL}/product/${productId}/pdf`;
export const fetchProductDetails = (productId) => api.post('/product/details', { product_id: productId });
export const fetchSchemeImageUrl = (productId) => `${BASE_URL}/product/${productId}/scheme-image`;
export const transcribeAudio = (file, use_google=false) => {
  const fd = new FormData();
  fd.append('file', file);
  fd.append('use_google', use_google ? 'true' : 'false');
  return api.post('/transcribe', fd, { headers: {'Content-Type': 'multipart/form-data'} }).then(r => r.data);
}
#######################
src/components/MicrophoneButton.jsx
import React, { useState, useRef } from 'react';
import { FiMic, FiMicOff } from 'react-icons/fi';
import { motion } from 'framer-motion';
import { transcribeAudio } from '../api';

export default function MicrophoneButton({ onText }) {
  const [listening, setListening] = useState(false);
  const [permissionDenied, setPermissionDenied] = useState(false);
  const recognitionRef = useRef(null);
  const mediaRecorderRef = useRef(null);
  const recordedChunksRef = useRef([]);

  const startBrowserRecognition = () => {
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    if (!SpeechRecognition) {
      setPermissionDenied(true);
      return;
    }
    const r = new SpeechRecognition();
    r.lang = 'en-US';
    r.interimResults = true;
    r.continuous = true;
    r.onresult = (ev) => {
      let transcript = '';
      for (let i = 0; i < ev.results.length; i++) {
        transcript += ev.results[i][0].transcript;
      }
      onText(transcript);
    };
    r.onerror = (e) => {
      console.error('SpeechRecognition error', e);
    };
    recognitionRef.current = r;
    r.start();
    setListening(true);
  };

  const stopBrowserRecognition = () => {
    if (recognitionRef.current) {
      try { recognitionRef.current.stop(); } catch(e){/*ignore*/ }
      recognitionRef.current = null;
    }
    setListening(false);
  };

  const startRecordingAndUpload = async () => {
    if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
      alert('Media devices not supported in this browser.');
      return;
    }
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      const mr = new MediaRecorder(stream);
      recordedChunksRef.current = [];
      mr.ondataavailable = (e) => {
        if (e.data.size > 0) recordedChunksRef.current.push(e.data);
      };
      mr.onstop = async () => {
        const blob = new Blob(recordedChunksRef.current, { type: 'audio/webm' });
        // Send to backend for Google STT optionally (demo expects browser STT first)
        try {
          const res = await transcribeAudio(new File([blob], 'audio.webm'), false);
          if (res.transcript) onText(res.transcript);
        } catch (err) {
          console.error('Transcription failed', err);
        }
      };
      mediaRecorderRef.current = mr;
      mr.start();
      setListening(true);
    } catch (e) {
      console.error(e);
      setPermissionDenied(true);
    }
  };

  const stopRecording = () => {
    if (mediaRecorderRef.current && mediaRecorderRef.current.state !== 'inactive') {
      mediaRecorderRef.current.stop();
    }
    setListening(false);
  };

  const toggle = () => {
    if (listening) {
      stopBrowserRecognition();
      stopRecording();
    } else {
      // Prefer browser live recognition for instant UX:
      startBrowserRecognition();
      // fallback: startRecordingAndUpload();
    }
  };

  return (
    <motion.button
      whileTap={{ scale: 0.95 }}
      onClick={toggle}
      className={`p-3 rounded-full shadow-lg ${listening ? 'bg-gradient-to-br from-secondary to-primary text-white' : 'bg-white text-primary'}`}
      title="Start/stop microphone"
    >
      {listening ? <FiMicOff size={20} /> : <FiMic size={20} />}
    </motion.button>
  );
}
#################################
src/components/SidebarHistory.jsx
import React from 'react';
import { motion } from 'framer-motion';

export default function SidebarHistory({ history, onSelect }) {
  return (
    <div className="w-80 bg-white/60 backdrop-blur rounded-l-2xl p-4 h-full border-l">
      <h3 className="text-xl font-semibold text-primary mb-3">Chat History</h3>
      <div className="space-y-3 overflow-auto h-[70vh]">
        {history.length === 0 && <div className="text-sm text-gray-500">No chats yet.</div>}
        {history.map((h, i) => (
          <motion.div
            key={i}
            layout
            onClick={() => onSelect(i)}
            className="p-3 rounded-lg border cursor-pointer hover:shadow-md transition"
            whileHover={{ scale: 1.01 }}
          >
            <div className="text-sm font-medium text-primary">{h.title || h.preview || 'User query'}</div>
            <div className="text-xs text-gray-600 mt-1 line-clamp-2">{h.content}</div>
          </motion.div>
        ))}
      </div>
    </div>
  );
}
##############################
src/components/ReactionList.jsx
import React from 'react';
import { motion } from 'framer-motion';

export default function ReactionList({ reactions, onSelect, selected }) {
  return (
    <div className="w-full">
      <h4 className="text-lg font-semibold text-primary mb-2">Reaction Types</h4>
      <div className="grid grid-cols-2 gap-2">
        {reactions.map((r) => (
          <motion.button
            key={r}
            layout
            onClick={() => onSelect(r)}
            className={`p-3 rounded-lg ${selected === r ? 'bg-gradient-to-br from-secondary to-primary text-white' : 'bg-white border'} shadow-sm`}
          >
            {r.replace(/_/g, ' ')}
          </motion.button>
        ))}
      </div>
    </div>
  );
}
################################
src/components/ProductGrid.jsx
import React from 'react';
import { motion } from 'framer-motion';

export default function ProductGrid({ products, onView }) {
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
      {products.map(p => (
        <motion.div key={p.id} whileHover={{ y: -6 }} className="bg-white rounded-2xl p-4 shadow-md border">
          <div className="flex justify-between items-start">
            <div>
              <h3 className="text-lg font-semibold text-primary">{p.name}</h3>
              <div className="text-xs text-purple-700 mt-1">{p.reaction_type}</div>
            </div>
            <div className="flex flex-col gap-2">
              <button className="px-3 py-1 rounded-full bg-indigo-50 text-indigo-600 text-sm" onClick={() => onView(p.id)}>View</button>
            </div>
          </div>
        </motion.div>
      ))}
    </div>
  );
}
###############################
src/components/ProductDetail.jsx
import React from 'react';

export default function ProductDetail({ meta, details }) {
  if (!meta) return <div className="p-6 text-gray-500">Select a product to see details</div>;

  return (
    <div className="p-6 bg-white rounded-2xl shadow-lg">
      <div className="flex justify-between items-start">
        <div>
          <h2 className="text-2xl font-bold text-primary">{meta.name}</h2>
          <div className="text-sm text-purple-700">{meta.reaction_type}</div>
        </div>
        <div className="flex gap-2">
          {meta.scheme_image && <a href={meta.scheme_image} target="_blank" rel="noreferrer" className="px-3 py-1 rounded-md bg-secondary/20 text-secondary">Scheme</a>}
          <a href={meta.pdf_path} className="px-3 py-1 rounded-md bg-accent/10 text-accent" target="_blank" rel="noreferrer">Open PDF</a>
        </div>
      </div>

      <div className="mt-6 space-y-4">
        <div>
          <h4 className="text-sm text-gray-500">API Name</h4>
          <div className="mt-1 p-3 bg-gray-50 rounded">{details.api_name || 'â€”'}</div>
        </div>

        <div>
          <h4 className="text-sm text-gray-500">Reaction Chemistry</h4>
          <div className="mt-1 p-3 bg-gray-50 rounded">{details.reaction_chemistry || 'â€”'}</div>
        </div>

        <div>
          <h4 className="text-sm text-gray-500">Yield</h4>
          <div className="mt-1 p-3 bg-gray-50 rounded">{details.yield || 'â€”'}</div>
        </div>

        <div>
          <h4 className="text-sm text-gray-500">Procedure</h4>
          <div className="mt-1 p-3 bg-white rounded border whitespace-pre-wrap">{details.procedure || 'â€”'}</div>
        </div>

        <div>
          <h4 className="text-sm text-gray-500">Tables</h4>
          {details.tables && details.tables.length > 0 ? (
            details.tables.map((t, idx) => (
              <div className="mt-3" key={idx}>
                {t.headers && t.headers.length > 0 ? (
                  <div className="overflow-auto rounded-lg border">
                    <table className="min-w-full divide-y">
                      <thead className="bg-gray-50">
                        <tr>
                          {t.headers.map((h, i) => <th key={i} className="px-4 py-2 text-left text-xs font-medium text-gray-600">{h}</th>)}
                        </tr>
                      </thead>
                      <tbody className="bg-white divide-y">
                        {t.rows.map((r, ri) => (
                          <tr key={ri}>
                            {r.map((c, ci) => <td key={ci} className="px-4 py-2 text-sm">{c}</td>)}
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                ) : (
                  <pre className="bg-gray-50 p-3 rounded">{t.raw_md}</pre>
                )}
              </div>
            ))
          ) : <div className="text-sm text-gray-500">No tabular data detected.</div>}
        </div>
      </div>
    </div>
  );
}
###########################
src/components/ChatWindow.jsx
import React, { useState, useEffect, useRef } from 'react';
import MicrophoneButton from './MicrophoneButton';
import { motion } from 'framer-motion';

export default function ChatWindow({ onSend, messages, onSelectHistory }) {
  const [text, setText] = useState('');
  const inputRef = useRef();

  useEffect(() => {
    // Keep input visible/focused on mount
    if (inputRef.current) inputRef.current.focus();
  }, []);

  useEffect(() => {
    // If last assistant message contains something we want to preview in sidebar:
    if (messages.length > 0) {
      const last = messages[messages.length - 1];
      // Optionally notify parent for history saving
    }
  }, [messages]);

  const handleSend = () => {
    if (!text.trim()) return;
    onSend(text.trim());
    setText('');
  };

  return (
    <div className="flex-1 flex flex-col h-full">
      <div className="flex-1 overflow-auto p-4 space-y-3">
        {messages.map((m, idx) => (
          <motion.div key={idx} initial={{ opacity: 0, y: 6 }} animate={{ opacity: 1, y: 0 }}>
            {m.role === 'user' ? (
              <div className="text-right">
                <div className="inline-block bg-gradient-to-br from-secondary to-primary text-white px-4 py-2 rounded-2xl">{m.content}</div>
              </div>
            ) : (
              <div>
                <div className="inline-block bg-white border px-4 py-2 rounded-2xl">{m.content}</div>
              </div>
            )}
          </motion.div>
        ))}
      </div>

      <div className="p-4 bg-white/60 backdrop-blur rounded-t-2xl border-t flex items-center gap-3">
        <MicrophoneButton onText={(t) => setText(t)} />
        <input
          ref={inputRef}
          value={text}
          onChange={(e) => setText(e.target.value)}
          onKeyDown={(e) => { if (e.key === 'Enter') handleSend(); }}
          className="flex-1 px-4 py-3 rounded-3xl border focus:outline-none focus:ring-2 focus:ring-secondary"
          placeholder="Ask about reaction chemistry..."
        />
        <button onClick={handleSend} className="px-5 py-2 rounded-full bg-primary text-white font-semibold">Send</button>
      </div>
    </div>
  );
}
##############################
src/App.jsx
import React, { useEffect, useState } from 'react';
import { fetchReactions, fetchProducts, fetchProductMeta, fetchProductDetails } from './api';
import ReactionList from './components/ReactionList';
import ProductGrid from './components/ProductGrid';
import ProductDetail from './components/ProductDetail';
import ChatWindow from './components/ChatWindow';
import SidebarHistory from './components/SidebarHistory';
import { motion } from 'framer-motion';

export default function App() {
  const [reactions, setReactions] = useState([]);
  const [selectedReaction, setSelectedReaction] = useState(null);
  const [products, setProducts] = useState([]);
  const [selectedProductMeta, setSelectedProductMeta] = useState(null);
  const [productDetails, setProductDetails] = useState(null);
  const [messages, setMessages] = useState([
    { role: 'assistant', content: "Hello! I'm your expert assistant. Ask me anything about the selected document or reaction." }
  ]);
  const [history, setHistory] = useState([]);

  useEffect(() => {
    fetchReactions().then(setReactions).catch(err => console.error(err));
  }, []);

  useEffect(() => {
    fetchProducts(selectedReaction).then(setProducts).catch(err => console.error(err));
  }, [selectedReaction]);

  const handleSelectProduct = async (productId) => {
    // fetch meta & details
    try {
      const meta = await fetchProductMeta(productId);
      setSelectedProductMeta(meta);
      // call details endpoint
      const res = await fetchProductDetails(productId);
      const details = res.data || res;
      setProductDetails(details);
      // keep chat box visible (it is)
      setMessages(prev => [...prev, { role: 'assistant', content: `Loaded ${meta.name}. You can now ask questions about this document.` }]);
      // Save to history
      setHistory(h => [{ title: meta.name, content: details.procedure ? details.procedure.slice(0, 120) : '', productId: meta.id }, ...h]);
    } catch (e) {
      console.error(e);
      setMessages(prev => [...prev, { role: 'assistant', content: 'Failed to load product details.' }]);
    }
  };

  const handleSendMessage = (text) => {
    setMessages(prev => [...prev, { role: 'user', content: text }]);
    // For demo: if user asks about product details, we just ask backend again using same QA endpoint with a custom question.
    if (selectedProductMeta) {
      fetchProductDetails(selectedProductMeta.id, text) // note: fetchProductDetails currently only accepts product_id; in real extension, add question support
        .then(res => {
          const d = res.data || res;
          setMessages(prev => [...prev, { role: 'assistant', content: (d.api_name ? `API: ${d.api_name}\n\nProcedure excerpt:\n${(d.procedure||'').slice(0,400)}` : 'No structured answer found.') }]);
        })
        .catch(err => setMessages(prev => [...prev, { role: 'assistant', content: 'Error getting answer from backend.' }]));
    } else {
      setMessages(prev => [...prev, { role: 'assistant', content: 'Please select a product/document first.' }]);
    }
  };

  return (
    <div className="min-h-screen flex">
      {/* Left column - controls */}
      <div className="w-96 p-6">
        <div className="mb-6">
          <h1 className="text-3xl font-bold text-primary">Reaction Database AI</h1>
          <p className="text-sm text-gray-600 mt-1">Where chemistry meets intelligence â€” demo frontend</p>
        </div>

        <div className="space-y-6">
          <ReactionList reactions={reactions} selected={selectedReaction} onSelect={setSelectedReaction} />
          <div>
            <h4 className="text-lg font-semibold text-primary mb-2">Products</h4>
            <div className="space-y-3">
              <ProductGrid products={products} onView={handleSelectProduct} />
            </div>
          </div>
        </div>
      </div>

      {/* Center - chat + product details */}
      <div className="flex-1 flex flex-col p-6 gap-6">
        <div className="flex-1 flex gap-6">
          <div className="flex-1 bg-transparent rounded-2xl p-4">
            <ChatWindow messages={messages} onSend={handleSendMessage} />
          </div>
          <div className="w-1/2">
            <ProductDetail meta={selectedProductMeta} details={productDetails || {}} />
          </div>
        </div>
      </div>

      {/* Right - history */}
      <div className="w-80 p-6">
        <SidebarHistory history={history} onSelect={(i) => {
          const h = history[i];
          // reopen product
          if (h && h.productId) handleSelectProduct(h.productId);
        }} />
      </div>
    </div>
  );
}
