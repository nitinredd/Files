import React from 'react'
import Chatbot from './components/Chatbot'

function App() {
  return (
    <div className="App">
      <Chatbot
        apiBase="http://localhost:8000"
        chatEndpoint="/chat"
        tilesEndpoint="/sample-tiles"
        sttEndpoint="/speech-to-text"
        ttsEndpoint="/text-to-speech"
        widgetBg="/chat-widget-bg.png"        // your chat widget image in public/
        pageBg="/page-bg.jpg"                  // your page background in public/
      />
    </div>
  )
}

export default App
#############################################
import React, { useState, useEffect, useRef } from 'react'
import axios from 'axios'
import './Chatbot.css'

export default function Chatbot({
  apiBase,
  chatEndpoint,
  tilesEndpoint,
  sttEndpoint,
  ttsEndpoint,
  widgetBg,
  pageBg
}) {
  // Chat UI state
  const [open, setOpen] = useState(false)
  const [messages, setMessages] = useState([])
  const [input, setInput] = useState('')
  const [tiles, setTiles] = useState({})
  const [selectedTile, setSelectedTile] = useState(null)
  const [recording, setRecording] = useState(false)
  const mediaRecorderRef = useRef(null)
  const audioChunksRef = useRef([])
  const messagesEndRef = useRef(null)

  // Load sample‚Äëprompt tiles on mount
  useEffect(() => {
    axios.get(apiBase + tilesEndpoint)
      .then(res => setTiles(res.data))
      .catch(console.error)
  }, [])

  // Scroll to bottom
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })
  }, [messages])

  // On open, send greeting
  useEffect(() => {
    if (open && messages.length === 0) {
      setMessages([
        { from: 'bot', text: "Hi! How can I help?" },
        { from: 'bot', options: Object.keys(tiles) }
      ])
    }
  }, [open, tiles])

  // Helper to send text query
  const sendText = async (text) => {
    setMessages(m => [...m, { from: 'user', text }])
    setInput('')
    try {
      const res = await axios.post(apiBase + chatEndpoint, { message: text })
      const botMsg = res.data.response
      setMessages(m => [...m, { from: 'bot', text: botMsg }])
    } catch (e) {
      setMessages(m => [...m, { from: 'bot', text: "Error contacting server." }])
    }
  }

  // Handle tile click
  const onTileClick = (tile) => {
    setSelectedTile(tile)
    setMessages(m => [...m, { from: 'user', text: tile }])
    setMessages(m => [...m, { from: 'bot', options: tiles[tile] }])
  }

  // Handle option click
  const onOptionClick = (opt) => {
    sendText(opt)
    setSelectedTile(null)
  }

  // Voice recording logic
  const startRecording = async () => {
    setRecording(true)
    audioChunksRef.current = []
    const stream = await navigator.mediaDevices.getUserMedia({ audio: true })
    const mr = new MediaRecorder(stream)
    mediaRecorderRef.current = mr
    mr.ondataavailable = e => audioChunksRef.current.push(e.data)
    mr.start()
  }
  const stopRecording = () => {
    mediaRecorderRef.current.stop()
    mediaRecorderRef.current.onstop = async () => {
      setRecording(false)
      const blob = new Blob(audioChunksRef.current, { type: 'audio/webm' })
      const form = new FormData()
      form.append('file', blob, 'voice.webm')
      try {
        const sttRes = await axios.post(apiBase + sttEndpoint, form, {
          headers: { 'Content-Type': 'multipart/form-data' }
        })
        const text = sttRes.data.text
        sendText(text)
      } catch (e) {
        setMessages(m => [...m, { from: 'bot', text: "Voice-to-text failed." }])
      }
    }
  }

  // Read‚Äëaloud logic
  const playAudio = async (text) => {
    try {
      const audioRes = await axios.get(apiBase + ttsEndpoint, {
        params: { text },
        responseType: 'blob'
      })
      const url = URL.createObjectURL(audioRes.data)
      new Audio(url).play()
    } catch {
      // ignore
    }
  }

  return (
    <div
      className="chat-page"
      style={{
        backgroundImage: `url(${pageBg})`,
        backgroundSize: 'cover',
        minHeight: '100vh'
      }}
    >
      <div
        className={`chatbot-widget ${open ? 'open' : ''}`}
        style={{ backgroundImage: `url(${widgetBg})` }}
      >
        <div className="chat-header" onClick={() => setOpen(o => !o)}>
          {open ? '‚Äì‚Äì' : 'üí¨'}
        </div>

        {open && (
          <div className="chat-body">
            <div className="messages">
              {messages.map((m, i) => {
                if (m.options) {
                  return (
                    <div key={i} className="bot-options">
                      {m.options.map((opt, j) => (
                        <button key={j} onClick={() => onOptionClick(opt)}>
                          {opt}
                        </button>
                      ))}
                    </div>
                  )
                }
                return (
                  <div key={i} className={m.from}>
                    {m.text}
                    {m.from === 'bot' && (
                      <button
                        className="read-button"
                        onClick={() => playAudio(m.text)}
                      >
                        üîä
                      </button>
                    )}
                  </div>
                )
              })}
              <div ref={messagesEndRef} />
            </div>

            <div className="chat-input">
              <button
                className={`mic-button ${recording ? 'recording' : ''}`}
                onMouseDown={startRecording}
                onMouseUp={stopRecording}
              >
                üéôÔ∏è
              </button>
              <input
                value={input}
                onChange={e => setInput(e.target.value)}
                onKeyDown={e => e.key === 'Enter' && input.trim() && sendText(input)}
                placeholder="Type your question‚Ä¶"
              />
              <button
                disabled={!input.trim()}
                onClick={() => sendText(input)}
              >
                Send
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  )
}
########################################
.chat-page {
  position: relative;
  width: 100%;
  height: 100%;
}

.chatbot-widget {
  position: fixed;
  bottom: 20px;
  right: 20px;
  width: 300px;
  max-height: 400px;
  background-size: cover;
  border-radius: 10px;
  overflow: hidden;
  box-shadow: 0 0 10px rgba(0,0,0,0.3);
}
.chat-header {
  padding: 8px;
  background: rgba(0,0,0,0.5);
  color: #fff;
  cursor: pointer;
  text-align: center;
}
.chat-body {
  display: flex;
  flex-direction: column;
  height: 100%;
  background: rgba(255,255,255,0.9);
}
.messages {
  flex: 1;
  overflow-y: auto;
  padding: 8px;
}
.user {
  text-align: right;
  margin: 4px;
}
.bot {
  text-align: left;
  margin: 4px;
  position: relative;
}
.bot .read-button {
  margin-left: 8px;
  border: none;
  background: none;
  cursor: pointer;
}
.bot-options button {
  margin: 4px;
}
.chat-input {
  display: flex;
  align-items: center;
  border-top: 1px solid #ccc;
  padding: 4px;
}
.chat-input input {
  flex: 1;
  border: 1px solid #ccc;
  border-radius: 4px;
  padding: 6px;
  margin: 0 4px;
}
.chat-input button {
  border: none;
  background: #007bff;
  color: white;
  padding: 6px 12px;
  border-radius: 4px;
  cursor: pointer;
}
.mic-button {
  border: none;
  background: none;
  font-size: 1.2em;
  cursor: pointer;
}
.mic-button.recording {
  color: red;
}
###################################
