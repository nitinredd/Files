import fitz
import pytesseract
from PIL import Image
import numpy as np
import cv2
from docx import Document
from docx.shared import Inches, Pt, Cm
from docx.oxml import OxmlElement
from docx.oxml.ns import qn
from docx2pdf import convert
from tqdm import tqdm
import os

class FastDocumentConverter:
    def __init__(self, input_path, output_path, output_format='docx', dpi=300):
        self.input_path = input_path
        self.output_path = output_path
        self.output_format = output_format.lower()
        self.dpi = dpi
        self.doc = Document()
        self.setup_document()

    def setup_document(self):
        """Basic document setup"""
        style = self.doc.styles['Normal']
        style.font.name = 'Yu Gothic'
        style._element.rPr.rFonts.set(qn('w:eastAsia'), 'Yu Gothic')

    def find_tables(self, img_np):
        """Quick table detection"""
        gray = cv2.cvtColor(img_np, cv2.COLOR_RGB2GRAY)
        thresh = cv2.threshold(gray, 200, 255, cv2.THRESH_BINARY)[1]

        # Detect lines
        horizontal = np.copy(thresh)
        vertical = np.copy(thresh)

        cols = horizontal.shape[1]
        horizontal_size = cols // 30
        horizontalStructure = cv2.getStructuringElement(cv2.MORPH_RECT, (horizontal_size, 1))
        horizontal = cv2.erode(horizontal, horizontalStructure)
        horizontal = cv2.dilate(horizontal, horizontalStructure)

        rows = vertical.shape[0]
        vertical_size = rows // 30
        verticalStructure = cv2.getStructuringElement(cv2.MORPH_RECT, (1, vertical_size))
        vertical = cv2.erode(vertical, verticalStructure)
        vertical = cv2.dilate(vertical, verticalStructure)

        # Combine
        mask = cv2.bitwise_or(horizontal, vertical)
        contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

        tables = []
        for contour in contours:
            x, y, w, h = cv2.boundingRect(contour)
            if w > 100 and h > 100:  # Filter small regions
                tables.append((y, y+h, x, x+w))
        
        return sorted(tables)

    def extract_table_data(self, img_np, coords):
        """Extract table content and structure"""
        y1, y2, x1, x2 = coords
        table_img = img_np[y1:y2, x1:x2]
        
        # OCR with table configuration
        text = pytesseract.image_to_string(table_img, lang='jpn+eng', config='--psm 6')
        rows = [row.split() for row in text.split('\n') if row.strip()]
        
        if not rows:
            return None
            
        # Determine number of columns from the row with most elements
        num_cols = max(len(row) for row in rows)
        
        return rows, num_cols

    def create_word_table(self, rows, num_cols):
        """Create table in Word document"""
        if not rows or num_cols == 0:
            return

        table = self.doc.add_table(rows=len(rows), cols=num_cols)
        table.style = 'Table Grid'
        
        for i, row in enumerate(rows):
            for j, cell_text in enumerate(row):
                if j < num_cols:  # Prevent index out of range
                    cell = table.cell(i, j)
                    cell.text = cell_text
                    # Apply Japanese font
                    paragraph = cell.paragraphs[0]
                    run = paragraph.runs[0] if paragraph.runs else paragraph.add_run()
                    run.font.name = 'Yu Gothic'
                    run._element.rPr.rFonts.set(qn('w:eastAsia'), 'Yu Gothic')

        self.doc.add_paragraph()  # Add spacing after table

    def convert(self):
        """Main conversion process"""
        try:
            pdf_document = fitz.open(self.input_path)
            total_pages = pdf_document.page_count
            
            with tqdm(total=total_pages, desc="Converting PDF") as pbar:
                for page_num in range(total_pages):
                    # Get page and convert to image
                    page = pdf_document[page_num]
                    pix = page.get_pixmap(matrix=fitz.Matrix(self.dpi/72, self.dpi/72))
                    img = Image.frombytes("RGB", [pix.width, pix.height], pix.samples)
                    img_np = np.array(img)
                    
                    # Find tables
                    tables = self.find_tables(img_np)
                    last_y = 0
                    
                    # Process each table and text region
                    for table_coords in tables:
                        # Process text before table
                        if table_coords[0] > last_y:
                            text_region = img_np[last_y:table_coords[0], :]
                            text = pytesseract.image_to_string(text_region, lang='jpn+eng')
                            if text.strip():
                                p = self.doc.add_paragraph(text.strip())
                                for run in p.runs:
                                    run.font.name = 'Yu Gothic'
                                    run._element.rPr.rFonts.set(qn('w:eastAsia'), 'Yu Gothic')
                        
                        # Process table
                        table_data = self.extract_table_data(img_np, table_coords)
                        if table_data:
                            rows, num_cols = table_data
                            self.create_word_table(rows, num_cols)
                        
                        last_y = table_coords[1]
                    
                    # Process remaining text
                    if last_y < img_np.shape[0]:
                        text_region = img_np[last_y:, :]
                        text = pytesseract.image_to_string(text_region, lang='jpn+eng')
                        if text.strip():
                            p = self.doc.add_paragraph(text.strip())
                            for run in p.runs:
                                run.font.name = 'Yu Gothic'
                                run._element.rPr.rFonts.set(qn('w:eastAsia'), 'Yu Gothic')
                    
                    # Add page break if not last page
                    if page_num < total_pages - 1:
                        self.doc.add_page_break()
                    
                    img.close()
                    pbar.update(1)
            
            # Save document
            temp_docx = self.output_path
            if self.output_format == 'pdf':
                temp_docx = self.output_path.rsplit('.', 1)[0] + '_temp.docx'
            
            self.doc.save(temp_docx)
            
            if self.output_format == 'pdf':
                convert(temp_docx, self.output_path)
                os.remove(temp_docx)
            
            print(f"\nDocument successfully saved as {self.output_path}")
            
        except Exception as e:
            print(f"\nAn error occurred: {str(e)}")
        finally:
            if 'pdf_document' in locals():
                pdf_document.close()

def main():
    print("Fast Document Converter")
    print("-" * 30)
    
    input_path = input("Enter input PDF path: ")
    output_format = input("Enter desired output format (docx/pdf): ").lower()
    while output_format not in ['docx', 'pdf']:
        output_format = input("Please enter either 'docx' or 'pdf': ").lower()
    
    try:
        dpi = int(input("Enter DPI (300-600, press Enter for default 300): ") or 300)
        dpi = max(300, min(600, dpi))
    except ValueError:
        dpi = 300
    
    output_path = input_path.rsplit('.', 1)[0] + '.' + output_format
    
    converter = FastDocumentConverter(input_path, output_path, output_format, dpi)
    converter.convert()

if __name__ == "__main__":
    main()
