// src/components/ChatWindow.jsx
import React, { useRef, useEffect, useState } from "react";
import { motion } from "framer-motion";
import { FiSend, FiPlus, FiDownload, FiX } from "react-icons/fi";
import MicrophoneButton from "./MicrophoneButton";
import { searchProducts } from "../api";
import clsx from "clsx";

/**
 * ChatWindow (centered bar style)
 *
 * Props:
 *  - messages: array of chat messages
 *  - onSend(text)
 *  - loading: boolean
 *  - centeredWidth: tailwind class (kept for compatibility)
 *  - selectedCitedDocs, removeCitation
 *  - onUploadFile(file): function to handle upload (File)
 *  - openPromptGallery(): opens prompt gallery
 */
export default function ChatWindow({
  messages = [],
  onSend,
  loading = false,
  centeredWidth = "max-w-md",
  selectedCitedDocs = [],
  removeCitation = () => {},
  onUploadFile = null,
  openPromptGallery = null,
}) {
  const [text, setText] = useState("");
  const textareaRef = useRef();
  const [suggestions, setSuggestions] = useState([]);
  const [showSuggestions, setShowSuggestions] = useState(false);
  const [activeIndex, setActiveIndex] = useState(-1);
  const debounceRef = useRef(null);
  const containerRef = useRef(null);
  const fileInputRef = useRef(null);

  // Expanded message overlay index
  const [expandedMessageIndex, setExpandedMessageIndex] = useState(null);

  // autosize textarea height
  useEffect(() => {
    if (textareaRef.current) {
      textareaRef.current.style.height = "auto";
      textareaRef.current.style.height = textareaRef.current.scrollHeight + "px";
    }
  }, [text]);

  // hide suggestions on outside click
  useEffect(() => {
    const onDocClick = (e) => {
      if (!containerRef.current) return;
      if (!containerRef.current.contains(e.target)) {
        setShowSuggestions(false);
        setActiveIndex(-1);
      }
    };
    document.addEventListener("mousedown", onDocClick);
    return () => document.removeEventListener("mousedown", onDocClick);
  }, []);

  // Debounced product search suggestions
  useEffect(() => {
    const q = (text || "").trim();
    if (q.length < 2) {
      setSuggestions([]);
      setShowSuggestions(false);
      setActiveIndex(-1);
      if (debounceRef.current) {
        clearTimeout(debounceRef.current);
        debounceRef.current = null;
      }
      return;
    }
    if (debounceRef.current) clearTimeout(debounceRef.current);
    debounceRef.current = setTimeout(async () => {
      try {
        const res = await searchProducts(q, 8);
        const payload = res && res.data ? res.data : res;
        setSuggestions(payload || []);
        setShowSuggestions(Array.isArray(payload) && payload.length > 0);
        setActiveIndex(-1);
      } catch (err) {
        console.error("searchProducts error:", err);
        setSuggestions([]);
        setShowSuggestions(false);
      }
    }, 220);
    return () => {
      if (debounceRef.current) {
        clearTimeout(debounceRef.current);
        debounceRef.current = null;
      }
    };
  }, [text]);

  // keyboard handling
  const onKeyDown = (e) => {
    if (showSuggestions && suggestions.length > 0) {
      if (e.key === "ArrowDown") {
        e.preventDefault();
        setActiveIndex((i) => Math.min(i + 1, suggestions.length - 1));
        return;
      } else if (e.key === "ArrowUp") {
        e.preventDefault();
        setActiveIndex((i) => Math.max(i - 1, 0));
        return;
      } else if (e.key === "Enter" && activeIndex >= 0) {
        e.preventDefault();
        chooseSuggestion(suggestions[activeIndex]);
        return;
      } else if (e.key === "Escape") {
        setShowSuggestions(false);
        setActiveIndex(-1);
        return;
      }
    }

    if (e.key === "Enter" && !e.shiftKey && !showSuggestions) {
      e.preventDefault();
      submit();
    }
  };

  const chooseSuggestion = (s) => {
    if (!s) return;
    try {
      const el = textareaRef.current;
      if (el) {
        const cursor = el.selectionStart || text.length;
        let left = text.slice(0, cursor);
        let right = text.slice(cursor);
        const lastWs = left.lastIndexOf(" ");
        const prefix = lastWs === -1 ? "" : left.slice(0, lastWs + 1);
        const newText = prefix + s.name + (right && !right.startsWith(" ") ? " " + right : right);
        setText(newText);
      } else {
        setText((t) => (t ? t + " " + s.name : s.name));
      }
    } catch (e) {
      setText((t) => (t ? t + " " + s.name : s.name));
    }
    setShowSuggestions(false);
    setActiveIndex(-1);
    setTimeout(() => textareaRef.current && textareaRef.current.focus(), 0);
  };

  const submit = () => {
    const t = text.trim();
    if (!t) return;
    onSend(t);
    setText("");
    setSuggestions([]);
    setShowSuggestions(false);
    setActiveIndex(-1);
  };

  // file upload flow: trigger hidden input
  const triggerFileInput = () => {
    if (fileInputRef.current) fileInputRef.current.click();
  };

  const handleFileChange = async (e) => {
    const f = e.target.files && e.target.files[0];
    if (!f) return;
    if (onUploadFile) {
      try {
        await onUploadFile(f);
      } catch (err) {
        console.error("onUploadFile handler error:", err);
      }
    }
    e.target.value = null;
  };

  // render a compact table for small overlay (if tables provided in message)
  const renderTable = (tbl, index) => {
    const headers = tbl.headers || [];
    const rows = tbl.rows || [];
    return (
      <div key={`tbl-${index}`} className="mt-3 mb-4 overflow-auto rounded-lg border">
        <table className="min-w-full table-auto text-sm">
          <thead className="bg-gray-50">
            <tr>
              {headers.map((h, hi) => (
                <th key={hi} className="px-3 py-2 text-left font-medium">{h}</th>
              ))}
            </tr>
          </thead>
          <tbody>
            {rows.map((r, ri) => (
              <tr key={ri} className={ri % 2 === 0 ? "bg-white" : "bg-gray-50"}>
                {r.map((c, ci) => (
                  <td key={ci} className="px-3 py-2 align-top whitespace-pre-wrap">{c}</td>
                ))}
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    );
  };

  // source cards
  const renderSources = (sources = []) => {
    if (!Array.isArray(sources) || sources.length === 0) return null;
    return (
      <div className="mt-3 grid grid-cols-1 sm:grid-cols-2 gap-3">
        {sources.map((s, i) => (
          <div key={s.product_id || i} className="border rounded-xl p-3 shadow-sm hover:shadow-lg bg-white">
            <div className="flex items-start justify-between gap-3">
              <div>
                <div className="text-sm font-semibold text-primary truncate">{s.product_name}</div>
                <div className="text-xs text-gray-400 mt-1">{s.product_id}</div>
              </div>
              <div className="flex items-center gap-2">
                <a
                  href={`/product/${encodeURIComponent(s.product_id)}/pdf`}
                  target="_blank"
                  rel="noreferrer"
                  className="px-3 py-2 bg-primary text-white rounded-md inline-flex items-center gap-2"
                  title="Download PDF"
                >
                  <FiDownload />
                  <span className="text-xs">Download</span>
                </a>
              </div>
            </div>
            {s.excerpt && <div className="mt-2 text-xs text-gray-600 whitespace-pre-wrap">{s.excerpt}</div>}
          </div>
        ))}
      </div>
    );
  };

  // render single message compactly (we're using a centered bar, so messages area above is minimal)
  const renderMessage = (m, idx) => {
    const isUser = m.role === "user";
    return (
      <motion.div
        key={idx}
        initial={{ opacity: 0, y: 8 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.24, delay: idx * 0.01 }}
        className={`mb-2 ${isUser ? "flex justify-end" : "flex justify-start"}`}
      >
        <div className={clsx("px-3 py-2 rounded-xl max-w-[80%] whitespace-pre-wrap break-words text-sm", {
          "bg-gradient-to-br from-secondary to-primary text-white": isUser,
          "bg-gray-50 text-gray-800": !isUser
        })}>
          <div style={{ whiteSpace: "pre-wrap" }}>{m.content}</div>

          {/* tables */}
          {Array.isArray(m.tables) && m.tables.length > 0 && (
            <div className="mt-2">
              {m.tables.map((t, i) => renderTable(t, i))}
            </div>
          )}

          {/* sources */}
          {Array.isArray(m.sources) && m.sources.length > 0 && (
            <div className="mt-2">
              {renderSources(m.sources)}
            </div>
          )}

          {m.loading && (
            <div className="mt-2 text-xs text-gray-500 flex items-center gap-2">
              <svg className="animate-spin h-4 w-4 text-gray-500" viewBox="0 0 24 24">
                <circle cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" strokeDasharray="60" strokeLinecap="round" fill="none"></circle>
              </svg>
              Generating...
            </div>
          )}
        </div>
      </motion.div>
    );
  };

  // Expanded overlay (when user opens results)
  const ExpandedOverlay = ({ msgIndex, onClose }) => {
    if (msgIndex === null) return null;
    const m = messages[msgIndex];
    if (!m) return null;
    return (
      <div className="fixed inset-0 z-50 flex items-stretch justify-center p-6">
        <div className="absolute inset-0 bg-black/40" onClick={onClose} />
        <div className="relative w-full max-w-3xl bg-white rounded-2xl shadow-2xl overflow-auto z-60 p-6">
          <div className="flex items-center justify-between mb-4">
            <div className="text-lg font-semibold">Detailed results</div>
            <button onClick={onClose} className="p-2 rounded-full hover:bg-gray-100">
              <FiX />
            </button>
          </div>

          <div className="prose max-w-none">
            <pre className="whitespace-pre-wrap bg-gray-50 p-4 rounded-md">{m.content}</pre>
          </div>

          {Array.isArray(m.tables) && m.tables.length > 0 && (
            <div className="mt-4">
              <h4 className="text-sm font-semibold mb-2">Extracted tables</h4>
              {m.tables.map((t, i) => renderTable(t, i))}
            </div>
          )}

          {Array.isArray(m.sources) && m.sources.length > 0 && (
            <div className="mt-4">
              <h4 className="text-sm font-semibold mb-2">Sources</h4>
              {renderSources(m.sources)}
            </div>
          )}

          <div className="mt-6 text-right">
            <button onClick={onClose} className="px-4 py-2 bg-primary text-white rounded-md">Close</button>
          </div>
        </div>
      </div>
    );
  };

  return (
    // Outer centering container — this keeps the chat "bar" centered in the page
    <div className="w-full flex justify-center px-4" ref={containerRef}>
      <div className={`w-full ${centeredWidth} mx-auto`}>

        {/* compact messages area (top) */}
        <div className="mb-3">
          {messages.slice(-4).map((m, idx) => (
            // show only last few messages in compact view; user can open expanded overlay
            <div key={`compact-${idx}`}>
              {renderMessage(m, messages.length - 4 + idx >= 0 ? messages.length - 4 + idx : idx)}
            </div>
          ))}
        </div>

        {/* Input bar (the "pill") */}
        <div className="relative">
          <div className="flex items-center gap-3 px-3 py-2 rounded-full shadow-md bg-white border">
            {/* Upload PLUS button (stylish) */}
            <button
              onClick={triggerFileInput}
              title="Upload file"
              className="flex-none inline-flex items-center justify-center h-10 w-10 rounded-full bg-gradient-to-br from-purple-500 to-indigo-500 text-white shadow hover:scale-105 transition"
            >
              <FiPlus className="h-5 w-5" />
            </button>
            <input ref={fileInputRef} type="file" className="hidden" onChange={handleFileChange} />

            {/* Microphone */}
            <div className="flex-none">
              <MicrophoneButton onText={(t) => setText(t)} />
            </div>

            {/* Textarea (take most available width) */}
            <textarea
              ref={textareaRef}
              value={text}
              onChange={(e) => setText(e.target.value)}
              rows={1}
              placeholder="Ask about reaction chemistry, type a product name, or say 'hi'..."
              className="flex-1 resize-none px-4 py-2 rounded-full border-none outline-none text-sm leading-tight"
              onKeyDown={onKeyDown}
              onFocus={() => { if (suggestions && suggestions.length > 0) setShowSuggestions(true); }}
            />

            {/* Send button */}
            <button onClick={submit} className="flex-none inline-flex items-center justify-center h-10 w-10 rounded-full bg-primary text-white shadow hover:scale-95 transition">
              <FiSend />
            </button>
          </div>

          {/* centered prompt gallery button below bar */}
          <div className="mt-3 flex justify-center">
            {typeof openPromptGallery === "function" && (
              <button
                onClick={() => openPromptGallery()}
                className="px-4 py-1 rounded-full bg-white border shadow-sm hover:shadow-md text-sm"
              >
                Prompt gallery
              </button>
            )}
          </div>

          {/* suggestions dropdown (anchored to bar) */}
          {showSuggestions && suggestions && suggestions.length > 0 && (
            <div className="absolute left-0 right-0 z-40 mt-3 rounded-xl bg-white border shadow-lg overflow-hidden">
              <ul className="max-h-56 overflow-auto">
                {suggestions.map((s, i) => (
                  <li key={s.id}>
                    <button
                      className={`w-full text-left px-4 py-3 hover:bg-gray-50 flex justify-between items-center ${i === activeIndex ? "bg-gray-100" : ""}`}
                      onMouseDown={(e) => { e.preventDefault(); chooseSuggestion(s); }}
                      onMouseEnter={() => setActiveIndex(i)}
                    >
                      <div className="truncate">
                        <div className="font-medium text-sm text-primary">{s.name}</div>
                        <div className="text-xs text-gray-400 mt-1">{(s.reaction_type || "").replace(/_/g, " ")}</div>
                      </div>
                      <div className="text-xs text-gray-400 ml-4">Select</div>
                    </button>
                  </li>
                ))}
              </ul>
            </div>
          )}

        </div>
      </div>

      {/* Expanded overlay */}
      {expandedMessageIndex !== null && (
        <ExpandedOverlay
          msgIndex={expandedMessageIndex}
          onClose={() => setExpandedMessageIndex(null)}
        />
      )}
    </div>
  );
}
