import time
import asyncio
import logging

logger = logging.getLogger(__name__)

class AppState:
    def __init__(self):
        self.ready = False
        self.initializing = False
        self.manager = None
        self.last_update = 0
        self.data_stats = {}

    async def initialize(self):
        """Kick off initialization in the background (non-blocking)."""
        # If weâ€™re already ready or in the middle of initializing, do nothing
        if self.ready or self.initializing:
            return
        self.initializing = True
        # Fire-and-forget the heavy-lifting coroutine
        asyncio.create_task(self._initialize_background())

    async def _initialize_background(self):
        """Background initialization with progress tracking."""
        try:
            logger.info("Starting data loading process...")
            agents = []

            for name, path in EMBEDDED_FILES.items():
                if not path:
                    logger.warning(f"Skipping empty path for {name}")
                    continue

                logger.info(f"Processing {name}: {path}")
                start_time = time.time()

                # Load and process data
                data = stream_json_data(path)
                if not data:
                    logger.warning(f"No data loaded for {name}")
                    continue

                documents = process_data_chunks(data, name)
                if not documents:
                    logger.warning(f"No documents created for {name}")
                    continue

                # Create vector store
                store = create_vectorstore(documents)
                if store is None:
                    logger.error(f"Vectorstore creation failed for {name}")
                    continue

                # Instantiate the child agent
                agent = ChildAgent(
                    name=name,
                    retriever=store.as_retriever(search_kwargs={"k": 5})
                )
                agents.append(agent)

                # Record stats
                self.data_stats[name] = {
                    "records": len(data),
                    "chunks": len(documents),
                    "load_time": time.time() - start_time
                }
                logger.info(
                    f"Created agent for {name} in {self.data_stats[name]['load_time']:.1f}s"
                )

            # Finalize
            self.manager = AgentManager(agents)
            self.ready = True
            self.initializing = False
            self.last_update = time.time()
            logger.info(f"Application initialized with {len(agents)} agents")

        except Exception as e:
            logger.critical(f"Initialization failed: {e}")
            self.ready = False
            self.initializing = False


# Instantiate once (outside any function)
app_state = AppState()
