import fitz  # PyMuPDF
import pytesseract
from PIL import Image
import os
import io
import tempfile
from pathlib import Path

def pdf_to_images(pdf_path):
    """
    Convert PDF pages to images using PyMuPDF with optimal resolution
    Returns a list of PIL Images
    """
    pdf_document = fitz.open(pdf_path)
    
    images = []
    for page_num in range(pdf_document.page_count):
        page = pdf_document[page_num]
        
        # Using 200% zoom - balances quality and Word compatibility
        zoom = 2.0
        mat = fitz.Matrix(zoom, zoom)
        
        # Get original page size for DPI calculation
        rect = page.rect
        dpi = int(zoom * 72)  # Default PDF DPI is 72
        
        pix = page.get_pixmap(matrix=mat, alpha=False)
        img_data = pix.tobytes("png")
        img = Image.open(io.BytesIO(img_data))
        
        if img.mode != 'RGB':
            img = img.convert('RGB')
        
        images.append((img, dpi))
    
    pdf_document.close()
    return images

def process_images_and_create_pdf(images, output_path):
    """
    Perform OCR on images and create a new PDF with structure preservation
    """
    # Enhanced Tesseract configuration for structure preservation
    custom_config = (
        '--oem 1 '  # LSTM OCR Engine Mode
        '--psm 3 '  # Auto-page segmentation with orientation and script detection
        '-l jpn+jpn_vert+eng '  # Japanese + vertical Japanese + English
        '-c preserve_interword_spaces=1 '
        '-c textord_heavy_nr=1 '  # Better table detection
        '-c textord_tablefind_recognize_tables=1 '
        '-c textord_tabfind_find_tables=1 '
        '-c tessedit_do_invert=0 '  # Don't invert text
        '-c tessedit_pageseg_mode=1 '  # Automatic page segmentation with orientation
        '-c tessedit_char_whitelist=0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-.,:;¥$€£%()[]{}「」、。 '
    )
    
    # Create a new PDF
    output_pdf = fitz.open()
    
    with tempfile.TemporaryDirectory() as temp_dir:
        for i, (image, dpi) in enumerate(images):
            print(f"Processing page {i+1}/{len(images)}...")
            
            # Save high quality image temporarily
            temp_img_path = Path(temp_dir) / f"temp_img_{i}.png"
            image.save(temp_img_path, 'PNG', quality=95, dpi=(dpi, dpi))
            
            try:
                # Perform OCR with custom configuration
                ocr_data = pytesseract.image_to_pdf_or_hocr(
                    image,
                    lang='jpn+jpn_vert+eng',
                    config=custom_config,
                    extension='pdf'
                )
                
                # Save OCR result to temporary PDF
                temp_pdf_path = Path(temp_dir) / f"temp_ocr_{i}.pdf"
                temp_pdf_path.write_bytes(ocr_data)
                
                # Open temporary PDF and add it to output PDF
                temp_pdf = fitz.open(temp_pdf_path)
                output_pdf.insert_pdf(temp_pdf)
                temp_pdf.close()
                
            except Exception as e:
                print(f"Error processing page {i+1}: {str(e)}")
                continue
    
    try:
        # Save with optimized settings for Word compatibility
        output_pdf.save(
            output_path,
            garbage=4,
            deflate=True,
            clean=True,
            linear=True,
            pretty=False,  # Reduces file complexity
            ascii=False    # Better encoding support
        )
    finally:
        output_pdf.close()

# ... rest of the code remains the same (clean_path and main functions) ...
