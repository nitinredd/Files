# debug_qq.py
import streamlit as st
import numpy as np
from scipy.stats import norm, probplot
import plotly.graph_objs as go
import matplotlib.pyplot as plt

st.set_page_config(page_title="Debug: QQ Plot Rendering", layout="wide")

st.title("Debug: Q–Q / Plotly Rendering Check")

# Use the values you reported
count = 10000
mean = 81.940
sd = 6.355
_min = 59.172
_max = 99.437

st.markdown("### Raw stats (from your bootstrap run)")
st.write(f"Count: {count} • Mean: {mean} • SD: {sd} • Min: {_min} • Max: {_max}")

# Recreate a sample using those stats (normal approximation) so we have reproducible data
rng = np.random.default_rng(12345)
vals = rng.normal(loc=mean, scale=sd, size=count)
vals = np.clip(vals, _min, _max)  # clip to match the reported range loosely

st.markdown("### Quick sanity checks")
st.write(f"actual count: {len(vals)}; mean: {vals.mean():.3f}; sd: {vals.std(ddof=1):.3f}; min: {vals.min():.3f}; max: {vals.max():.3f}")

# ---- Plotly: JMP-style Q-Q (theoretical quantiles mapped to f2 units) ----
def make_plotly_qq(vals, envelope_sims=500):
    arr = np.asarray(vals, dtype=float)
    arr = arr[np.isfinite(arr)]
    if arr.size < 3:
        return None

    vals_sorted = np.sort(arr)
    n = len(vals_sorted)
    probs = (np.arange(1, n+1) - 0.5) / n
    z_theor = norm.ppf(probs)

    sample_mean = float(vals_sorted.mean())
    sample_sd = float(vals_sorted.std(ddof=1)) if n > 1 else 0.0
    # map theoretical to sample units
    theor = sample_mean + sample_sd * z_theor

    # envelope (simulate)
    lower_env = upper_env = None
    if sample_sd > 0 and envelope_sims > 0:
        sims = rng.normal(loc=sample_mean, scale=sample_sd, size=(envelope_sims, n))
        sims.sort(axis=1)
        lower_env = np.percentile(sims, 2.5, axis=0)
        upper_env = np.percentile(sims, 97.5, axis=0)

    fig = go.Figure()
    if lower_env is not None and upper_env is not None:
        fig.add_trace(go.Scatter(x=theor, y=upper_env, mode='lines', line=dict(width=0), showlegend=False, hoverinfo='skip'))
        fig.add_trace(go.Scatter(x=theor, y=lower_env, mode='lines', fill='tonexty', fillcolor='rgba(200,200,200,0.3)', line=dict(width=0), showlegend=True, name='95% envelope'))

    fig.add_trace(go.Scatter(x=theor, y=vals_sorted, mode='markers', marker=dict(size=6, color='black'), name='Sample quantiles'))
    min_axis = min(theor.min(), vals_sorted.min())
    max_axis = max(theor.max(), vals_sorted.max())
    pad = 0.05 * (max_axis - min_axis) if (max_axis - min_axis) > 0 else 0.1
    x_line = [min_axis - pad, max_axis + pad]
    y_line = x_line
    fig.add_trace(go.Scatter(x=x_line, y=y_line, mode='lines', line=dict(color='red', width=2), name='y=x'))

    fig.update_layout(title="Plotly JMP-style Q–Q (theor->f2 units)", xaxis_title="Theoretical quantiles (mapped to f2)", yaxis_title="Sample quantiles (f2)", plot_bgcolor='white', height=500)
    # Force axis ranges explicitly (helps if auto-scaling hides points)
    fig.update_xaxes(range=[min_axis - pad, max_axis + pad])
    fig.update_yaxes(range=[min_axis - pad, max_axis + pad])
    return fig

fig = make_plotly_qq(vals)
st.markdown("### Plotly Q–Q (expected to show points + red diagonal + grey envelope)")
if fig is None:
    st.warning("Not enough data for Q–Q")
else:
    st.plotly_chart(fig, use_container_width=True)

# ---- Plotly scatter & histogram fallback ----
st.markdown("### Plotly scatter of sorted values (x=index, y=f2)")
scatter = go.Figure()
scatter.add_trace(go.Scatter(x=np.arange(len(vals)), y=np.sort(vals), mode='markers'))
scatter.update_layout(height=300)
st.plotly_chart(scatter, use_container_width=True)

st.markdown("### Plotly histogram")
hist = go.Figure()
hist.add_trace(go.Histogram(x=vals, nbinsx=40))
hist.update_layout(height=300)
st.plotly_chart(hist, use_container_width=True)

# ---- Matplotlib QQ (fallback) ----
st.markdown("### Matplotlib QQ plot (scipy.stats.probplot) — fallback")
fig2 = plt.figure(figsize=(6,4))
probplot(vals, dist="norm", sparams=(vals.mean(), vals.std(ddof=1)), plot=plt)
plt.title("Matplotlib QQ (probplot)")
st.pyplot(fig2)
