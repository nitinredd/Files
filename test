# add at top of main.py if not already:
import mimetypes
from fastapi import HTTPException
from fastapi.responses import FileResponse

# Replace your existing /product/{product_id}/scheme-image route with this:
@app.get("/product/{product_id}/scheme-image")
def product_scheme_image(product_id: str):
    """
    Serve the synthetic scheme image so the browser can DISPLAY it inline,
    and include CORS header so frontends can load it cross-origin.
    """
    # Lookup product metadata (reuse your existing helper)
    meta = product_meta(product_id)  # assumes product_meta raises HTTPException(404) if not found
    path = meta.get("scheme_image")
    if not path:
        raise HTTPException(status_code=404, detail="Scheme image not configured for this product")

    if not os.path.exists(path):
        raise HTTPException(status_code=404, detail="Scheme image file not found on server")

    # Guess content type
    ctype, _ = mimetypes.guess_type(path)
    if not ctype:
        ctype = "application/octet-stream"

    # Return FileResponse with inline disposition and explicit CORS header (defensive)
    filename = os.path.basename(path)
    headers = {
        # Allow your local frontend origin(s) â€” change or add origins as needed.
        "Access-Control-Allow-Origin": "http://localhost:5173",
        # Ask browser to display inline (do not force download)
        "Content-Disposition": f'inline; filename="{filename}"'
    }
    return FileResponse(path, media_type=ctype, headers=headers)
