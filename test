def changed_data_either85_f2s(reference_df, test_df):
    ref_index = len(reference_df)  # Initialize with max possible index
    test_index = len(test_df)
    
    # Find first index where reference >=85
    ref_means = reference_df.iloc[:, 1:].mean(axis=1)
    for i in range(len(ref_means)):
        if ref_means[i] >= 85:
            ref_index = i
            break
            
    # Find first index where test >=85
    test_means = test_df.iloc[:, 1:].mean(axis=1)
    for i in range(len(test_means)):
        if test_means[i] >= 85:
            test_index = i
            break
            
    # Use earliest occurrence between the two
    final_index = min(ref_index, test_index)
    
    # If no points >=85 found, use all data
    if final_index == len(reference_df):
        final_index = len(reference_df) - 1
        
    # Truncate both datasets
    ref_truncated = reference_df.iloc[:final_index+1]
    test_truncated = test_df.iloc[:final_index+1]
    
    f2s(ref_truncated, test_truncated)
##########################
elif input1 == 2:
    print("According to EMA/ICH/Canada/Australia guidelines")
    print("CV check results:")
    cv_check = check_cv(test_df) and check_cv(reference_df)
    print("CV should be <20% (first point) and <10% (subsequent) -", cv_check)

    # Remove time point 0 if present
    if str(reference_df.iloc[0, 0]).lower() in ['0', 'zero']:
        reference_df = reference_df.iloc[1:]
    if str(test_df.iloc[0, 0]).lower() in ['0', 'zero']:
        test_df = test_df.iloc[1:]

    if check_same_time_points(test_df, reference_df):
        print("\nAnalysis using EMA truncation rules:")
        changed_data_either85_f2s(reference_df, test_df)
        
        if not cv_check:
            print("\nWarning: CV requirements not met - results may not be valid")
            
        print("\nBootstrap analysis:")
        changed_data_either85_bca(reference_df, test_df)
    else:
        print("Error: Time points don't match between products")
