import numpy as np
import pandas as pd
from scipy.stats import norm
import matplotlib.pyplot as plt
from matplotlib.ticker import MaxNLocator
import seaborn as sns
import warnings
from rpy2.robjects.packages import importr
from rpy2.robjects import pandas2ri

# Enable pandas2ri for R integration
pandas2ri.activate()

# Import R packages
utils = importr('utils')
base = importr('base')
bootf2 = importr('bootf2')
readxl = importr('readxl')

# Suppress warnings
warnings.filterwarnings('ignore')

# File path for input Excel
file_path = 'File3.xlsx'

# Read input data
reference_df = pd.read_excel(file_path, sheet_name=0)
test_df = pd.read_excel(file_path, sheet_name=1)

# Seed for reproducibility
np.random.seed(306)

# Shared utility functions
def calculate_statistics(df):
    """Calculate mean, max, and min for each row."""
    stats = {
        'mean': df.iloc[:, 1:].mean(axis=1),
        'max': df.iloc[:, 1:].max(axis=1),
        'min': df.iloc[:, 1:].min(axis=1)
    }
    return pd.DataFrame(stats)

def plot_with_error_bars(x, y_mean, y_min, y_max, label, color, linestyle):
    """Plot data with error bars."""
    plt.errorbar(
        x, y_mean,
        yerr=[y_mean - y_min, y_max - y_mean],
        fmt='o', label=label, color=color, linestyle=linestyle
    )

def plot_histogram_and_qq(data, title_prefix):
    """Plot histogram and QQ plot for a dataset."""
    plt.figure(figsize=(10, 6))
    sns.histplot(data, kde=True, bins=15, color='blue')
    plt.title(f"{title_prefix} Histogram")
    plt.xlabel('f2 Value')
    plt.ylabel('Frequency')
    plt.savefig(f"{title_prefix}_histogram.png")
    plt.close()

    plt.figure(figsize=(8, 6))
    stats.probplot(data, dist="norm", plot=plt)
    plt.title(f"{title_prefix} QQ Plot")
    plt.savefig(f"{title_prefix}_qq_plot.png")
    plt.close()

# Plotting dissolution curves
def plot_dissolution_curves(reference_df, test_df):
    """Plot dissolution curves for both reference and test data."""
    ref_stats = calculate_statistics(reference_df)
    test_stats = calculate_statistics(test_df)

    ref_stats['Time'] = reference_df.iloc[:, 0]
    test_stats['Time'] = test_df.iloc[:, 0]

    plt.figure(figsize=(12, 6))

    plot_with_error_bars(
        ref_stats['Time'], ref_stats['mean'], ref_stats['min'], ref_stats['max'],
        label='Reference Mean', color='blue', linestyle='-'
    )

    plot_with_error_bars(
        test_stats['Time'], test_stats['mean'], test_stats['min'], test_stats['max'],
        label='Test Mean', color='green', linestyle='--'
    )

    plt.xlabel('Time')
    plt.ylabel('Dissolution (%)')
    plt.title('Dissolution Curves with Intervals')
    plt.grid(True)
    plt.gca().yaxis.set_major_locator(MaxNLocator(integer=True))
    plt.gca().set_yticks(range(0, 101, 5))
    plt.legend(loc='lower right')

    plt.savefig('dissolution_curves_with_intervals.png', dpi=300)
    plt.close()

# Validation checks
def has_minimum_time_points(df):
    """Check if the dataset has at least three non-zero time points."""
    return (df.shape[0] - (1 if df.iloc[0, 0] == 0 else 0)) >= 3

def has_dissolution_under_85(df):
    """Check if the first two time points have dissolution less than 85%."""
    mean_values = df.iloc[:, 1:].mean(axis=1)
    return all(mean_values[:2] < 85)

def time_points_match(df1, df2):
    """Check if time points match between two datasets."""
    return df1.iloc[:, 0].equals(df2.iloc[:, 0])

def has_minimum_samples(df):
    """Check if at least 12 individual dosage units are present."""
    return df.shape[1] - 1 >= 12

def calculate_cv(df):
    """Calculate the coefficient of variation."""
    std_dev = df.iloc[:, 1:].std(axis=1)
    mean = df.iloc[:, 1:].mean(axis=1)
    cv = (std_dev / mean) * 100
    return cv

# Core f2 calculations
def calculate_f2(reference_df, test_df):
    """Calculate the conventional similarity factor (f2)."""
    ref_means = reference_df.iloc[:, 1:].mean(axis=1)
    test_means = test_df.iloc[:, 1:].mean(axis=1)
    squared_differences = (test_means - ref_means) ** 2
    p = len(reference_df)
    sum_diff = squared_differences.sum()
    f2 = 100 - 25 * np.log10(1 + (1 / p) * sum_diff)
    return round(f2, 3)

def apply_guideline(reference_df, test_df, guideline):
    """Apply specific regulatory guideline."""
    if guideline == "FDA Both >= 85":
        print("Applying FDA Both >= 85 guideline...")
        if not all([has_minimum_time_points(reference_df), has_minimum_time_points(test_df)]):
            print("FAILED: Minimum time points requirement not satisfied.")
            return
        if not has_dissolution_under_85(reference_df) or not has_dissolution_under_85(test_df):
            print("FAILED: Dissolution > 85% at first two time points.")
            return
        if not time_points_match(reference_df, test_df):
            print("FAILED: Time points do not match.")
            return
        if not all([has_minimum_samples(reference_df), has_minimum_samples(test_df)]):
            print("FAILED: Minimum 12 dosage units not satisfied.")
            return
        print("FDA Both >= 85 guideline PASSED.")
        f2_value = calculate_f2(reference_df, test_df)
        print(f"Conventional f2: {f2_value}")
        return

    elif guideline == "EMA":
        print("Applying EMA guideline...")
        # Implement EMA-specific logic.
    elif guideline == "ANVISA":
        print("Applying ANVISA guideline...")
        # Implement ANVISA-specific logic.
    else:
        print(f"Guideline '{guideline}' not recognized.")

# R integration for regulatory checks
def R_Regulation(file_path, guideline):
    """Use R for regulatory calculations."""
    dr = readxl.read_excel(file_path, sheet='Sheet1')
    dt = readxl.read_excel(file_path, sheet='Sheet2')
    result = bootf2.bootf2(dt, dr, file_out=f"{guideline}_Results", regulation=guideline)
    print(f"{guideline} Summary:")
    print(result.rx2('boot.summary'))
    print("Please check the generated file for a detailed report.")

# Main execution logic
if __name__ == "__main__":
    print("Select a guideline:")
    print("1. FDA Both >= 85")
    print("2. EMA")
    print("3. ANVISA")
    guideline = input("Enter your choice (e.g., 'FDA Both >= 85'): ").strip()

    apply_guideline(reference_df, test_df, guideline)

    # Perform dissolution curve plotting
    plot_dissolution_curves(reference_df, test_df)
