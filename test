import React, { useEffect, useState } from "react";
import ChatWindow from "./components/ChatWindow";
import ChatInput from "./components/ChatInput";
import ChatHistory from "./components/ChatHistory";
import ProductGrid from "./components/ProductGrid";
import ProductDetailDrawer from "./components/ProductDetailDrawer";

import { USE_MOCK } from "./config";
import { REACTION_TYPES, MOCK_PRODUCTS } from "./mockData";

export default function App() {
  const [messages, setMessages] = useState([
    { role: "assistant", content: "Hello! I'm your Pharma Reaction Expert. Ask me about any reaction chemistry." }
  ]);
  const [threads, setThreads] = useState([]);
  const [currentProducts, setCurrentProducts] = useState([]);
  const [selectedProduct, setSelectedProduct] = useState(null);

  useEffect(() => {
    // load threads from localStorage if present
    const saved = localStorage.getItem("pharma_threads");
    if (saved) setThreads(JSON.parse(saved));
  }, []);

  useEffect(() => {
    localStorage.setItem("pharma_threads", JSON.stringify(threads));
  }, [threads]);

  async function handleSend(text) {
    // append user message
    const userMsg = { role: "user", content: text };
    setMessages(prev => [...prev, userMsg]);

    // detect reaction type by matching the list (mirrors backend logic)
    const matched = REACTION_TYPES.find(rt => new RegExp("\\b" + rt + "\\b", "i").test(text));
    if (matched) {
      // demo: if using mock, show MOCK_PRODUCTS filtered by reaction_type
      if (USE_MOCK) {
        const found = MOCK_PRODUCTS.filter(p => p.reaction_type === matched);
        setCurrentProducts(found);
        setMessages(prev => [...prev, { role: "assistant", content: `Found ${found.length} products for ${matched}` }]);
      } else {
        // call backend (endpoint must be implemented)
        try {
          const res = await fetch(`${API_BASE_URL}/api/reaction?type=${encodeURIComponent(matched)}`);
          const data = await res.json();
          setCurrentProducts(data.products || []);
          setMessages(prev => [...prev, { role: "assistant", content: `Found ${data.products?.length || 0} products for ${matched}` }]);
        } catch (err) {
          setMessages(prev => [...prev, { role: "assistant", content: `Error fetching products for ${matched}` }]);
        }
      }

      // Save to threads for demo
      setThreads(prev => [{ id: "t-" + Date.now(), title: matched, snippet: text }, ...prev].slice(0, 10));
    } else {
      // Not a reaction-specific query — show friendly assistant reply
      setMessages(prev => [...prev, { role: "assistant", content: "Please ask about a specific reaction chemistry type (e.g. Amidation, Reduction, C-C Bond Formation)." }]);
    }
  }

  const onSelectProduct = (product) => {
    setSelectedProduct(product);
  };

  return (
    <div className="min-h-screen grid grid-cols-1 md:grid-cols-[1fr_320px] gap-6 p-6">
      {/* Main content column */}
      <div className="flex flex-col gap-4">
        <header className="bg-gradient-to-r from-brandPurple-300 to-brandPurple-500 rounded-2xl p-6 text-white shadow-soft-lg">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-2xl font-bold">PharmaReaction AI</h1>
              <p className="text-sm mt-1 opacity-90">Reaction Chemistry Knowledge Base — demo frontend</p>
            </div>
            <div className="flex items-center gap-3">
              <button className="bg-white/20 px-3 py-2 rounded-md">Demo</button>
              <div className="text-xs text-white/90">Light violet theme</div>
            </div>
          </div>
        </header>

        {/* Chat area (full width of main column) */}
        <div className="flex-1 flex flex-col rounded-xl">
          <ChatWindow messages={messages} />
          <ChatInput onSend={handleSend} />
        </div>

        {/* Products result area (appears under chat when results exist) */}
        <div className="mt-4">
          {currentProducts.length > 0 && (
            <div className="bg-white p-4 rounded-xl border">
              <div className="flex items-center justify-between">
                <h3 className="font-semibold text-brandPurple-700">Products</h3>
                <div className="text-sm text-gray-500">{currentProducts.length} results</div>
              </div>
              <div className="mt-4">
                <ProductGrid products={currentProducts} onSelect={onSelectProduct} />
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Right column: chat history */}
      <div>
        <ChatHistory threads={threads} onSelect={(id) => alert("Thread selected: " + id)} />
      </div>

      {/* Product drawer */}
      <ProductDetailDrawer product={selectedProduct} onClose={() => setSelectedProduct(null)} />
    </div>
  );
}
