# [PREVIOUS CODE UNCHANGED — UP TO build_vectorstores()]

# ------------------ START STREAMLIT UI ------------------
st.set_page_config(page_title="AI Chatbot", page_icon="🤖", layout="wide")
st.title("AI Chatbot")

# Load JSON data and initialize agents
with st.spinner("Loading data and building agents..."):
    dfs = load_json_data(embedded_files)
    child_agents = build_vectorstores(dfs)
    manager = AgentManager(child_agents)

# Initialize session state once
if 'initialized' not in st.session_state:
    st.session_state.initialized = True
    st.session_state.chat_history = [("bot", "Hi! I'm your AI Chatbot. Here are sample prompts to get you started:")]
    st.session_state.chat_history_speaker = None
    st.session_state.selected_tile = None
    st.session_state.selected_question = None

# ---- STRICT QUERY HANDLING ----
class CoordinatorAgent:
    def __init__(self, child_agents):
        self.children = child_agents

    def coordinate(self, query):
        for child in self.children:
            try:
                resp = child.chain.invoke({"query": query})
                result = resp.get("result", "")
                docs = resp.get("source_documents", [])

                if not docs or all(len(doc.page_content.strip()) < 30 for doc in docs):
                    continue  # Not enough substance

                # Optional: stricter matching can be done here (e.g., cosine similarity threshold)

                image_paths = [
                    f"{key}: {doc.metadata.get(key)}"
                    for doc in docs
                    for key in ['tables', 'synthetic_scheme']
                    if doc.metadata.get(key)
                ]
                if image_paths:
                    result += "\n\nRelated Images:\n" + "\n".join(image_paths)

                return [(child.name, result)]
            except Exception as e:
                st.error(f"Error querying {child.name}: {e}")
                continue
        return [("Coordinator", "Oops! No relevant information found.")]

# --- Oversight Agent ---
class OversightAgent:
    def validate(self, answers):
        if not answers:
            return None
        first_answer = answers[0][1]
        if not first_answer or "no relevant" in first_answer.lower():
            return None
        return first_answer

# --- Sample Prompt Tiles & Dropdown ---
TILE_QUESTIONS = {
    "Product A": ["What is the API used?", "What is the batch size?", "Who is the manufacturer?"],
    "Line B": ["What is the speed range?", "What equipment is used?", "What is the pressure limit?"],
    "Facility X": ["Who owns this facility?", "What lines are operational?"],
    "Formulation Z": ["List excipients used", "Describe dissolution method"],
    "Process Y": ["Steps in granulation?", "Drying temperature?"],
    "Machine Q": ["Model number details?", "Maintenance interval?"],
    "Raw Material P": ["What are specs?", "Approved vendors?"]
}

st.subheader("Sample Prompts:")
selected_tile = None
cols = st.columns(len(TILE_QUESTIONS))

for i, (tile_name, questions) in enumerate(TILE_QUESTIONS.items()):
    with cols[i]:
        if st.button(tile_name, key=f"tile_{i}"):
            st.session_state.selected_tile = tile_name

# Show dropdown when a tile is clicked
if st.session_state.get("selected_tile"):
    selected_tile = st.session_state.selected_tile
    question = st.selectbox("Select a question:", TILE_QUESTIONS[selected_tile], key="tile_question")
    if st.button("Ask", key="tile_ask"):
        response = manager.handle_query(question)
        st.session_state.chat_history.append(("user", question))
        st.session_state.chat_history.append(("bot", response))
        st.rerun()

# ---- Chat Display ----
for idx, (sender, msg) in enumerate(st.session_state.chat_history):
    if sender == "user":
        st.chat_message("user").markdown(f"**You:** {msg}")
    else:
        st.chat_message("assistant").markdown(f"**Bot:** {msg}")
        if sender == "bot":
            unique_key = f"read_aloud_{idx}"
            if st.button("🔊 Read Aloud", key=unique_key):
                try:
                    mp3_bytes = tts_stream(msg)
                    st.audio(mp3_bytes, format="audio/mp3")
                except Exception as e:
                    st.error(f"⚠️ Could not process audio: {e}")

# ---- Text Input + Mic ----
with st.container():
    col1, col2 = st.columns([0.85, 0.15])
    query = col1.text_input("Your question:", key="input_query", value="")

    if col2.button("🎙️ Speak", key="mic_button"):
        recognized_query = recognize_google_stt()
        if recognized_query:
            st.session_state['temp_query'] = recognized_query
            st.rerun()

if 'temp_query' in st.session_state:
    query = st.session_state.pop('temp_query')

if query:
    response = manager.handle_query(query)
    st.session_state.chat_history.append(("user", query))
    st.session_state.chat_history.append(("bot", response))
    st.rerun()
