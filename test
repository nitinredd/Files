from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware   # ← add this
from pydantic import BaseModel
import pandas as pd
from gemini_client import GeminiClient

# 1. Load your workbooks
WORKBOOKS = {
    "formula": pd.read_excel("formula_master_osd.xlsx", sheet_name=None),
    "equipment": pd.read_excel("masterlist_osd_equipments.xlsx", sheet_name=None),
}

# 2. Create the app
app = FastAPI()

# 3. CORS setup — allow your React frontend origin (or "*" for all)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:5173"],  # your Vite dev server
    allow_credentials=True,
    allow_methods=["*"],       # this enables OPTIONS, GET, POST, etc.
    allow_headers=["*"],       # allow Content-Type, Authorization, etc.
)

gemini = GeminiClient()

class ChatRequest(BaseModel):
    message: str

# --- your existing agents and /chat endpoint below...
@app.post("/chat")
def chat(req: ChatRequest):
    query = req.message.strip()
    if not query:
        raise HTTPException(400, "Empty query")

    # ... dispatch to agents, build tables, summarize via Gemini ...
    coord = CoordinatorAgent(WORKBOOKS)
    hits = coord.dispatch(query)

    if not hits:
        return {"response": "Relevant information not found in the provided datasets."}

    tables = []
    for sheet, df in hits:
        tables.append({
            "sheet": sheet,
            "columns": df.columns.tolist(),
            "rows": df.values.tolist()
        })

    prompt = (
        f"User asked: '{query}'. "
        f"Found data in sheets: {', '.join(h[0] for h in hits)}. "
        "Please summarize results in plain English."
    )
    summary = gemini.generate_content(prompt)

    return {
        "response": summary,
        "tables": tables
    }
