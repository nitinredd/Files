def predictive_optimal_combinations_advanced(ref_df, test_df, regulation, 
                                             window_min, window_max, diff_threshold=None,
                                             interp_method='gpr', points_per_stratum=None):
    """
    New approach based on dissolution-based stratification with user-specified points per stratum,
    plus a final pruning step that ensures only one point where both reference and test dissolution >80%.
    """
    import random
    import numpy as np

    if points_per_stratum is None:
        points_per_stratum = {(0, 30): 2, (30, 60): 2, (60, 90): 2, (90, 100): 2}
    
    valid_times = np.unique(np.concatenate([
        np.arange(window_min, window_max+1, 3),
        np.arange(window_min, window_max+1, 5)
    ]))
    valid_times = valid_times[(valid_times >= window_min) & (valid_times <= window_max)]
    
    strata = list(points_per_stratum.keys())
    
    # Setup interpolation
    from sklearn.gaussian_process import GaussianProcessRegressor
    from sklearn.gaussian_process.kernels import ConstantKernel as C, RBF, WhiteKernel
    kernel = C(1.0, (1e-3, 1e3)) * RBF(length_scale=10.0) + WhiteKernel()
    
    ref_times_arr = ref_df.iloc[:, 0].values.astype(float)
    ref_diss = ref_df.iloc[:, 1].values.astype(float)
    test_times_arr = test_df.iloc[:, 0].values.astype(float)
    test_diss = test_df.iloc[:, 1].values.astype(float)
    
    ref_mask = ~np.isnan(ref_times_arr) & ~np.isnan(ref_diss)
    test_mask = ~np.isnan(test_times_arr) & ~np.isnan(test_diss)
    
    if interp_method == 'gpr':
        def safe_gp_interpolator(x, y):
            gp = GaussianProcessRegressor(kernel=kernel, n_restarts_optimizer=3)
            valid_mask = ~np.isnan(x) & ~np.isnan(y)
            X = x[valid_mask].reshape(-1, 1)
            gp.fit(X, y[valid_mask])
            return gp
        ref_model = safe_gp_interpolator(ref_times_arr, ref_diss)
        test_model = safe_gp_interpolator(test_times_arr, test_diss)
        def ref_interp(x):
            return ref_model.predict(np.array(x).reshape(-1, 1))
        def test_interp(x):
            return test_model.predict(np.array(x).reshape(-1, 1))
    else:
        from scipy.interpolate import interp1d
        valid_methods = ['linear', 'nearest', 'slinear', 'quadratic', 'cubic']
        interp_method = interp_method if interp_method in valid_methods else 'linear'
        ref_interp = interp1d(ref_times_arr[ref_mask], ref_diss[ref_mask],
                              kind=interp_method, bounds_error=False, fill_value=np.nan)
        test_interp = interp1d(test_times_arr[test_mask], test_diss[test_mask],
                               kind=interp_method, bounds_error=False, fill_value=np.nan)
    
    # Precompute reference predictions for valid times
    all_valid_pred = {}
    for t in valid_times:
        pred = ref_interp(np.array([t]).reshape(-1, 1))
        all_valid_pred[t] = 0.0 if t == window_min else float(pred[0])
    
    # Stratified sampling
    candidate = set()
    for (low, high), req in points_per_stratum.items():
        times_in_stratum = [t for t in valid_times if low <= all_valid_pred[t] < high]
        if len(times_in_stratum) >= req:
            selected = random.sample(times_in_stratum, req)
        else:
            selected = times_in_stratum
        candidate.update(selected)
    
    candidate.add(window_min)
    candidate = sorted(candidate)
    
    # Enhanced Pruning Step
    candidate_array = np.array(candidate).reshape(-1, 1)
    ref_pred_vals = ref_interp(candidate_array).flatten()
    test_pred_vals = test_interp(candidate_array).flatten()
    
    # Identify all candidate points where both >80% (excluding window_min)
    above_80_indices = [i for i in range(1, len(candidate)) 
                       if ref_pred_vals[i] > 80 and test_pred_vals[i] > 80]
    
    if len(above_80_indices) > 1:
        # Select the point with smallest reference value
        keep_idx = min(above_80_indices, key=lambda i: ref_pred_vals[i])
        # Remove other points above 80%
        candidate_pruned = [candidate[0]] + [candidate[i] for i in range(1, len(candidate)) 
                                           if i == keep_idx or 
                                           not (ref_pred_vals[i] > 80 and test_pred_vals[i] > 80)]
        candidate = sorted(candidate_pruned)
    
    # Ensure at most one point above 80% remains
    above_80_count = sum(1 for i in range(1, len(candidate)) 
                        if ref_pred_vals[i] > 80 and test_pred_vals[i] > 80)
    if above_80_count > 1:
        # Fallback: retain the earliest point
        above_80_times = [candidate[i] for i in range(1, len(candidate)) 
                         if ref_pred_vals[i] > 80 and test_pred_vals[i] > 80]
        earliest = min(above_80_times)
        candidate = [c for c in candidate if c == earliest or c == window_min 
                    or not (ref_interp(c)[0] > 80 and test_interp(c)[0] > 80)]
        candidate = sorted(candidate)
    
    # Final interpolation for results
    candidate_array = np.array(candidate).reshape(-1, 1)
    ref_vals = ref_interp(candidate_array)
    test_vals = test_interp(candidate_array)
    
    if candidate[0] == window_min:
        ref_vals[0] = 0.0
        test_vals[0] = 0.0
    
    # Calculate f2
    diff = test_vals - ref_vals
    p_val = len(candidate)
    f2 = 100 - 25 * np.log10(1 + (np.sum(diff**2) / p_val))
    
    # Check diversity
    diverse = True
    for (low, high), req in points_per_stratum.items():
        pts = [t for t in candidate if low <= all_valid_pred[t] < high]
        if len(pts) < req:
            diverse = False
            break
    
    compliant, reasons = check_regulatory_compliance(
        candidate, regulation,
        dict(zip(candidate, ref_vals.flatten().tolist())),
        dict(zip(candidate, test_vals.flatten().tolist()))
    )
    
    result = {
        'sequence': candidate,
        'f2': round(f2, 2),
        'compliant': compliant,
        'reasons': reasons,
        'length': len(candidate),
        'diverse': diverse,
        'ref_vals': ref_vals.flatten().tolist(),
        'test_vals': test_vals.flatten().tolist()
    }
    return [result], [result]
