// src/App.jsx
import React, { useEffect, useState, useRef } from "react";
import { motion } from "framer-motion";

import ChatWindow from "./components/ChatWindow";
import ProductTabs from "./components/ProductTabs";
import ProductDetailModal from "./components/ProductDetailModal";
import SidebarHistory from "./components/SidebarHistory";
import ReactionTiles from "./components/ReactionTiles";
import PromptGallery from "./components/PromptGallery";

import {
  fetchReactions,
  fetchProducts,
  fetchProductMeta,
  fetchProductDetails,
  fetchSchemeImageUrl,
  fetchPrompts,
  queryWithCitations,
} from "./api";

import Navbar from "./Navbar/Navbar";
import Footer from "./Footer/Footer";

import chem_logo from "../assets/Chemhub_Logo_Colored.png";

export default function App() {
  // Global app state
  const [reactions, setReactions] = useState([]);
  const [prompts, setPrompts] = useState([]);

  const [products, setProducts] = useState([]);
  const [selectedReaction, setSelectedReaction] = useState(null);

  const [selectedProduct, setSelectedProduct] = useState(null); // meta
  const [productDetails, setProductDetails] = useState(null);
  const [productListVisible, setProductListVisible] = useState(false);

  const [detailModalOpen, setDetailModalOpen] = useState(false);

  const [messages, setMessages] = useState([]); // chat messages
  const [history, setHistory] = useState([]); // conversation history list

  // Loading state flags
  const [loadingDetails, setLoadingDetails] = useState(false);
  const [queryLoading, setQueryLoading] = useState(false);

  // Selected citations (right-click / multi-select)
  const [selectedCitedDocs, setSelectedCitedDocs] = useState([]);

  // For scheme preview in chat
  const [selectedSchemeUrl, setSelectedSchemeUrl] = useState(null);

  // Prompt gallery UI
  const [promptGalleryOpen, setPromptGalleryOpen] = useState(false);

  // Expanded full-page view (when user clicks a reaction type)
  const [expandedViewOpen, setExpandedViewOpen] = useState(false);

  // Slider state
  const [slideIndex, setSlideIndex] = useState(0);
  const sliderIntervalRef = useRef(null);
  const SLIDE_COUNT = 5;

  const chatWindowRef = useRef(null);
  const uploadInputRef = useRef(null);

  // Initialize reactions and prompts
  useEffect(() => {
    fetchReactions()
      .then((r) => setReactions(r || []))
      .catch((e) => console.error("fetchReactions error:", e));

    fetchPrompts()
      .then((p) => {
        // fetchPrompts may return {prompts: [...] } or just [...]
        if (!p) return setPrompts([]);
        if (Array.isArray(p)) return setPrompts(p);
        if (p.prompts) return setPrompts(p.prompts);
        return setPrompts([]);
      })
      .catch((e) => console.warn("fetchPrompts failed:", e));

    // minimal onboarding message
    setMessages([
      {
        role: "assistant",
        content:
          "Welcome — type a reaction or product name to find documents, click a reaction tile to explore, or ask a question directly.",
      },
    ]);
  }, []);

  // Slider autoplay (one slide at a time)
  useEffect(() => {
    sliderIntervalRef.current = setInterval(() => {
      setSlideIndex((s) => (s + 1) % SLIDE_COUNT);
    }, 4200);
    return () => clearInterval(sliderIntervalRef.current);
  }, []);

  // Utility to push a message
  const pushMessage = (m) => setMessages((prev) => [...prev, m]);

  // Normalize helper
  const normalize = (s) => (s || "").toString().toLowerCase().replace(/[^a-z0-9]/g, "");

  // UPLOAD handler -> posts to relative /upload endpoint (same origin)
  const handleUploadFile = async (file, reaction_type = "Miscellaneous") => {
    if (!file) return;
    const form = new FormData();
    form.append("file", file);
    form.append("reaction_type", reaction_type || "Miscellaneous");

    try {
      // Post to relative endpoint to avoid host mismatch issues (no env variables)
      const resp = await fetch(`/upload`, {
        method: "POST",
        body: form,
      });

      if (!resp.ok) {
        const txt = await resp.text().catch(() => "");
        console.error("Upload failed:", resp.status, txt);
        pushMessage({ role: "assistant", content: `Upload failed: ${resp.status}` });
        return { ok: false, status: resp.status, text: txt };
      }

      const data = await resp.json().catch(() => ({}));
      pushMessage({ role: "assistant", content: "Upload complete and indexed (if supported)." });

      // Refresh product listing for that reaction type (best-effort)
      try {
        const prods = await fetchProducts(reaction_type);
        setProducts(prods || []);
        setProductListVisible(true);
      } catch (e) {
        // ignore
      }

      return { ok: true, data };
    } catch (err) {
      console.error("Upload error (frontend):", err);
      pushMessage({ role: "assistant", content: "Upload failed — see console." });
      return { ok: false, error: String(err) };
    }
  };

  // When user clicks a reaction tile, fetch products for that reaction and open expanded view
  const handleReactionClick = async (reactionName) => {
    setSelectedReaction(reactionName);
    try {
      const prods = await fetchProducts(reactionName);
      setProducts(prods || []);
      setProductListVisible(true);
      setExpandedViewOpen(true);
      pushMessage({ role: "assistant", content: `Found ${prods.length} products for ${reactionName}` });
    } catch (e) {
      console.error(e);
      pushMessage({ role: "assistant", content: "Error loading products for that reaction." });
    }
  };

  // When user picks a sample prompt from the gallery: send it immediately to the chat as if user typed it
  const handlePromptPick = async (promptText) => {
    setPromptGalleryOpen(false);
    await handleUserSend(promptText);
  };

  // When user selects a product
  const handleSelectProduct = async (productId) => {
    try {
      setLoadingDetails(true);
      const meta = await fetchProductMeta(productId);
      setSelectedProduct(meta);
      setProductDetails(null);
      setSelectedSchemeUrl(null);
      setDetailModalOpen(true);

      // preload scheme image url for quicker preview
      try {
        const schemeUrl = await fetchSchemeImageUrl(productId);
        setSelectedSchemeUrl(schemeUrl);
      } catch (e) {
        // ignore
      }

      // fetch full extraction (canonical extraction)
      try {
        const res = await fetchProductDetails(productId); // default extraction
        const payload = (res && res.data) ? res.data : res;
        setProductDetails(payload);
        setHistory((h) => [
          { title: meta.name, content: payload.procedure ? payload.procedure.slice(0, 120) : "", productId: meta.id },
          ...h,
        ]);
      } catch (e) {
        console.error("fetchProductDetails error (select product):", e);
        pushMessage({ role: "assistant", content: "Failed to load product details." });
      }
    } catch (err) {
      console.error("handleSelectProduct error:", err);
      pushMessage({ role: "assistant", content: "Failed to load product metadata." });
    } finally {
      setLoadingDetails(false);
    }
  };

  // When user right-clicks or context-adds a product to citations
  const handleToggleCite = (product) => {
    const exists = selectedCitedDocs.find((p) => p.id === product.id);
    if (exists) {
      setSelectedCitedDocs((prev) => prev.filter((p) => p.id !== product.id));
      pushMessage({ role: "assistant", content: `Removed citation: ${product.name}` });
    } else {
      setSelectedCitedDocs((prev) => [{ id: product.id, name: product.name, reaction_type: product.reaction_type }, ...prev]);
      pushMessage({ role: "assistant", content: `Added citation: ${product.name}` });
    }
  };

  // Remove citation helper (used by UI)
  const removeCitation = (id) => {
    const found = selectedCitedDocs.find((d) => d.id === id);
    setSelectedCitedDocs((prev) => prev.filter((d) => d.id !== id));
    if (found) pushMessage({ role: "assistant", content: `Removed citation: ${found.name}` });
  };

  // Main user-send handler
  const handleUserSend = async (text) => {
    // push user message
    pushMessage({ role: "user", content: text });

    // Reaction detection: if text is a reaction name, list products
    const norm = normalize(text);
    const match = reactions.find((r) => normalize(r) === norm || normalize(r) === normalize(text.replace(/\s+/g, "_")));
    if (match) {
      setSelectedReaction(match);
      try {
        const prods = await fetchProducts(match);
        setProducts(prods || []);
        setProductListVisible(true);
        setExpandedViewOpen(true);
        pushMessage({ role: "assistant", content: `Found ${prods.length} product${prods.length === 1 ? "" : "s"} — opened expanded view.` });
      } catch (e) {
        console.error(e);
        pushMessage({ role: "assistant", content: "Error loading products for that reaction."});
      }
      return;
    }

    // If user has selected citations, query across them
    if (selectedCitedDocs && selectedCitedDocs.length > 0) {
      setQueryLoading(true);
      pushMessage({ role: "assistant", content: "Searching selected documents...", loading: true });
      try {
        const ids = selectedCitedDocs.map((d) => d.id);
        const res = await queryWithCitations(ids, text);
        const payload = (res && res.data) ? res.data : res;
        // remove loading placeholder
        setMessages((prev) => {
          const idx = prev.map((m) => m.loading).lastIndexOf(true);
          if (idx >= 0) {
            const copy = [...prev];
            copy.splice(idx, 1);
            return copy;
          }
          return prev;
        });
        const answer = payload?.answer || payload?.response || "No relevant answer found.";
        const sources = (payload?.sources || []).map((s) => ({ product_id: s.product_id, product_name: s.product_name }));
        pushMessage({ role: "assistant", content: answer, sources });
      } catch (err) {
        console.error("queryWithCitations error:", err);
        pushMessage({ role: "assistant", content: "Error querying selected documents."});
      } finally {
        setQueryLoading(false);
      }
      return;
    }

    // If no selected product, let backend attempt to detect product name inside question
    if (!selectedProduct) {
      setQueryLoading(true);
      pushMessage({ role: "assistant", content: "Searching documents...", loading: true });
      try {
        const res = await fetchProductDetails(undefined, text);
        const payload = (res && res.data) ? res.data : res;

        // remove loading placeholder
        setMessages((prev) => {
          const idx = prev.map((m) => m.loading).lastIndexOf(true);
          if (idx >= 0) {
            const copy = [...prev];
            copy.splice(idx, 1);
            return copy;
          }
          return prev;
        });

        if (payload && payload.api_name) {
          // structured data returned
          let summary = "";
          if (payload.api_name) summary += `API: ${payload.api_name}\n\n`;
          if (payload.reaction_chemistry) summary += `Reaction: ${payload.reaction_chemistry}\n\n`;
          if (payload.yield) summary += `Yield: ${payload.yield}\n\n`;
          if (payload.procedure) summary += `Procedure (excerpt):\n${(payload.procedure || "").slice(0, 400)}\n\n`;
          pushMessage({ role: "assistant", content: summary, tables: (payload.tables || []) });
        } else if (payload && (payload.answer || payload.response)) {
          const answer = payload.answer || payload.response || "No answer.";
          const sources = (payload.sources || []).map((s) => ({ product_id: s.product_id, product_name: s.product_name }));
          pushMessage({ role: "assistant", content: answer, sources });
        } else {
          pushMessage({ role: "assistant", content: "No structured data found. Try selecting a product or ask for specific extraction." });
        }
      } catch (err) {
        console.error("fetchProductDetails error (no product):", err);
        pushMessage({ role: "assistant", content: "Error querying documents." });
      } finally {
        setQueryLoading(false);
      }
      return;
    }

    // If a product is already selected, query it directly
    setQueryLoading(true);
    pushMessage({ role: "assistant", content: "Fetching answer from selected document...", loading: true });
    try {
      const res = await fetchProductDetails(selectedProduct.id, text);
      const payload = (res && res.data) ? res.data : res;

      // remove loading placeholder
      setMessages((prev) => {
        const idx = prev.map((m) => m.loading).lastIndexOf(true);
        if (idx >= 0) {
          const copy = [...prev];
          copy.splice(idx, 1);
          return copy;
        }
        return prev;
      });

      if (payload && payload.api_name) {
        let summary = "";
        if (payload.api_name) summary += `API: ${payload.api_name}\n\n`;
        if (payload.reaction_chemistry) summary += `Reaction: ${payload.reaction_chemistry}\n\n`;
        if (payload.yield) summary += `Yield: ${payload.yield}\n\n`;
        if (payload.procedure) summary += `Procedure (excerpt):\n${(payload.procedure || "").slice(0, 400)}\n\n`;
        pushMessage({ role: "assistant", content: summary, tables: (payload.tables || []) });
        setProductDetails(payload);
        setDetailModalOpen(true);
        setHistory((h) => [{ title: selectedProduct.name, content: payload.procedure ? payload.procedure.slice(0,120) : '', productId: selectedProduct.id }, ...h]);
      } else if (payload && (payload.answer || payload.response)) {
        const answer = payload.answer || payload.response || "No answer.";
        const sources = (payload.sources || []).map((s) => ({ product_id: s.product_id, product_name: s.product_name }));
        pushMessage({ role: "assistant", content: answer, sources });
      } else {
        pushMessage({ role: "assistant", content: "No answer found from document." });
      }
    } catch (err) {
      console.error("fetchProductDetails (selected) error:", err);
      pushMessage({ role: "assistant", content: "Error querying backend." });
    } finally {
      setQueryLoading(false);
    }
  };

  // build neutral professional slides (only one visible at a time)
  const slides = [
    {
      id: 0,
      content: (
        <div className="flex flex-col items-center justify-center">
          <div className="text-lg font-semibold text-gray-700">Welcome to</div>
          <img src={chem_logo} alt="logo" className="h-20 w-auto mt-2" />
        </div>
      ),
    },
    { id: 1, content: <div className="h-full w-full flex items-center justify-center text-gray-600" /> },
    { id: 2, content: <div className="h-full w-full flex items-center justify-center text-gray-600" /> },
    { id: 3, content: <div className="h-full w-full flex items-center justify-center text-gray-600" /> },
    { id: 4, content: <div className="h-full w-full flex items-center justify-center text-gray-600" /> },
  ];

  // small helper to close expanded view
  const closeExpandedView = () => setExpandedViewOpen(false);

  // file input click handler (trigger hidden input)
  const onPlusClick = () => {
    if (uploadInputRef.current) uploadInputRef.current.click();
  };

  const onFileInputChange = async (e) => {
    const f = e.target.files && e.target.files[0];
    if (!f) return;
    await handleUploadFile(f, "Miscellaneous");
    // clear input
    e.target.value = "";
  };

  return (
    <>
      <Navbar />

      <div className="min-h-screen bg-white flex justify-center items-start">
        <div className="w-full max-w-7xl py-8 px-4">

          {/* Carousel: single big rectangle slide visible at a time */}
          <div className="mb-6">
            <div className="relative overflow-hidden rounded-2xl shadow-sm border border-gray-100">
              <div
                className="flex transition-transform duration-700 ease-in-out"
                style={{ width: `${SLIDE_COUNT * 100}%`, transform: `translateX(-${slideIndex * (100 / SLIDE_COUNT)}%)` }}
              >
                {slides.map((s, i) => (
                  <div key={s.id} className="w-full flex-shrink-0 p-6 bg-gray-50" style={{ width: `${100 / SLIDE_COUNT}%` }}>
                    <div className="h-36 flex items-center justify-center">{s.content}</div>
                  </div>
                ))}
              </div>
              {/* dot indicators */}
              <div className="absolute bottom-3 left-1/2 transform -translate-x-1/2 flex gap-2">
                {slides.map((s, i) => (
                  <button key={s.id} onClick={() => setSlideIndex(i)} className={`w-2 h-2 rounded-full ${i === slideIndex ? "bg-gray-700" : "bg-gray-300"}`} />
                ))}
              </div>
            </div>
          </div>

          {/* Reaction tiles */}
          <div className="mb-6">
            <ReactionTiles reactions={reactions} onSelect={handleReactionClick} />
          </div>

          {/* Main grid */}
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            {/* Center: chat bar (as centered bar) */}
            <div className="lg:col-span-2 flex justify-center">
              <div className="w-full max-w-2xl relative">
                {/* Hidden file input for uploads; plus button triggers it */}
                <input ref={uploadInputRef} type="file" accept=".pdf,.docx,.pptx,.xlsx,.png,.jpg,.jpeg" className="hidden" onChange={onFileInputChange} />

                {/* ChatWindow component (compact centered bar look inside ChatWindow component) */}
                <ChatWindow
                  ref={chatWindowRef}
                  messages={messages}
                  onSend={handleUserSend}
                  centeredWidth="w-full"
                  loading={queryLoading || loadingDetails}
                  selectedCitedDocs={selectedCitedDocs}
                  removeCitation={removeCitation}
                  // NOTE: ChatWindow currently doesn't render the plus button inside; we overlay it from App for visual alignment
                />

                {/* Plus button visually placed near left side of chat input (approx near microphone) */}
                <div className="absolute left-4 bottom-6">
                  <button
                    onClick={onPlusClick}
                    title="Upload file"
                    className="flex items-center justify-center w-10 h-10 rounded-full border border-gray-200 bg-white shadow hover:scale-95"
                    aria-label="Upload"
                  >
                    <span className="text-xl font-extrabold">+</span>
                  </button>
                </div>

                {/* Prompt Gallery button centered below chat window */}
                <div className="flex justify-center mt-4">
                  <button
                    onClick={() => setPromptGalleryOpen(true)}
                    className="px-4 py-2 rounded-full bg-white border shadow-sm hover:shadow-md text-sm font-medium"
                  >
                    Prompt Gallery
                  </button>
                </div>
              </div>
            </div>

            {/* Right column: history */}
            <div className="lg:col-span-1">
              <SidebarHistory history={history} onSelect={(h) => { if (h && h.productId) handleSelectProduct(h.productId); }} />
            </div>
          </div>

          {/* Prompt gallery modal (center below chat is handled by ChatWindow button invoking this) */}
          {promptGalleryOpen && (
            <div className="fixed inset-0 z-50 flex items-center justify-center">
              <div className="absolute inset-0 bg-black/40" onClick={() => setPromptGalleryOpen(false)} />
              <div className="relative w-full max-w-3xl bg-white rounded-2xl p-6 shadow-2xl">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-lg font-semibold">Prompt Gallery</h3>
                  <button className="px-3 py-1 rounded-md" onClick={() => setPromptGalleryOpen(false)}>Close</button>
                </div>
                <PromptGallery prompts={prompts} onPick={handlePromptPick} />
              </div>
            </div>
          )}

          {/* Expanded workspace overlay */}
          {expandedViewOpen && (
            <div className="fixed inset-0 z-50 bg-white/95 backdrop-blur-sm overflow-auto">
              <div className="max-w-7xl mx-auto py-8 px-6">
                <div className="flex items-center justify-between mb-4">
                  <div className="flex items-center gap-3">
                    <button className="px-3 py-2 rounded-md bg-gray-100" onClick={closeExpandedView}>Close</button>
                    <h2 className="text-xl font-semibold">{selectedReaction || "Explore Products"}</h2>
                  </div>
                  <div>
                    <button className="px-3 py-2 rounded-md bg-indigo-600 text-white" onClick={closeExpandedView}>Done</button>
                  </div>
                </div>

                <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                  {/* Left / center: big chat */}
                  <div className="lg:col-span-2">
                    <div className="bg-white rounded-2xl shadow p-4 h-[72vh] flex flex-col">
                      {/* ChatWindow inside fixed height container so input remains visible */}
                      <div className="flex-1 overflow-auto">
                        <ChatWindow
                          messages={messages}
                          onSend={handleUserSend}
                          centeredWidth="w-full"
                          loading={queryLoading || loadingDetails}
                          selectedCitedDocs={selectedCitedDocs}
                          removeCitation={removeCitation}
                        />
                      </div>
                    </div>
                  </div>

                  {/* Right: product cards */}
                  <div className="lg:col-span-1">
                    <div className="bg-white rounded-2xl shadow p-4 h-[72vh] overflow-auto">
                      <h3 className="text-lg font-semibold mb-3">Matched Products</h3>
                      {productListVisible && products && products.length > 0 ? (
                        <ProductTabs
                          products={products}
                          onSelect={(pid) => { handleSelectProduct(pid); }}
                          onContext={(p) => handleToggleCite(p)}
                          citedIds={new Set(selectedCitedDocs.map((d) => d.id))}
                        />
                      ) : (
                        <div className="text-gray-500">No products loaded — pick a reaction tile or type a product name.</div>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* Product detail modal */}
          <ProductDetailModal
            open={detailModalOpen}
            onClose={() => setDetailModalOpen(false)}
            meta={selectedProduct}
            details={productDetails}
            loading={loadingDetails}
          />
        </div>
      </div>

      <Footer />
    </>
  );
}
