import streamlit as st
import pandas as pd
import vertexai
import google.auth
from vertexai.preview.generative_models import GenerativeModel, HarmCategory, HarmBlockThreshold, SafetySetting
import os
import tempfile
import warnings
import utils.optimization, utils.domain, utils.lhs, utils.hplcread, utils.flowrate
from summit.strategies import TSEMO, Random, SNOBFIT

# -------------------------------
# Gemini / Vertex AI Configuration
# -------------------------------
def configure_gemini():
    # Update the path to your service account JSON file
    os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "D:/datascience-254609-genai.json"
    credentials, project_id = google.auth.default()

    safety_config = [
        SafetySetting(category=hc, threshold=HarmBlockThreshold.BLOCK_NONE)
        for hc in HarmCategory
    ]

    return {
        "flash_thinking": GenerativeModel("gemini-2.0-flash-thinking-exp-01-21"),
        "pro_model": GenerativeModel("gemini-2.0-pro-exp-02-05"),
        "safety": safety_config
    }

gemini_config = configure_gemini()

# -------------------------------
# Predefined Prompt Templates (as clickable cards)
# -------------------------------
PROMPT_TEMPLATES = {
    "3-Pump Basic": """I need flow rate calculations for 3 pumps where:
- Reaction time = ResidencetimeT1 × Reactor Volume (from Reactor Details)
- Flow rates determined by molar ratios of:
  1. Primary reactant (first in Pump Details)
  2. Reagent 1 (second in Pump Details) using Equivalence1
  3. Reagent 2 (third in Pump Details) using Equivalence2
- Molarity = (Concentration / Molecular Weight) × 1000
- Total flow = Reactor Volume / Residence Time
- Pump flows = (Individual molar ratio / Total molar sum) × Total flow""",
    "4-Pump Advanced": """Calculate flow rates for 4 pumps with:
- Reaction time = (ResidenceTimeT1 + ResidenceTimeT2) × Reactor Volume
- Pump 1: Base reactant (first in Pump Details) 
- Pumps 2-3: Sequential reagents using Equivalence1-2
- Pump 4: Quench flow at 1.5× total of first 3 pumps
- Account for temperature compensation from LHS experiments""",
    "Custom Setup": """Create custom flow calculations where:
- Reaction time depends on both ResidenceTime and CatalystLoading
- Flow rates must maintain stoichiometric ratios from LHS
- Include safety margin of 15% on all pump flows
- Handle unit conversions between ml/min and L/hour"""
}

# -------------------------------
# AI Code Generation for Flow Calculation
# -------------------------------
def generate_flow_code(prompt, use_deepthink, pump_df, reactor_df):
    model = gemini_config["flash_thinking"] if use_deepthink else gemini_config["pro_model"]

    full_prompt = f"""
Generate Python code for pandas DataFrame operations that:
1. Takes df_lhs, df_pump, df_reactor as inputs
2. Returns a DataFrame with calculated flow rates and reaction time
3. Uses these columns from Pump Details: {list(pump_df.columns)}
4. Uses these columns from Reactor Details: {list(reactor_df.columns)}
5. Follows chemical engineering best practices
6. Includes error checking for negative values

User Requirements:
{prompt}

Return ONLY valid Python code without explanations.
"""
    response = model.generate_content(
        contents=full_prompt,
        safety_settings=gemini_config["safety"]
    )
    return response.text

def validate_generated_code(code):
    """Basic code validation"""
    required = [
        "def generated_flowrate(",
        "df_lhs",
        "df_pump",
        "df_reactor",
        "result =",
        "return"
    ]
    return all(component in code for component in required)

def inject_generated_code(generated_code):
    """Dynamically update the flowrate module"""
    with open("utils/flowrate.py", "w") as f:
        f.write("import pandas as pd\n\n")
        f.write("def generated_flowrate(df_lhs, df_pump, df_reactor):\n")
        for line in generated_code.split('\n'):
            f.write(f"    {line}\n")
        f.write("\n    return result\n")

def safe_execute(dfs):
    """Safely execute the generated flowrate code"""
    namespace = {
        "pd": pd,
        "df_lhs": dfs["lhs"].copy(),
        "df_pump": dfs["pump"].copy(),
        "df_reactor": dfs["reactor"].copy(),
        "__builtins__": {}
    }
    try:
        with open("utils/flowrate.py", "r") as f:
            code = f.read()
        exec(code, namespace)
        result = namespace['generated_flowrate'](
            dfs["lhs"], dfs["pump"], dfs["reactor"]
        )
        return result
    except Exception as e:
        st.error(f"Execution Error: {str(e)}")
        return None

# -------------------------------
# Main Application
# -------------------------------
def main():
    st.set_page_config(page_title="AutoFlow Reactor Optimizer", layout="wide")
    st.title("🔬 AutoFlow Reactor Optimizer")

    # SESSION STATE INITIALIZATION
    if "dfs" not in st.session_state:
        st.session_state.dfs = {}
    if "chat_history" not in st.session_state:
        st.session_state.chat_history = []

    # -------------------------------
    # Sidebar Chat Interface (ChatGPT-like)
    # -------------------------------
    with st.sidebar:
        st.header("💬 Chat Query")
        # Chat input area
        user_message = st.text_area("Enter your flow calculation query:", height=100)
        if st.button("Submit Query"):
            st.session_state.chat_history.append({"role": "user", "content": user_message})
        
        st.divider()
        st.header("📄 File Upload")
        uploaded_file = st.file_uploader(
            "Upload Master Excel File",
            type=["xlsx"],
            help="File should contain sheets: LHS, Objectives, Pump Details, Reactor Details"
        )
        if uploaded_file is not None:
            try:
                st.session_state.dfs = {
                    "lhs": pd.read_excel(uploaded_file, sheet_name="LHS"),
                    "objectives": pd.read_excel(uploaded_file, sheet_name="Objectives"),
                    "pump": pd.read_excel(uploaded_file, sheet_name="Pump Details"),
                    "reactor": pd.read_excel(uploaded_file, sheet_name="Reactor Details")
                }
                st.success("Excel file loaded successfully!")
            except Exception as e:
                st.error(f"Error reading Excel file: {str(e)}")

    # -------------------------------
    # Main Chat & Template Section (centered layout)
    # -------------------------------
    st.subheader("Chat Conversation")
    chat_container = st.container()
    with chat_container:
        for chat in st.session_state.chat_history:
            if chat["role"] == "user":
                st.markdown(f"**User:** {chat['content']}")
            else:
                st.markdown(f"**Assistant:** {chat['content']}")

    # Display prompt template cards
    st.markdown("#### Quick Start Templates")
    cols = st.columns(len(PROMPT_TEMPLATES))
    for i, (title, text) in enumerate(PROMPT_TEMPLATES.items()):
        if cols[i].button(title):
            st.session_state.chat_history.append({"role": "user", "content": text})
            st.experimental_rerun()

    # -------------------------------
    # Editable Data Banner (if Excel file was uploaded)
    # -------------------------------
    if st.session_state.dfs:
        st.markdown("### 🔍 Review & Edit Configuration Data")
        tabs = st.tabs(["LHS Design", "Objectives", "Pump Details", "Reactor Details"])
        with tabs[0]:
            st.session_state.dfs["lhs"] = st.data_editor(st.session_state.dfs["lhs"], num_rows="dynamic")
        with tabs[1]:
            st.session_state.dfs["objectives"] = st.data_editor(st.session_state.dfs["objectives"], num_rows="dynamic")
        with tabs[2]:
            st.session_state.dfs["pump"] = st.data_editor(st.session_state.dfs["pump"], num_rows="dynamic")
        with tabs[3]:
            st.session_state.dfs["reactor"] = st.data_editor(st.session_state.dfs["reactor"], num_rows="dynamic")

        st.divider()

        # -------------------------------
        # Additional Inputs for Original Workflow
        # -------------------------------
        st.markdown("### ⚙️ Experiment & Optimization Settings")
        colA, colB, colC = st.columns(3)
        with colA:
            nexp = st.number_input("Number of LHS Experiments", min_value=1, value=10, step=1)
        with colB:
            nobj = st.number_input("Number of Objectives", min_value=1, value=2, step=1)
        with colC:
            nsor = st.number_input("Number of SOR (Optimization) Iterations", min_value=1, value=3, step=1)

        st.markdown("#### Pump Combination Settings")
        colP1, colP2 = st.columns(2)
        with colP1:
            npump = st.selectbox("Number of Pumps", options=[3, 4])
        with colP2:
            rscheme = st.selectbox("Reaction Scheme Identifier", options=[1, 2])

        st.markdown("#### HPLC Parameters & Folder Selection")
        colH1, colH2 = st.columns(2)
        with colH1:
            YminRT = st.number_input("Enter min RT for Purity (Yield)", value=2.0, format="%.2f")
            YmaxRT = st.number_input("Enter max RT for Purity (Yield)", value=2.35, format="%.2f")
            n_imp = st.number_input("Number of Impurities", min_value=0, value=1)
            IminRT_list = []
            ImaxRT_list = []
            if n_imp > 0:
                for i in range(int(n_imp)):
                    Imin = st.number_input(f"Enter min RT for Impurity {i+1}", value=1.3, format="%.2f", key=f"Imin_{i}")
                    Imax = st.number_input(f"Enter max RT for Impurity {i+1}", value=1.98, format="%.2f", key=f"Imax_{i}")
                    IminRT_list.append(Imin)
                    ImaxRT_list.append(Imax)
        with colH2:
            minRTISO = st.number_input("Enter min RT for Standard", value=3.9, format="%.2f")
            maxRTISO = st.number_input("Enter max RT for Standard", value=4.2, format="%.2f")
            hplc_folder = st.text_input("Enter path for HPLC folder", value="")  # User to enter folder path

        st.divider()

        # -------------------------------
        # Button to Trigger Flow Calculation and Optimization
        # -------------------------------
        if st.button("⚡ Run Full Workflow"):
            with st.spinner("Generating optimal flow calculations..."):
                # Check if user provided a chat query (or a prompt template from sidebar)
                if len(st.session_state.chat_history) > 0:
                    # Use the latest user message as the prompt
                    prompt = st.session_state.chat_history[-1]["content"]
                else:
                    st.warning("Please enter a flow calculation query in the chat area.")
                    st.stop()

                try:
                    # --- Step 1: AI-Generated Flowrate Code ---
                    code = generate_flow_code(prompt, use_deepthink=st.checkbox("DeepThink Analysis", value=False), 
                                              pump_df=st.session_state.dfs["pump"],
                                              reactor_df=st.session_state.dfs["reactor"])
                    if validate_generated_code(code):
                        inject_generated_code(code)
                        st.success("Flowrate code generated and injected successfully!")
                        with st.expander("📄 Generated Flowrate Code", expanded=False):
                            st.code(code)
                    else:
                        st.error("Invalid code structure generated.")
                        st.stop()

                    # --- Step 2: Execute the Generated Flowrate Code ---
                    flow_results = safe_execute(st.session_state.dfs)
                    if flow_results is None:
                        st.error("Flowrate calculation failed.")
                        st.stop()
                    st.success("✅ Flow rates calculated successfully!")
                    st.dataframe(flow_results.head())

                    # --- Step 3: Run LHS & Write Initial Results ---
                    st.info("Initializing domain for SOR ...")
                    domain = utils.domain.create_domain_X(st.session_state.dfs["lhs"])
                    domain = utils.domain.create_domain_y(domain, st.session_state.dfs["objectives"])
                    lhs_exp = utils.lhs.LHSDesign(nexp, domain, nobj)
                    
                    # Temporary save (using tempfile or user-specified directory)
                    save_path = os.path.join(tempfile.gettempdir(), "SOR_result.xlsx")
                    lhs_exp.to_excel(save_path)
                    st.success(f"LHS results saved temporarily at {save_path}")

                    # --- Step 4: Pump Flowrate Calculation ---
                    st.info("Calculating pump flowrates ...")
                    if npump == 3 and rscheme == 1:
                        lhs_pump = utils.flowrate.pump3_flow_rate1(lhs_exp, st.session_state.dfs["pump"], st.session_state.dfs["reactor"])
                    elif npump == 3 and rscheme == 2:
                        lhs_pump = utils.flowrate.pump3_flow_rate2(lhs_exp, st.session_state.dfs["pump"], st.session_state.dfs["reactor"])
                    elif npump == 4 and rscheme == 1:
                        lhs_pump = utils.flowrate.pump4_flow_rate1(lhs_exp, st.session_state.dfs["pump"], st.session_state.dfs["reactor"])
                    elif npump == 4 and rscheme == 2:
                        lhs_pump = utils.flowrate.pump4_flow_rate2(lhs_exp, st.session_state.dfs["pump"], st.session_state.dfs["reactor"])
                    else:
                        st.error("Invalid pump configuration selected.")
                        st.stop()
                    lhs_pump.to_excel(save_path)
                    st.success("Pump flowrates calculated and saved!")

                    # --- Step 5: Read HPLC Data & Write Results ---
                    if not hplc_folder:
                        st.warning("No HPLC folder path provided. Skipping HPLC data read.")
                    else:
                        st.info("Reading HPLC data from folder...")
                        monitor_generator = utils.hplcread.monitor_folder_creation1_csv(
                            lhs_pump, hplc_folder, nobj, YminRT, YmaxRT, IminRT_list, ImaxRT_list, minRTISO, maxRTISO
                        )
                        i = 1
                        while i <= nexp:
                            try:
                                result = next(monitor_generator)
                                if result is not None:
                                    result.to_excel(save_path)
                                    st.write(f"HPLC results read for experiment {i}")
                                    i += 1
                            except StopIteration:
                                st.warning("HPLC data generator stopped early.")
                                break
                        st.success("HPLC data read and saved!")

                    # --- Step 6: Run Optimization ---
                    st.info("Running SOR optimization...")
                    sor_in = flow_results[flow_results.columns.drop(list(flow_results.filter(regex='Flow rate')))]
                    if "Reaction time" in sor_in.columns:
                        sor_in = sor_in.drop(columns={"Reaction time"})
                    # Run initial optimization
                    sor_in, opt_result = utils.optimization.run_optimization(
                        domain, sor_in, nobj, npump, rscheme, lhs_exp, st.session_state.dfs["pump"], st.session_state.dfs["reactor"]
                    )
                    combined_results = sor_in.copy()
                    st.dataframe(sor_in)
                    for i in range(1, nsor):
                        st.info(f"Optimization iteration {i+1} of {nsor}")
                        opt_result.to_excel(save_path)
                        # Read HPLC data for optimization suggestions if folder provided
                        if hplc_folder:
                            monitor_generator1 = utils.hplcread.monitor_folder_creation1_csv(
                                sor_in, hplc_folder, nobj, YminRT, YmaxRT, IminRT_list, ImaxRT_list, minRTISO, maxRTISO,
                                use_dataframe_last_idx=True
                            )
                            try:
                                sor_in = next(monitor_generator1)
                            except StopIteration:
                                st.warning("HPLC data generator for optimization stopped early.")
                                break
                        sor_in, opt_result = utils.optimization.run_optimization(
                            domain, sor_in, nobj, npump, rscheme, lhs_exp, st.session_state.dfs["pump"], st.session_state.dfs["reactor"]
                        )
                        combined_results = pd.concat([combined_results, sor_in])
                        st.dataframe(sor_in)
                    st.success("Optimization Complete!")
                    st.balloons()
                    st.info(f"Final results saved temporarily at {save_path}")

                except Exception as e:
                    st.error(f"Error in workflow: {str(e)}")
    else:
        st.info("Please upload a master Excel file from the sidebar to proceed.")

if __name__ == "__main__":
    with warnings.catch_warnings():
        warnings.simplefilter("ignore")
    main()
