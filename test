import os
import subprocess
import json
import streamlit as st
from pydantic import BaseModel, Field
from langchain.chat_models import AzureChatOpenAI
from langchain_core.tools import tool
from langchain.schema import SystemMessage, HumanMessage

# --- Azure settings exactly as provided ---
base_url        = ""
api_version     = "2024-02-15-preview"
api_key         = ""
deployment_name = "GPT4o"
model_name      = "GPT4o"

chat_model = AzureChatOpenAI(
    azure_deployment=deployment_name,
    api_version=api_version,
    api_key=api_key,
    azure_endpoint=base_url
)

# === Python executor tool ===
@tool
class ExecutePython(BaseModel):
    """
    Executes arbitrary Python code that prints or assigns `result`.
    """
    code: str = Field(..., description="Python code snippet to execute.")

def execute_python(code: str) -> str:
    script = f"""
import sys
def safe_exec():
{code.replace(chr(10), chr(10) + '    ')}

if __name__ == "__main__":
    safe_exec()
"""
    proc = subprocess.run(["python3", "-c", script], capture_output=True, text=True, timeout=10)
    if proc.returncode != 0:
        return f"Error:\\n{proc.stderr}"
    return proc.stdout.strip()

# === Bind tool properly ===
tool_instance = ExecutePython()
llm = chat_model.bind_tools(tools=[tool_instance], tool_choice="auto")

# === Streamlit UI ===
st.title("Azure GPT‚Äë4o + Python Sandbox")

prompt = st.text_area("Enter prompt:")

if st.button("Submit"):
    sys_msg = SystemMessage(content=(
        "You are an assistant. For any math/tables/data operations, call the tool "
        "`execute_python` with Python code. Otherwise answer normally."
    ))
    user_msg = HumanMessage(content=prompt)

    response = llm([sys_msg, user_msg])
    # LangChain returns a BaseMessage; tool calls in response.tool_calls
    if hasattr(response, "tool_calls") and response.tool_calls:
        call = response.tool_calls[0]
        args = json.loads(call["arguments"])
        code = args["code"]
        with st.expander("üîç Generated code", expanded=False):
            st.code(code, language="python")
        output = execute_python(code)
        st.markdown("**Execution Result:**")
        st.text(output)
    else:
        st.markdown("**Assistant Response:**")
        st.write(response.content or "")
