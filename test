import React, { createContext, useState, useContext } from 'react';

const AppContext = createContext();

export function useAppContext() {
  return useContext(AppContext);
}

export function AppProvider({ children }) {
  const [messages, setMessages] = useState([]);
  const [products, setProducts] = useState([]);
  const [currentProduct, setCurrentProduct] = useState(null);
  const [reactionType, setReactionType] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [sidebarOpen, setSidebarOpen] = useState(true);

  const addMessage = (message) => {
    setMessages(prev => [...prev, message]);
  };

  const clearChat = () => {
    setMessages([]);
    setCurrentProduct(null);
    setReactionType('');
    setProducts([]);
  };

  const value = {
    messages,
    setMessages, // Add this line to expose setMessages
    addMessage,
    clearChat,
    products,
    setProducts,
    currentProduct,
    setCurrentProduct,
    reactionType,
    setReactionType,
    isLoading,
    setIsLoading,
    sidebarOpen,
    setSidebarOpen
  };

  return <AppContext.Provider value={value}>{children}</AppContext.Provider>;
}
#########
import React, { useContext } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { AppProvider, useAppContext } from './contexts/AppContext';
import ChatMessage from './components/ChatMessage';
import ProductGrid from './components/ProductGrid';
import ProductDetail from './components/ProductDetail';
import Sidebar from './components/Sidebar';
import SpeechRecognition from './components/SpeechRecognition';
import { FaBars } from 'react-icons/fa';

const ChatInterface = () => {
  const { 
    messages, 
    addMessage, 
    products, 
    setProducts,
    currentProduct,
    setCurrentProduct,
    reactionType,
    setReactionType,
    isLoading,
    setIsLoading,
    sidebarOpen,
    setSidebarOpen
  } = useAppContext();
  
  const [inputValue, setInputValue] = useState('');
  const [interimText, setInterimText] = useState('');

  // ... rest of the component remains the same ...

  return (
    <div className="flex h-screen max-h-screen overflow-hidden bg-gradient-to-br from-violet-50 to-purple-100">
      <Sidebar 
        isOpen={sidebarOpen} 
        onClose={() => setSidebarOpen(false)}
        chats={[1, 2, 3]} 
        onNewChat={() => {
          setMessages([]);
          setProducts([]);
          setCurrentProduct(null);
          setReactionType('');
        }}
      />
      
      {/* ... rest of the JSX ... */}
    </div>
  );
};

export default function App() {
  return (
    <AppProvider>
      <ChatInterface />
    </AppProvider>
  );
}
