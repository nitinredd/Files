app.jsx
import React, { useEffect, useState } from 'react';
import ChatWindow from './components/ChatWindow';
import ProductTabs from './components/ProductTabs';
import ProductDetailModal from './components/ProductDetailModal';
import SidebarHistory from './components/SidebarHistory';
import { fetchReactions, fetchProducts, fetchProductMeta, fetchProductDetails } from './api';

export default function App(){
  const [reactions, setReactions] = useState([]);
  const [products, setProducts] = useState([]);
  const [selectedReaction, setSelectedReaction] = useState(null);
  const [selectedProduct, setSelectedProduct] = useState(null); // meta
  const [productDetails, setProductDetails] = useState(null);
  const [productListVisible, setProductListVisible] = useState(false);
  const [detailModalOpen, setDetailModalOpen] = useState(false);
  const [messages, setMessages] = useState([
    { role: 'assistant', content: "Hello! I'm your expert assistant. Ask a reaction name or query a product." }
  ]);
  const [history, setHistory] = useState([]);
  const [loadingDetails, setLoadingDetails] = useState(false);

  useEffect(() => {
    fetchReactions().then(setReactions).catch(e=>console.error(e));
  }, []);

  // helper to push chat messages
  const pushMessage = (m) => setMessages(prev => [...prev, m]);

  // normalize helper (match reaction names)
  const normalize = s => (s||'').toString().toLowerCase().replace(/[^a-z0-9]/g, '');

  // When a user sends a message from ChatWindow:
  const handleUserSend = async (text) => {
    pushMessage({ role: 'user', content: text });

    // check for exact reaction match
    const norm = normalize(text);
    const match = reactions.find(r => normalize(r) === norm || normalize(r) === normalize(text.replace(/\s+/g,'_')));
    if (match) {
      setSelectedReaction(match);
      try {
        const prods = await fetchProducts(match);
        setProducts(prods || []);
        setProductListVisible(true);
        pushMessage({ role: 'assistant', content: `Found ${prods.length} products for ${match.replace(/_/g,' ')}. Select a tile below.`});
      } catch (e) {
        console.error(e);
        pushMessage({ role:'assistant', content: 'Error loading products for that reaction.' });
      }
      return;
    }

    // try natural language "show products for ..." style
    const prefix = text.match(/(?:show|list|find).{0,20}for\s+(.+)/i);
    if (prefix && prefix[1]) {
      const candidate = prefix[1].trim();
      const found = reactions.find(r => normalize(r).includes(normalize(candidate)) || normalize(candidate).includes(normalize(r)));
      if (found) {
        setSelectedReaction(found);
        try {
          const prods = await fetchProducts(found);
          setProducts(prods || []);
          setProductListVisible(true);
          pushMessage({ role: 'assistant', content: `Found ${prods.length} products for ${found.replace(/_/g,' ')}. Select a tile below.`});
        } catch (e) {
          console.error(e);
          pushMessage({ role:'assistant', content: 'Error fetching products.'});
        }
        return;
      }
    }

    // If no product selected yet, prompt to choose one
    if (!selectedProduct) {
      pushMessage({ role: 'assistant', content: 'Please select a product/document first — or type a reaction name to list products.' });
      return;
    }

    // Otherwise send a question to backend QA for the selected product
    try {
      setLoadingDetails(true);
      const res = await fetchProductDetails(selectedProduct.id, text);
      const d = res.data || res;
      // brief assistant reply synthesized
      let assistantText = '';
      if (d.api_name) assistantText += `API: ${d.api_name}\n\n`;
      if (d.reaction_chemistry) assistantText += `Reaction: ${d.reaction_chemistry}\n\n`;
      if (d.yield) assistantText += `Yield: ${d.yield}\n\n`;
      if (d.procedure) assistantText += `Procedure (excerpt):\n${(d.procedure||'').slice(0,600)}\n\n`;
      if (!assistantText) assistantText = 'No structured answer found.';
      pushMessage({ role: 'assistant', content: assistantText });
      setProductDetails(d);
      setDetailModalOpen(true);
      setHistory(h => [{ title: selectedProduct.name, content: text, productId: selectedProduct.id }, ...h]);
    } catch (err) {
      console.error(err);
      pushMessage({ role: 'assistant', content: 'Error querying backend.'});
    } finally {
      setLoadingDetails(false);
    }
  };

  // when user clicks a product tile/tab
  const handleSelectProduct = async (productId) => {
    const meta = await fetchProductMeta(productId);
    setSelectedProduct(meta);
    // preload details but keep modal closed until user asks or clicks "Open"
    setProductDetails(null);
    setDetailModalOpen(false);
    setLoadingDetails(true);
    try {
      const res = await fetchProductDetails(productId);
      const d = res.data || res;
      setProductDetails(d);
      // open modal with drop animation
      setTimeout(()=> {
        setDetailModalOpen(true);
        setHistory(h => [{ title: meta.name, content: d.procedure ? d.procedure.slice(0,120) : '', productId: meta.id }, ...h]);
      }, 120); // slight delay for UX
    } catch (e) {
      console.error(e);
      pushMessage({ role: 'assistant', content: 'Failed to load product details.'});
    } finally {
      setLoadingDetails(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-bg to-white flex">
      {/* center column */}
      <div className="mx-auto my-8 w-full max-w-6xl px-4">
        {/* Header */}
        <div className="text-center mb-6">
          <h1 className="text-4xl font-extrabold text-primary">Reaction Database AI</h1>
          <p className="mt-2 text-sm text-gray-600">Where chemistry meets intelligence — ask, browse and explore.</p>
        </div>

        {/* Main area: centered chat, product tabs appear beneath when productListVisible */}
        <div className="relative">
          <ChatWindow
            messages={messages}
            onSend={handleUserSend}
            centeredWidth="max-w-4xl"
          />

          {/* Product tabs appear as a dynamic horizontal list below the chat area */}
          {productListVisible && products && products.length > 0 && (
            <div className="mt-6">
              <ProductTabs products={products} onSelect={handleSelectProduct} />
            </div>
          )}
        </div>
      </div>

      {/* right side - collapsible history */}
      <SidebarHistory history={history} onSelect={(h) => {
        if (h && h.productId) handleSelectProduct(h.productId);
      }} />
      
      {/* Center detail modal overlay */}
      <ProductDetailModal
        open={detailModalOpen}
        onClose={() => setDetailModalOpen(false)}
        meta={selectedProduct}
        details={productDetails}
        loading={loadingDetails}
      />
    </div>
  );
}
###########################
src/components/ChatWindow.jsx
import React, { useRef, useEffect, useState } from 'react';
import { motion } from 'framer-motion';
import { FiSend } from 'react-icons/fi';
import MicrophoneButton from './MicrophoneButton'; // keep your mic component

export default function ChatWindow({ messages, onSend, centeredWidth = "max-w-3xl" }){
  const [text, setText] = useState('');
  const textareaRef = useRef();

  useEffect(() => {
    if (textareaRef.current) {
      textareaRef.current.style.height = 'auto';
      textareaRef.current.style.height = textareaRef.current.scrollHeight + 'px';
    }
  }, [text, messages]);

  const submit = () => {
    const t = text.trim();
    if (!t) return;
    onSend(t);
    setText('');
  };

  return (
    <div className={`mx-auto ${centeredWidth}`}>
      <div className="bg-white rounded-3xl shadow-2xl p-6">
        <div className="min-h-[220px] max-h-[54vh] overflow-auto pr-2">
          {messages.map((m, idx) => (
            <motion.div
              key={idx}
              initial={{ opacity: 0, y: 8 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.28, delay: idx * 0.02 }}
              className={`mb-3 ${m.role === 'user' ? 'flex justify-end' : 'flex justify-start'}`}
            >
              <div className={`${m.role === 'user' ? 'bg-gradient-to-br from-secondary to-primary text-white' : 'bg-gray-50 text-gray-800'} px-4 py-3 rounded-2xl max-w-[80%] whitespace-pre-wrap break-words`}>
                {m.content}
              </div>
            </motion.div>
          ))}
        </div>

        {/* Input area */}
        <div className="mt-4 flex items-end gap-3">
          <MicrophoneButton onText={(t) => setText(t)} />
          <textarea
            ref={textareaRef}
            value={text}
            onChange={(e)=> setText(e.target.value)}
            rows={1}
            placeholder="Ask about reaction chemistry or type a reaction name..."
            className="flex-1 resize-none px-4 py-3 rounded-3xl border focus:outline-none focus:ring-2 focus:ring-secondary scrollbar-hide"
            onKeyDown={(e) => { if (e.key === 'Enter' && !e.shiftKey) { e.preventDefault(); submit(); } }}
          />
          <button onClick={submit} className="p-3 rounded-full bg-primary text-white shadow hover:scale-95">
            <FiSend />
          </button>
        </div>
      </div>
    </div>
  );
}
#################################
src/components/ProductTabs.jsx
import React from 'react';
import { motion } from 'framer-motion';

/**
 * products: [{id, name, reaction_type, has_scheme_image, has_scheme_cdx}]
 * onSelect(productId)
 */
export default function ProductTabs({ products = [], onSelect }){
  return (
    <div className="bg-transparent">
      <div className="flex items-center justify-between mb-2">
        <h3 className="text-lg font-semibold text-primary">Matched Products</h3>
        <div className="text-sm text-gray-500">Click a tile to view details</div>
      </div>
      <div className="overflow-x-auto no-scrollbar py-2">
        <div className="inline-flex gap-3">
          {products.map(p => (
            <motion.button
              key={p.id}
              whileHover={{ y: -6 }}
              onClick={() => onSelect(p.id)}
              title={p.name}
              className="min-w-[220px] max-w-[420px] flex-shrink-0 bg-white border rounded-2xl p-3 shadow hover:shadow-lg transition flex flex-col"
            >
              <div className="flex items-center justify-between gap-3">
                <div className="text-sm font-semibold truncate">{p.name}</div>
                <div className="text-xs text-gray-400">{p.reaction_type.replace(/_/g,' ')}</div>
              </div>
              <div className="text-xs mt-2 text-gray-500 truncate">{p.pdf_path ? p.pdf_path.split(/[\\/]/).pop() : ''}</div>
            </motion.button>
          ))}
        </div>
      </div>
    </div>
  );
}
#####################################
src/components/ProductDetailModal.jsx
import React from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { downloadPdfUrl, fetchSchemeImageUrl } from '../api';

export default function ProductDetailModal({ open, onClose, meta, details, loading }){
  // if no meta, nothing to show
  const pdfUrl = meta ? downloadPdfUrl(meta.id) : '#';
  const schemeUrl = meta ? fetchSchemeImageUrl(meta.id) : null;

  return (
    <AnimatePresence>
      {open && meta && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          className="fixed inset-0 z-50 flex items-center justify-center bg-black/30 p-4"
        >
          <motion.div
            initial={{ y: -30, opacity: 0 }}
            animate={{ y: 0, opacity: 1 }}
            transition={{ duration: 0.6, ease: [0.2,0.9,0.2,1] }}
            exit={{ y: -20, opacity: 0 }}
            className="w-full max-w-4xl bg-white rounded-3xl shadow-3xl overflow-hidden"
          >
            <div className="flex items-start justify-between p-5 border-b">
              <div>
                <h3 className="text-xl font-bold text-primary">{meta.name}</h3>
                <div className="text-sm text-gray-500 mt-1">{meta.reaction_type.replace(/_/g,' ')}</div>
              </div>
              <div className="flex items-center gap-3">
                <a href={schemeUrl} target="_blank" rel="noreferrer" className="px-3 py-1 rounded-md bg-secondary/20 text-secondary">View Scheme</a>
                <a href={pdfUrl} className="px-3 py-1 rounded-md bg-accent/10 text-accent" target="_blank" rel="noreferrer" download={`${meta.name}.pdf`}>Download PDF</a>
                <button onClick={onClose} className="px-3 py-1 rounded-md bg-gray-100">Close</button>
              </div>
            </div>

            {/* Body */}
            <div className="p-6 max-h-[70vh] overflow-auto">
              {loading ? (
                // static skeleton while loading (no drop animation)
                <div className="space-y-4">
                  <div className="h-6 bg-gray-100 rounded w-1/3" />
                  <div className="h-4 bg-gray-100 rounded w-2/3" />
                  <div className="grid grid-cols-2 gap-4 mt-4">
                    <div className="h-32 bg-gray-100 rounded" />
                    <div className="h-32 bg-gray-100 rounded" />
                  </div>
                </div>
              ) : details ? (
                // animated content drop
                <motion.div
                  initial={{ y: -10, opacity: 0 }}
                  animate={{ y: 0, opacity: 1 }}
                  transition={{ duration: 0.7 }}
                >
                  <section className="mb-4">
                    <h4 className="text-sm text-gray-500">API Name</h4>
                    <div className="mt-1 p-3 bg-gray-50 rounded">{details.api_name || '—'}</div>
                  </section>

                  <section className="mb-4">
                    <h4 className="text-sm text-gray-500">Reaction Chemistry</h4>
                    <div className="mt-1 p-3 bg-gray-50 rounded">{details.reaction_chemistry || '—'}</div>
                  </section>

                  <section className="mb-4">
                    <h4 className="text-sm text-gray-500">Yield</h4>
                    <div className="mt-1 p-3 bg-gray-50 rounded">{details.yield || '—'}</div>
                  </section>

                  <section className="mb-4">
                    <h4 className="text-sm text-gray-500">Procedure</h4>
                    <div className="mt-1 p-4 bg-white rounded border whitespace-pre-wrap">{details.procedure || '—'}</div>
                  </section>

                  <section>
                    <h4 className="text-sm text-gray-500">Tables</h4>
                    <div className="mt-2 space-y-3">
                      {details.tables && details.tables.length > 0 ? details.tables.map((t,i)=> (
                        <div key={i} className="rounded-lg border overflow-auto">
                          {t.headers && t.headers.length > 0 ? (
                            <table className="min-w-full">
                              <thead className="bg-gray-50">
                                <tr>
                                  {t.headers.map((h,idx)=> <th key={idx} className="px-4 py-2 text-left text-xs font-medium text-gray-600">{h}</th>)}
                                </tr>
                              </thead>
                              <tbody>
                                {t.rows.map((r,ri)=> (
                                  <tr key={ri} className="odd:bg-white even:bg-gray-50">
                                    {r.map((c,ci) => <td key={ci} className="px-4 py-2 text-sm">{c}</td>)}
                                  </tr>
                                ))}
                              </tbody>
                            </table>
                          ) : (
                            <pre className="p-3 text-sm bg-gray-50">{t.raw_md}</pre>
                          )}
                        </div>
                      )) : <div className="text-sm text-gray-500">No tables detected.</div>}
                    </div>
                  </section>
                </motion.div>
              ) : (
                <div className="text-sm text-gray-500">No details loaded</div>
              )}
            </div>
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
}
###########################################
src/components/SidebarHistory.jsx
import React, { useState } from 'react';
import { motion } from 'framer-motion';

export default function SidebarHistory({ history = [], onSelect }){
  const [open, setOpen] = useState(true);

  return (
    <motion.div
      initial={{ x: 0 }}
      animate={{ x: 0 }}
      className={`fixed right-4 top-10 z-40`}
    >
      <div className="flex flex-col items-end">
        <button
          onClick={() => setOpen(o => !o)}
          className="mb-2 px-3 py-2 rounded-full bg-white shadow"
          title="Toggle Conversations"
        >
          <div className="text-sm font-medium text-primary">{open ? 'Hide Conversations' : 'Conversations'}</div>
        </button>

        <motion.div
          initial={{ opacity: 0, y: -8 }}
          animate={{ opacity: open ? 1 : 0, y: open ? 0 : -8 }}
          transition={{ duration: 0.28 }}
          className={`w-80 bg-white rounded-2xl shadow-lg p-4 ${open ? 'block' : 'hidden'}`}
        >
          <h4 className="text-lg font-semibold text-primary mb-3">Conversations</h4>
          {history.length === 0 && <div className="text-sm text-gray-500">No conversations yet.</div>}
          <div className="space-y-3 max-h-[60vh] overflow-auto">
            {history.map((h, i) => (
              <div key={i} className="p-3 rounded-lg border cursor-pointer hover:shadow" onClick={() => onSelect(h)}>
                <div className="text-sm font-semibold text-primary">{h.title}</div>
                <div className="text-xs text-gray-600 mt-1 line-clamp-2">{h.content}</div>
              </div>
            ))}
          </div>
        </motion.div>
      </div>
    </motion.div>
  );
}
src/styles.css
/* Add at end of src/styles.css */
.truncate-ellipsis {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  display: block;
}

.no-scrollbar::-webkit-scrollbar { display: none; }
.no-scrollbar { -ms-overflow-style: none; scrollbar-width: none; }

.scrollbar-hide::-webkit-scrollbar { display: none; }
.scrollbar-hide { -ms-overflow-style: none; scrollbar-width: none; }

.line-clamp-2 {
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;  
  overflow: hidden;
}
