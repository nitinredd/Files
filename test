
import React, { useEffect, useState, useRef } from "react";
import { motion } from "framer-motion";

import ChatWindow from "./ChatWindow";
import ProductTabs from "./ProductTabs";
import ProductDetailModal from "./ProductDetailModal";
import SidebarHistory from "./SidebarHistory";
import ReactionTiles from "./ReactionTiles";
import PromptGallery from "./PromptGallery";

import {
  fetchReactions,
  fetchProducts,
  fetchProductMeta,
  fetchProductDetails,
  fetchSchemeImageUrl,
  fetchPrompts,
  queryWithCitations,
  uploadFile,
} from "./api";

import Navbar from "../Navbar/Navbar";
import Footer from "../Footer/Footer";

import Slider1 from "../../assets/Slider1.png";
import Slider2 from "../../assets/Slider2.png";
import Slider3 from "../../assets/Slider3.png";
import Slider4 from "../../assets/Slider4.png";
import Slider5 from "../../assets/Slider5.png";
import Slider6 from "../../assets/Slider6.png";

export default function App() {
  const [reactions, setReactions] = useState([]);
  const [prompts, setPrompts] = useState([]);

  const [products, setProducts] = useState([]);
  const [selectedReaction, setSelectedReaction] = useState(null);

  const [selectedProduct, setSelectedProduct] = useState(null); // meta
  const [productDetails, setProductDetails] = useState(null);
  const [productListVisible, setProductListVisible] = useState(false);

  const [detailModalOpen, setDetailModalOpen] = useState(false);

  const [messages, setMessages] = useState([]); // chat messages
  const [history, setHistory] = useState([]); // conversation history list

  // Loading state flags
  const [loadingDetails, setLoadingDetails] = useState(false);
  const [queryLoading, setQueryLoading] = useState(false);

  // Selected citations (right-click / multi-select)
  const [selectedCitedDocs, setSelectedCitedDocs] = useState([]);

  // For scheme preview in chat
  const [selectedSchemeUrl, setSelectedSchemeUrl] = useState(null);

  // Prompt gallery UI
  const [promptGalleryOpen, setPromptGalleryOpen] = useState(false);

  // Expanded full-page view (when user clicks a reaction type)
  const [expandedViewOpen, setExpandedViewOpen] = useState(false);

  // Chat expansion state (when user sends a message)
  const [chatExpanded, setChatExpanded] = useState(false);

  // Slider
  const [slideIndex, setSlideIndex] = useState(0);
  const sliderIntervalRef = useRef(null);
  const SLIDE_COUNT = 6;

  const chatWindowRef = useRef(null);
  const uploadInputRef = useRef(null);

  useEffect(() => {
    fetchReactions()
      .then((r) => setReactions(r || []))
      .catch((e) => console.error("fetchReactions error:", e));

      fetchPrompts()
      .then((p) => {
        // some backends return {prompts: [...]}, accept both shapes
        setPrompts(p?.prompts || p || []);
      })
      .catch((e) => {
        console.warn("fetchPrompts failed:", e);
      });

    setMessages([]);
  }, []);

  // slider autoplay
  useEffect(() => {
    sliderIntervalRef.current = setInterval(() => {
      setSlideIndex((s) => (s + 1) % SLIDE_COUNT);
    }, 6000);
    return () => clearInterval(sliderIntervalRef.current);
  }, []);

  const pushMessage = (m) => setMessages((prev) => [...prev, m]);
  const normalize = (s) => (s || "").toString().toLowerCase().replace(/[^a-z0-9]/g, "");

  // handle upload using api.uploadFile (relative endpoint)
  const handleUploadFile = async (file, reaction_type = "User_Uploads") => {
    if (!file) return;
    pushMessage({ role: "assistant", content: "Uploading file...", loading: true });
    try {
      const res = await uploadFile(file, reaction_type);
      // remove loading placeholder
      setMessages((prev) => {
        const idx = prev.map((m) => m.loading).lastIndexOf(true);
        if (idx >= 0) {
          const copy = [...prev];
          copy.splice(idx, 1);
          return copy;
        }
        return prev;
      });
      pushMessage({ role: "assistant", content: "Upload complete and indexed (if supported)." });
      // refresh product list for the reaction_type
      try {
        const prods = await fetchProducts(reaction_type);
        setProducts(prods || []);
        setProductListVisible(true);
      } catch {}
      return res;
    } catch (err) {
      console.error("handleUploadFile error:", err);
      setMessages((prev) => {
        const idx = prev.map((m) => m.loading).lastIndexOf(true);
        if (idx >= 0) {
          const copy = [...prev];
          copy.splice(idx, 1);
          return copy;
        }
        return prev;
      });
      pushMessage({ role: "assistant", content: `Upload failed: ${err?.message || err}` });
      return null;
    }
  };

  const handleReactionClick = async (reactionName) => {
    setSelectedReaction(reactionName);
    try {
      const prods = await fetchProducts(reactionName);
      setProducts(prods || []);
      setProductListVisible(true);
      setExpandedViewOpen(true);
      pushMessage({ role: "assistant", content: `Found ${prods.length} products for ${reactionName}` });
    } catch (e) {
      console.error(e);
      pushMessage({ role: "assistant", content: "Error loading products for that reaction." });
    }
  };

  const handlePromptPick = async (promptText) => {
    setPromptGalleryOpen(false);
    await handleUserSend(promptText);
  };

  const handleSelectProduct = async (productId) => {
    try {
      setLoadingDetails(true);
      const meta = await fetchProductMeta(productId);
      setSelectedProduct(meta);
      setProductDetails(null);
      setSelectedSchemeUrl(null);
      setDetailModalOpen(true);

      try {
        const schemeUrl = await fetchSchemeImageUrl(productId);
        setSelectedSchemeUrl(schemeUrl);
      } catch {}

      try {
        const res = await fetchProductDetails(productId);
        const payload = (res && res.data) ? res.data : res;
        setProductDetails(payload);
        setHistory((h) => [
          { title: meta.name, content: payload.procedure ? payload.procedure.slice(0, 120) : "", productId: meta.id },
          ...h,
        ]);
      } catch (e) {
        console.error("fetchProductDetails error (select product):", e);
        pushMessage({ role: "assistant", content: "Failed to load product details." });
      }
    } catch (err) {
      console.error("handleSelectProduct error:", err);
      pushMessage({ role: "assistant", content: "Failed to load product metadata." });
    } finally {
      setLoadingDetails(false);
    }
  };

  const handleToggleCite = (product) => {
    const exists = selectedCitedDocs.find((p) => p.id === product.id);
    if (exists) {
      setSelectedCitedDocs((prev) => prev.filter((p) => p.id !== product.id));
      pushMessage({ role: "assistant", content: `Removed citation: ${product.name}` });
    } else {
      setSelectedCitedDocs((prev) => [{ id: product.id, name: product.name, reaction_type: product.reaction_type }, ...prev]);
      pushMessage({ role: "assistant", content: `Added citation: ${product.name}` });
    }
  };

  const removeCitation = (id) => {
    const found = selectedCitedDocs.find((d) => d.id === id);
    setSelectedCitedDocs((prev) => prev.filter((d) => d.id !== id));
    if (found) pushMessage({ role: "assistant", content: `Removed citation: ${found.name}` });
  };

  // main send handler (same logic as earlier working version)
  const handleUserSend = async (text) => {
    pushMessage({ role: "user", content: text });

    // Expand chat window with animation on first user message
    if (!chatExpanded && !expandedViewOpen) {
      setChatExpanded(true);
    }

    const norm = normalize(text);
    const match = reactions.find((r) => normalize(r) === norm || normalize(r) === normalize(text.replace(/\s+/g, "_")));
    if (match) {
      setSelectedReaction(match);
      try {
        const prods = await fetchProducts(match);
        setProducts(prods || []);
        setProductListVisible(true);
        setExpandedViewOpen(true);
        pushMessage({ role: "assistant", content: `Found ${prods.length} product${prods.length === 1 ? "" : "s"} — opened expanded view.` });
      } catch (e) {
        console.error(e);
        pushMessage({ role: "assistant", content: "Error loading products for that reaction."});
      }
      return;
    }

    if (selectedCitedDocs && selectedCitedDocs.length > 0) {
      setQueryLoading(true);
      pushMessage({ role: "assistant", content: "Searching selected documents...", loading: true });
      try {
        const ids = selectedCitedDocs.map((d) => d.id);
        const res = await queryWithCitations(ids, text);
        const payload = (res && res.data) ? res.data : res;
        setMessages((prev) => {
          const idx = prev.map((m) => m.loading).lastIndexOf(true);
          if (idx >= 0) {
            const copy = [...prev];
            copy.splice(idx, 1);
            return copy;
          }
          return prev;
        });
        const answer = payload?.answer || payload?.response || "No relevant answer found.";
        const sources = (payload?.sources || []).map((s) => ({ product_id: s.product_id, product_name: s.product_name }));
        pushMessage({ role: "assistant", content: answer, sources });
      } catch (err) {
        console.error("queryWithCitations error:", err);
        pushMessage({ role: "assistant", content: "Error querying selected documents."});
      } finally {
        setQueryLoading(false);
      }
      return;
    }

    if (!selectedProduct) {
      setQueryLoading(true);
      pushMessage({ role: "assistant", content: "Searching documents...", loading: true });
      try {
        const res = await fetchProductDetails(undefined, text);
        const payload = (res && res.data) ? res.data : res;
        setMessages((prev) => {
          const idx = prev.map((m) => m.loading).lastIndexOf(true);
          if (idx >= 0) {
            const copy = [...prev];
            copy.splice(idx, 1);
            return copy;
          }
          return prev;
        });
        if (payload && payload.api_name) {
          let summary = "";
          if (payload.api_name) summary += `API: ${payload.api_name}\n\n`;
          if (payload.reaction_chemistry) summary += `Reaction: ${payload.reaction_chemistry}\n\n`;
          if (payload.yield) summary += `Yield: ${payload.yield}\n\n`;
          if (payload.procedure) summary += `Procedure (excerpt):\n${(payload.procedure || "").slice(0, 400)}\n\n`;
          pushMessage({ role: "assistant", content: summary, tables: (payload.tables || []) });
        } else if (payload && (payload.answer || payload.response)) {
          const answer = payload.answer || payload.response || "No answer.";
          const sources = (payload.sources || []).map((s) => ({ product_id: s.product_id, product_name: s.product_name }));
          pushMessage({ role: "assistant", content: answer, sources });
        } else {
          pushMessage({ role: "assistant", content: "No structured data found. Try selecting a product or ask for specific extraction." });
        }
      } catch (err) {
        console.error("fetchProductDetails error (no product):", err);
        pushMessage({ role: "assistant", content: "Error querying documents." });
      } finally {
        setQueryLoading(false);
      }
      return;
    }

    setQueryLoading(true);
    pushMessage({ role: "assistant", content: "Fetching answer from selected document...", loading: true });
    try {
      const res = await fetchProductDetails(selectedProduct.id, text);
      const payload = (res && res.data) ? res.data : res;
      setMessages((prev) => {
        const idx = prev.map((m) => m.loading).lastIndexOf(true);
        if (idx >= 0) {
          const copy = [...prev];
          copy.splice(idx, 1);
          return copy;
        }
        return prev;
      });
      if (payload && payload.api_name) {
        let summary = "";
        if (payload.api_name) summary += `API: ${payload.api_name}\n\n`;
        if (payload.reaction_chemistry) summary += `Reaction: ${payload.reaction_chemistry}\n\n`;
        if (payload.yield) summary += `Yield: ${payload.yield}\n\n`;
        if (payload.procedure) summary += `Procedure (excerpt):\n${(payload.procedure || "").slice(0, 400)}\n\n`;
        pushMessage({ role: "assistant", content: summary, tables: (payload.tables || []) });
        setProductDetails(payload);
        setDetailModalOpen(true);
        setHistory((h) => [{ title: selectedProduct.name, content: payload.procedure ? payload.procedure.slice(0,120) : '', productId: selectedProduct.id }, ...h]);
      } else if (payload && (payload.answer || payload.response)) {
        const answer = payload.answer || payload.response || "No answer.";
        const sources = (payload.sources || []).map((s) => ({ product_id: s.product_id, product_name: s.product_name }));
        pushMessage({ role: "assistant", content: answer, sources });
      } else {
        pushMessage({ role: "assistant", content: "No answer found from document." });
      }
    } catch (err) {
      console.error("fetchProductDetails (selected) error:", err);
      pushMessage({ role: "assistant", content: "Error querying backend." });
    } finally {
      setQueryLoading(false);
    }
  };

  // slides
  const slides = [
    {
      id: 0,
      content: (
        <div className="w-full h-full flex items-center justify-center">
          <img src={Slider1} alt="banner" className="w-full h-full object-contain" />
        </div>
      ),
    },
    {
      id: 1,
      content: (
        <div className="w-full h-full flex items-center justify-center">
          <img src={Slider2} alt="banner" className="w-full h-full object-contain" />
        </div>
      ),
    },
    {
      id: 2,
      content: (
        <div className="w-full h-full flex items-center justify-center">
          <img src={Slider3} alt="banner" className="w-full h-full object-contain" />
        </div>
      ),
    },
    {
      id: 3,
      content: (
        <div className="w-full h-full flex items-center justify-center">
          <img src={Slider4} alt="banner" className="w-full h-full object-contain" />
        </div>
      ),
    },
    {
      id: 4,
      content: (
        <div className="w-full h-full flex items-center justify-center">
          <img src={Slider5} alt="banner" className="w-full h-full object-contain" />
        </div>
      ),
    },
    {
      id: 5,
      content: (
        <div className="w-full h-full flex items-center justify-center">
          <img src={Slider6} alt="banner" className="w-full h-full object-contain" />
        </div>
      ),
    },
  ];

  const closeExpandedView = () => setExpandedViewOpen(false);

  // file input trigger
  const onPlusClick = () => {
    if (uploadInputRef.current) uploadInputRef.current.click();
  };

  const onFileInputChange = async (e) => {
    const f = e.target.files && e.target.files[0];
    if (!f) return;
    // default reaction_type 'Miscellaneous' — you could surface a small select later
    await handleUploadFile(f, "Miscellaneous");
    e.target.value = "";
  };

  return (
    <>
      <Navbar />

      <div className="min-h-screen bg-white flex justify-center items-start overflow-x-hidden">
        <div className="w-full max-w-7xl py-8 px-4">
          {/* Carousel */}
          <div className="mb-6">
          <div className="relative overflow-hidden rounded-2xl shadow-lg bg-transparent" style={{ height: '410px' }}>
            <div
              className="flex transition-transform duration-700 ease-in-out h-full"
              style={{
                width: `${SLIDE_COUNT * 100}%`,
                transform: `translateX(-${slideIndex * (100 / SLIDE_COUNT)}%)`
              }}
            >
              {slides.map((s) => (
                <div
                  key={s.id}
                  className="w-full h-full flex-shrink-0"
                  style={{ width: `${100 / SLIDE_COUNT}%` }}
                >
                  {s.content}
                </div>
              ))}
            </div>
            <div className="absolute bottom-3 left-1/2 transform -translate-x-1/2 flex gap-2">
              {slides.map((_, i) => (
                <button
                  key={i}
                  onClick={() => setSlideIndex(i)}
                  className={`w-2 h-2 rounded-full ${
                    i === slideIndex ? "bg-gray-700" : "bg-gray-300"
                  }`}
                />
              ))}
            </div>
          </div>
          </div>

          {/* Reaction tiles */}
          <div className="mb-6">
            <ReactionTiles reactions={reactions} onSelect={handleReactionClick} />
          </div>

          {!chatExpanded && !expandedViewOpen && (
            <div className="flex justify-center">
              <div className="w-full max-w-2xl relative">
                <input ref={uploadInputRef} type="file" accept=".pdf,.docx,.pptx,.xlsx,.png,.jpg,.jpeg" className="hidden" onChange={onFileInputChange} />

                <ChatWindow
                  ref={chatWindowRef}
                  messages={messages}
                  onSend={handleUserSend}
                  centeredWidth="w-full"
                  loading={queryLoading || loadingDetails}
                  selectedCitedDocs={selectedCitedDocs}
                  removeCitation={removeCitation}
                  onUploadFile={handleUploadFile}
                  openPromptGallery={() => setPromptGalleryOpen(true)}
                  centerOnHomescreen={true}
                />
              </div>
            </div>
          )}

          {/* Sidebar - Now fixed position overlay */}
          <SidebarHistory history={history} onSelect={(h) => { if (h && h.productId) handleSelectProduct(h.productId); }} />

          {/* Expanded Chat View */}
          {chatExpanded && !expandedViewOpen && (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5, ease: "easeOut" }}
              className="fixed inset-0 z-40 bg-gradient-to-br from-purple-50 via-white to-indigo-50"
            >
              <div className="h-full flex flex-col">
                {/* Header */}
                <div className="bg-white/80 backdrop-blur-md border-b px-6 py-4 flex items-center justify-between sticky top-0 z-10">
                  <h2 className="text-xl font-semibold bg-gradient-to-r from-purple-600 to-indigo-600 bg-clip-text text-transparent">
                    ChemIntel Chat
                  </h2>
                  <button
                    onClick={() => setChatExpanded(false)}
                    className="px-4 py-2 rounded-full bg-gradient-to-r from-purple-500 to-indigo-500 text-white shadow-lg hover:shadow-xl transition-all"
                  >
                    Minimize
                  </button>
                </div>

                {/* Chat Content - Centered */}
                <div className="flex-1 overflow-auto px-6 py-8 flex items-center justify-center">
                  <div className="w-full max-w-4xl">
                    {/* Beautiful loading animation when generating */}
                    {queryLoading && (
                      <motion.div
                        initial={{ opacity: 0, scale: 0.9 }}
                        animate={{ opacity: 1, scale: 1 }}
                        className="mb-6 flex flex-col items-center justify-center space-y-4 py-8"
                      >
                        <div className="relative">
                          <motion.div
                            animate={{ rotate: 360 }}
                            transition={{ duration: 2, repeat: Infinity, ease: "linear" }}
                            className="w-16 h-16 border-4 border-purple-200 border-t-purple-600 rounded-full"
                          />
                          <motion.div
                            animate={{ rotate: -360 }}
                            transition={{ duration: 1.5, repeat: Infinity, ease: "linear" }}
                            className="absolute inset-0 w-16 h-16 border-4 border-transparent border-b-indigo-600 rounded-full"
                          />
                        </div>
                        <motion.p
                          animate={{ opacity: [0.5, 1, 0.5] }}
                          transition={{ duration: 2, repeat: Infinity }}
                          className="text-lg font-medium bg-gradient-to-r from-purple-600 to-indigo-600 bg-clip-text text-transparent"
                        >
                          Generating response...
                        </motion.p>
                        <div className="flex gap-2">
                          {[0, 1, 2].map((i) => (
                            <motion.div
                              key={i}
                              animate={{ y: [0, -10, 0] }}
                              transition={{ duration: 0.6, repeat: Infinity, delay: i * 0.2 }}
                              className="w-3 h-3 rounded-full bg-gradient-to-r from-purple-500 to-indigo-500"
                            />
                          ))}
                        </div>
                      </motion.div>
                    )}

                    <ChatWindow
                      ref={chatWindowRef}
                      messages={messages}
                      onSend={handleUserSend}
                      centeredWidth="w-full"
                      loading={queryLoading || loadingDetails}
                      selectedCitedDocs={selectedCitedDocs}
                      removeCitation={removeCitation}
                      onUploadFile={handleUploadFile}
                      openPromptGallery={() => setPromptGalleryOpen(true)}
                    />
                  </div>
                </div>
              </div>
            </motion.div>
          )}

          <PromptGallery
            open={promptGalleryOpen}
            onClose={() => setPromptGalleryOpen(false)}
            prompts={prompts}
            onPick={handlePromptPick}
          />

          {expandedViewOpen && (
            <motion.div
              initial={{ opacity: 0, scale: 0.95 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{ duration: 0.4, ease: "easeOut" }}
              className="fixed inset-0 z-50 bg-gradient-to-br from-indigo-50 via-white to-purple-50 overflow-auto"
            >
              <div className="h-full flex flex-col">
                {/* Header */}
                <div className="bg-white/80 backdrop-blur-md border-b px-6 py-4 flex items-center justify-between sticky top-0 z-10">
                  <div className="flex items-center gap-4">
                    <button
                      onClick={closeExpandedView}
                      className="px-4 py-2 rounded-full bg-gradient-to-r from-gray-100 to-gray-200 hover:from-gray-200 hover:to-gray-300 shadow transition-all"
                    >
                      ← Back
                    </button>
                    <h2 className="text-2xl font-bold bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent">
                      {selectedReaction ? selectedReaction.replace(/_/g, " ") : "Explore Products"}
                    </h2>
                    <span className="px-3 py-1 rounded-full bg-gradient-to-r from-indigo-500 to-purple-500 text-white text-sm font-semibold">
                      {products.length} Products
                    </span>
                  </div>
                </div>

                {/* Content */}
                <div className="flex-1 overflow-auto">
                  <div className="max-w-[1600px] mx-auto p-6 space-y-6">
                    {/* Products Grid - Full width */}
                    <div className="bg-white/50 backdrop-blur-sm rounded-2xl shadow-lg p-6">
                      <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
                        <span className="w-2 h-2 rounded-full bg-gradient-to-r from-indigo-500 to-purple-500"></span>
                        Product Library
                      </h3>
                      {productListVisible && products && products.length > 0 ? (
                        <div className="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 2xl:grid-cols-6 gap-4">
                          {products.map((product) => {
                            const isCited = selectedCitedDocs.some((d) => d.id === product.id);
                            return (
                              <motion.button
                                key={product.id}
                                whileHover={{ y: -8, scale: 1.02 }}
                                whileTap={{ scale: 0.98 }}
                                onClick={() => handleSelectProduct(product.id)}
                                onContextMenu={(e) => {
                                  e.preventDefault();
                                  handleToggleCite(product);
                                }}
                                className={`bg-white rounded-xl p-4 shadow-md hover:shadow-2xl transition-all text-left border-2 ${
                                  isCited ? "border-purple-500 ring-2 ring-purple-200" : "border-transparent"
                                }`}
                              >
                                <div className="flex items-start justify-between gap-2 mb-2">
                                  <div className="flex-1 min-w-0">
                                    <div className="text-sm font-semibold text-gray-900 truncate" title={product.name}>
                                      {product.name}
                                    </div>
                                    <div className="text-xs text-gray-500 mt-1">
                                      {(product.reaction_type || "").replace(/_/g, " ")}
                                    </div>
                                  </div>
                                  {isCited && (
                                    <div className="flex-shrink-0 px-2 py-1 rounded-full bg-gradient-to-r from-purple-500 to-indigo-500 text-white text-xs font-bold">
                                      ✓
                                    </div>
                                  )}
                                </div>
                                <div className="text-xs text-gray-400 mt-2 flex items-center gap-1">
                                  <span>📄</span>
                                  <span className="truncate">
                                    {product.pdf_path ? product.pdf_path.split(/[\\/]/).pop() : "PDF"}
                                  </span>
                                </div>
                              </motion.button>
                            );
                          })}
                        </div>
                      ) : (
                        <div className="text-center text-gray-500 py-12">
                          No products loaded for this reaction type.
                        </div>
                      )}
                    </div>

                    {/* Chat Section - Full width below products */}
                    <div className="bg-white/50 backdrop-blur-sm rounded-2xl shadow-lg p-6">
                      <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
                        <span className="w-2 h-2 rounded-full bg-gradient-to-r from-green-500 to-emerald-500"></span>
                        Ask Questions About These Products
                      </h3>
                      <div className="max-w-4xl mx-auto">
                        <ChatWindow
                          messages={messages}
                          onSend={handleUserSend}
                          centeredWidth="w-full"
                          loading={queryLoading || loadingDetails}
                          selectedCitedDocs={selectedCitedDocs}
                          removeCitation={removeCitation}
                          onUploadFile={handleUploadFile}
                          openPromptGallery={() => setPromptGalleryOpen(true)}
                        />
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </motion.div>
          )}

          <ProductDetailModal
            open={detailModalOpen}
            onClose={() => setDetailModalOpen(false)}
            meta={selectedProduct}
            details={productDetails}
            loading={loadingDetails}
          />
        </div>
      </div>

      <Footer />
    </>
  );
}
########################################

import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { FiMessageSquare, FiClock, FiChevronLeft, FiChevronRight } from 'react-icons/fi';

export default function SidebarHistory({ history = [], onSelect }) {
  const [open, setOpen] = useState(
    localStorage.getItem('sidebarHistoryOpen') === 'true' || false
  );

  useEffect(() => {
    localStorage.setItem('sidebarHistoryOpen', open);
  }, [open]);

  // Group history by time (Today, Yesterday, Last 7 days, etc.)
  const groupedHistory = React.useMemo(() => {
    const now = new Date();
    const groups = {
      today: [],
      yesterday: [],
      last7days: [],
      older: []
    };

    history.forEach(h => {
      // For now, just put everything in "today" since we don't have timestamps
      // You can enhance this later with actual timestamps
      groups.today.push(h);
    });

    return groups;
  }, [history]);

  return (
    <>
      {/* Toggle Button - Fixed position, doesn't scroll */}
      <motion.button
        onClick={() => setOpen((prev) => !prev)}
        whileHover={{ scale: 1.05 }}
        whileTap={{ scale: 0.95 }}
        className="fixed top-4 left-4 z-50 bg-white/90 backdrop-blur-sm hover:bg-white border border-gray-200 shadow-sm hover:shadow-md transition-all rounded-lg p-2.5"
        title={open ? "Close sidebar" : "Open sidebar"}
      >
        {open ? <FiChevronLeft className="w-5 h-5 text-gray-700" /> : <FiMessageSquare className="w-5 h-5 text-gray-700" />}
      </motion.button>

      {/* Sidebar Panel - Claude.ai style */}
      <AnimatePresence>
        {open && (
          <>
            {/* Backdrop */}
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              transition={{ duration: 0.2 }}
              className="fixed inset-0 bg-black/20 z-40 lg:hidden"
              onClick={() => setOpen(false)}
            />

            {/* Sidebar */}
            <motion.div
              initial={{ x: -320 }}
              animate={{ x: 0 }}
              exit={{ x: -320 }}
              transition={{ duration: 0.3, ease: "easeOut" }}
              className="fixed top-0 left-0 h-full w-80 bg-white border-r border-gray-200 z-40 flex flex-col shadow-xl"
            >
              {/* Header */}
              <div className="p-4 border-b border-gray-200 flex items-center justify-between">
                <div className="flex items-center gap-2">
                  <FiMessageSquare className="w-5 h-5 text-purple-600" />
                  <h2 className="text-lg font-semibold text-gray-900">Conversations</h2>
                </div>
                <button
                  onClick={() => setOpen(false)}
                  className="p-1.5 hover:bg-gray-100 rounded-lg transition-colors"
                >
                  <FiChevronLeft className="w-5 h-5 text-gray-600" />
                </button>
              </div>

              {/* Conversations List */}
              <div className="flex-1 overflow-y-auto">
                {history.length === 0 ? (
                  <div className="p-6 text-center">
                    <FiClock className="w-12 h-12 text-gray-300 mx-auto mb-3" />
                    <p className="text-sm text-gray-500">No conversations yet</p>
                    <p className="text-xs text-gray-400 mt-1">Your chat history will appear here</p>
                  </div>
                ) : (
                  <div className="p-3 space-y-1">
                    {/* Today's conversations */}
                    {groupedHistory.today.length > 0 && (
                      <div className="mb-4">
                        <div className="px-3 py-1.5 text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Today
                        </div>
                        {groupedHistory.today.map((h, i) => (
                          <motion.button
                            key={i}
                            whileHover={{ backgroundColor: 'rgba(249, 250, 251, 1)' }}
                            onClick={() => {
                              onSelect(h);
                              // On mobile, close sidebar after selection
                              if (window.innerWidth < 1024) setOpen(false);
                            }}
                            className="w-full text-left p-3 rounded-lg hover:bg-gray-50 transition-colors group relative"
                          >
                            <div className="flex items-start gap-3">
                              <div className="flex-shrink-0 mt-0.5">
                                <div className="w-2 h-2 rounded-full bg-purple-500 opacity-0 group-hover:opacity-100 transition-opacity" />
                              </div>
                              <div className="flex-1 min-w-0">
                                <div className="text-sm font-medium text-gray-900 truncate group-hover:text-purple-600 transition-colors">
                                  {h.title || 'Untitled conversation'}
                                </div>
                                <div className="text-xs text-gray-500 mt-1 line-clamp-2">
                                  {h.content || 'No preview available'}
                                </div>
                              </div>
                            </div>
                          </motion.button>
                        ))}
                      </div>
                    )}

                    {/* You can add other time groups here (Yesterday, Last 7 days, etc.) */}
                  </div>
                )}
              </div>

              {/* Footer (optional) */}
              <div className="p-4 border-t border-gray-200 bg-gray-50">
                <div className="text-xs text-gray-500 text-center">
                  {history.length} conversation{history.length !== 1 ? 's' : ''}
                </div>
              </div>
            </motion.div>
          </>
        )}
      </AnimatePresence>
    </>
  );
}
