// src/api.js
import axios from "axios";

/**
 * API_BASE:
 * - Leave as "" to use relative URLs (recommended if frontend and backend are proxied).
 * - Or set to "http://localhost:8000" (or your backend) if running separately.
 */
export const API_BASE = ""; // e.g. "http://localhost:8000" or ""

const api = axios.create({
  baseURL: API_BASE || "",
  timeout: 60000,
});

// helper: unwrap axios response -> return res.data when present
const unwrap = (res) => {
  if (res === undefined || res === null) return res;
  return res.data !== undefined ? res.data : res;
};

// ========== Upload file ==========
// Backend expects form fields: "file" and "reaction_type"
export const uploadFile = async (file, reaction_type = "Miscellaneous", filename = null) => {
  if (!file) throw new Error("No file provided");
  const fd = new FormData();
  fd.append("file", file);
  fd.append("reaction_type", reaction_type);
  if (filename) fd.append("filename", filename);

  const res = await api.post("/upload", fd, {
    headers: { "Content-Type": "multipart/form-data" },
  });
  return unwrap(res);
};

// ========== Prompt gallery ==========
export const fetchPrompts = async () => {
  const res = await api.get("/prompt-gallery");
  const data = unwrap(res) || {};

  // Backend returns {prompts: [...]}
  const raw = Array.isArray(data) ? data : data.prompts || [];

  // Normalize to { id, title, text } shape used by UI
  return (raw || []).map((p, idx) => ({
    id: p.id || `prompt-${idx}`,
    title: p.title || p.name || `Prompt ${idx + 1}`,
    text: p.prompt || p.text || p.query || "",
  }));
};

// ========== Other helpers ==========
export const fetchReactions = async () => {
  const res = await api.get("/reactions");
  return unwrap(res);
};

export const fetchProducts = async (reactionType) => {
  const res = await api.get("/products", { params: reactionType ? { reaction_type: reactionType } : {} });
  return unwrap(res);
};

export const fetchProductMeta = async (productId) => {
  const res = await api.get(`/product/${encodeURIComponent(productId)}/meta`);
  return unwrap(res);
};

export const fetchProductDetails = async (productId = undefined, question = "Extract API Name, Reaction Chemistry, Yield, Procedure, and Tabular Data", session_id = undefined) => {
  const payload = { question };
  if (productId) payload.product_id = productId;
  if (session_id) payload.session_id = session_id;
  const res = await api.post("/product/details", payload);
  return unwrap(res);
};

export const fetchSchemeImageUrl = (productId) => {
  return `${API_BASE || ""}/product/${encodeURIComponent(productId)}/scheme-image`;
};

export const searchProducts = async (q, limit = 10) => {
  const res = await api.get("/products/search", { params: { q, limit } });
  return unwrap(res);
};

export const queryWithCitations = async (productIds = [], question = "", session_id = undefined) => {
  const payload = { product_ids: productIds, question };
  if (session_id) payload.session_id = session_id;
  const res = await api.post("/query", payload);
  return unwrap(res);
};

export default api;
