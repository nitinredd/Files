import fitz  # PyMuPDF
import pytesseract
from PIL import Image
import os
import io
import tempfile
from pathlib import Path

def pdf_to_images(pdf_path):
    """
    Convert PDF pages to images using PyMuPDF with higher resolution
    Returns a list of PIL Images
    """
    # Open the PDF
    pdf_document = fitz.open(pdf_path)
    
    images = []
    for page_num in range(pdf_document.page_count):
        page = pdf_document[page_num]
        
        # Set a higher zoom factor for better quality (2 = 200% zoom)
        zoom = 2.0
        mat = fitz.Matrix(zoom, zoom)
        
        # Convert page to image with higher resolution
        pix = page.get_pixmap(matrix=mat, alpha=False)
        
        # Convert to PIL Image with high quality
        img_data = pix.tobytes("png")
        img = Image.open(io.BytesIO(img_data))
        
        # Ensure the image is in RGB mode
        if img.mode != 'RGB':
            img = img.convert('RGB')
        
        images.append(img)
    
    pdf_document.close()
    return images

def process_images_and_create_pdf(images, output_path):
    """
    Perform OCR on images and create a new PDF with the OCR'd text overlay
    """
    # Configure Tesseract for Japanese with custom configuration
    custom_config = r'--oem 1 --psm 3 -l jpn_vert+jpn'  # Added vertical Japanese support
    
    # Create a new PDF
    output_pdf = fitz.open()
    
    with tempfile.TemporaryDirectory() as temp_dir:
        for i, image in enumerate(images):
            print(f"Processing page {i+1}/{len(images)}...")
            
            # Save high quality image temporarily
            temp_img_path = Path(temp_dir) / f"temp_img_{i}.png"
            image.save(temp_img_path, 'PNG', quality=95)
            
            try:
                # Perform OCR with custom configuration
                ocr_data = pytesseract.image_to_pdf_or_hocr(
                    image,
                    lang='jpn+jpn_vert',  # Added vertical Japanese support
                    config=custom_config,
                    extension='pdf'
                )
                
                # Save OCR result to temporary PDF
                temp_pdf_path = Path(temp_dir) / f"temp_ocr_{i}.pdf"
                temp_pdf_path.write_bytes(ocr_data)
                
                # Open temporary PDF and add it to output PDF
                temp_pdf = fitz.open(temp_pdf_path)
                output_pdf.insert_pdf(temp_pdf)
                temp_pdf.close()
                
            except Exception as e:
                print(f"Error processing page {i+1}: {str(e)}")
                # Continue with next page instead of stopping
                continue
    
    try:
        # Save with high quality settings
        output_pdf.save(
            output_path,
            garbage=4,  # Maximum garbage collection
            deflate=True,  # Compress stream objects
            clean=True,  # Clean unused elements
            pretty=True,  # Make PDF readable
            linear=True  # Optimize for web viewing
        )
    finally:
        output_pdf.close()

def clean_path(path):
    """
    Clean and normalize file path
    """
    path = path.strip()
    path = path.replace('\\', '/')
    path = '/'.join(part.strip() for part in path.split('/'))
    return path

def main():
    try:
        # Input and output paths
        input_pdf = input("Enter the path to your PDF file: ")
        output_pdf = input("Enter the output PDF path (including .pdf extension): ")
        
        # Clean and normalize paths
        input_pdf = clean_path(input_pdf)
        output_pdf = clean_path(output_pdf)
        
        # Validate input file exists
        if not os.path.exists(input_pdf):
            raise FileNotFoundError(f"Input PDF not found: {input_pdf}")
        
        # Ensure output path has .pdf extension
        if not output_pdf.lower().endswith('.pdf'):
            output_pdf = f"{output_pdf}.pdf"
        
        # Create output directory if it doesn't exist
        output_dir = os.path.dirname(output_pdf)
        if output_dir and not os.path.exists(output_dir):
            os.makedirs(output_dir)
        
        print(f"Input PDF: {input_pdf}")
        print(f"Output PDF will be saved as: {output_pdf}")
        
        # Convert PDF to images
        print("Converting PDF to images with high resolution...")
        images = pdf_to_images(input_pdf)
        
        # Process images and create searchable PDF
        print("Performing OCR with enhanced settings...")
        process_images_and_create_pdf(images, output_pdf)
        
        print(f"Processing complete! Check your output PDF: {output_pdf}")
        
    except Exception as e:
        print(f"An error occurred: {str(e)}")

if __name__ == "__main__":
    main()
