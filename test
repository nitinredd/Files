{
  "name": "sor-ui-vite",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "axios": "^1.4.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0"
  },
  "devDependencies": {
    "@vitejs/plugin-react": "^4.0.0",
    "vite": "^5.0.0"
  }
}
#################################
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";

export default defineConfig({
  plugins: [react()],
  server: {
    port: 3000,
    proxy: {
      // proxy API calls to your FastAPI backend at localhost:8000
      "/generate_lhs": "http://localhost:8000",
      "/start_watch": "http://localhost:8000",
      "/stop_watch": "http://localhost:8000",
      "/optimize": "http://localhost:8000",
      "/results": "http://localhost:8000"
    }
  }
});
#########################################
<!doctype html>
<html>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>SOR UI (Vite)</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>
##################################3
import React from "react";
import { createRoot } from "react-dom/client";
import App from "./App";
import "./styles.css";

createRoot(document.getElementById("root")).render(<App />);
#####################################################
import React, { useEffect, useState } from "react";
import axios from "axios";

export default function App() {
  const [lhs, setLhs] = useState(null);
  const [opt, setOpt] = useState(null);
  const [hplc, setHplc] = useState({});
  const [nexp, setNexp] = useState(11);
  const [seed, setSeed] = useState(42);
  const [objectivesText, setObjectivesText] = useState("Yield:Maximize,Imp1:Minimize");
  const [sorIter, setSorIter] = useState(10);
  const [watchPath, setWatchPath] = useState("");
  const [watchStatus, setWatchStatus] = useState(null);
  const [polling, setPolling] = useState(true);

  // Generate LHS
  async function generate() {
    try {
      const form = new FormData();
      form.append("n_experiments", String(nexp));
      form.append("random_seed", String(seed));
      // Using axios to post FormData to proxied /generate_lhs
      const res = await axios.post("/generate_lhs", form, { headers: { "Content-Type": "multipart/form-data" } });
      if (res.data && res.data.table) {
        setLhs(res.data.table);
        setOpt(null);
      } else {
        alert("Unexpected response: " + JSON.stringify(res.data));
      }
    } catch (err) {
      alert("Generate error: " + (err.response?.data?.message || err.message));
      console.error(err);
    }
  }

  // Start watcher
  async function startWatch() {
    try {
      const params = new URLSearchParams({ path: watchPath, nobj: "2" });
      const res = await axios.post(`/start_watch?${params.toString()}`);
      setWatchStatus(res.data);
    } catch (err) {
      alert("Start watch error: " + (err.response?.data?.message || err.message));
      console.error(err);
    }
  }

  async function stopWatch() {
    try {
      const res = await axios.post("/stop_watch");
      setWatchStatus(res.data);
    } catch (err) {
      alert("Stop watch error: " + (err.response?.data?.message || err.message));
      console.error(err);
    }
  }

  // Run optimization
  async function runOptimize() {
    try {
      const parts = objectivesText.split(",").map(p => p.trim()).filter(Boolean);
      const objs = parts.map(p => {
        const [name, mode] = p.split(":").map(x => x.trim());
        return { name, maximize: (mode || "Maximize").toLowerCase().startsWith("max") };
      });
      const payload = { objectives: objs, sor_iterations: Number(sorIter), nobj: Math.max(1, objs.length) };
      const res = await axios.post("/optimize", payload);
      if (res.data && res.data.result) {
        setOpt(res.data.result);
      } else {
        alert("Optimize response: " + JSON.stringify(res.data));
      }
    } catch (err) {
      alert("Optimize error: " + (err.response?.data?.message || err.message));
      console.error(err);
    }
  }

  // Poll results
  async function pollResults() {
    try {
      const res = await axios.get("/results");
      if (res.data) {
        if (res.data.lhs_table) setLhs(res.data.lhs_table);
        if (res.data.optimization_result) setOpt(res.data.optimization_result);
        if (res.data.hplc_responses) setHplc(res.data.hplc_responses);
      }
    } catch (err) {
      console.warn("Poll results error:", err.message);
    }
  }

  // Poll every 3s while polling enabled
  useEffect(() => {
    let id = null;
    if (polling) {
      pollResults(); // immediate
      id = setInterval(() => pollResults(), 3000);
    }
    return () => clearInterval(id);
  }, [polling]);

  return (
    <div className="container">
      <h1>SOR AI — Vite React UI</h1>

      <section className="card">
        <h2>Generate LHS</h2>
        <div className="row">
          <label>Experiments:
            <input type="number" value={nexp} onChange={e => setNexp(Number(e.target.value))} />
          </label>
          <label>Seed:
            <input value={seed} onChange={e => setSeed(Number(e.target.value))} />
          </label>
          <button onClick={generate}>Generate LHS</button>
        </div>
      </section>

      <section className="card">
        <h2>LHS Table</h2>
        {lhs ? (
          <div className="tableWrap">
            <table>
              <thead>
                <tr>
                  {Object.keys(lhs[0]).slice(0, 12).map(k => <th key={k}>{k}</th>)}
                </tr>
              </thead>
              <tbody>
                {lhs.map((r, idx) => (
                  <tr key={idx}>
                    {Object.keys(lhs[0]).slice(0, 12).map(k => <td key={k}>{String(r[k]).length > 12 ? String(r[k]).slice(0,12)+"…" : String(r[k])}</td>)}
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        ) : <div>No LHS generated yet</div>}
      </section>

      <section className="card">
        <h2>Optimization</h2>
        <div className="col">
          <label>Objectives (comma separated, e.g. <code>Yield:Maximize,Imp1:Minimize</code>)</label>
          <input value={objectivesText} onChange={e => setObjectivesText(e.target.value)} />
          <div className="row">
            <label>SOR iterations:
              <input value={sorIter} onChange={e => setSorIter(Number(e.target.value))} />
            </label>
            <button onClick={runOptimize}>Run Optimize</button>
          </div>
        </div>

        <h3>Optimization Result</h3>
        {opt ? <pre className="json">{JSON.stringify(opt, null, 2)}</pre> : <div>None</div>}
      </section>

      <section className="card">
        <h2>HPLC Watcher</h2>
        <div className="row">
          <label>Server folder path to watch:
            <input style={{width:400}} value={watchPath} onChange={e => setWatchPath(e.target.value)} />
          </label>
          <div>
            <button onClick={startWatch}>Start Watch</button>
            <button onClick={stopWatch}>Stop Watch</button>
          </div>
        </div>
        <div>
          <b>Watcher status:</b> <pre className="small">{JSON.stringify(watchStatus)}</pre>
          <b>HPLC responses:</b> <pre className="json">{JSON.stringify(hplc, null, 2)}</pre>
        </div>
      </section>

      <section className="card">
        <h2>Controls</h2>
        <label><input type="checkbox" checked={polling} onChange={e => setPolling(e.target.checked)} /> Poll server results every 3s</label>
      </section>

      <footer>
        <small>Frontend running via <code>npm run dev</code>. Backend should run at <code>http://localhost:8000</code>.</small>
      </footer>
    </div>
  );
}
########################################
:root {
  --bg: #f6f7fb;
  --card: #ffffff;
  --accent: #0b5fff;
  --muted: #666;
}

body {
  font-family: Inter, ui-sans-serif, system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial;
  background: var(--bg);
  color: #111;
  margin: 0;
  padding: 18px;
}

.container {
  max-width: 1100px;
  margin: 0 auto;
}

h1 { margin-bottom: 12px; }
.card {
  background: var(--card);
  padding: 14px;
  border-radius: 8px;
  box-shadow: 0 4px 14px rgba(20,20,50,0.06);
  margin-bottom: 14px;
}

.row {
  display:flex;
  gap: 12px;
  align-items:center;
  margin-top: 8px;
}
.col {
  display:flex;
  flex-direction:column;
  gap:8px;
}
input[type="text"], input[type="number"], input {
  padding: 6px 8px;
  border-radius: 6px;
  border: 1px solid #ddd;
}
button {
  background: var(--accent);
  color: white;
  border: none;
  padding: 8px 12px;
  border-radius: 6px;
  cursor: pointer;
}
button:hover { opacity: 0.95; }

.tableWrap { overflow:auto; max-height: 300px; }
table { width: 100%; border-collapse: collapse; font-size: 13px; }
th, td { padding: 8px; border-bottom: 1px solid #efefef; text-align:left; }
.json { background:#0f1724; color:#d1f0ff; padding:8px; border-radius:6px; max-height:300px; overflow:auto; }
.small { font-size: 12px; color: var(--muted); }
footer { margin-top:10px; color:var(--muted) }
#############################
