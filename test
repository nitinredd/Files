import React, { useEffect, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';

export default function PdfViewerModal({ open, onClose, pdfUrl, productName }) {
  const closeBtnRef = useRef(null);

  useEffect(() => {
    if (open && closeBtnRef.current) {
      closeBtnRef.current.focus();
    }
  }, [open]);

  // Close on ESC
  useEffect(() => {
    const handler = (e) => {
      if (e.key === 'Escape') onClose && onClose();
    };
    if (open) window.addEventListener('keydown', handler);
    return () => window.removeEventListener('keydown', handler);
  }, [open, onClose]);

  if (!open || !pdfUrl) return null;

  return (
    <AnimatePresence>
      <motion.div
        key="pdf-modal-root"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        exit={{ opacity: 0 }}
        className="fixed inset-0 z-50 flex items-center justify-center bg-black/75"
        aria-modal="true"
        role="dialog"
      >
        <motion.div
          initial={{ y: -20, opacity: 0, scale: 0.95 }}
          animate={{ y: 0, opacity: 1, scale: 1 }}
          exit={{ y: -20, opacity: 0, scale: 0.95 }}
          transition={{ duration: 0.4 }}
          className="relative w-full max-w-6xl mx-4 h-[90vh] rounded-2xl bg-white shadow-lg overflow-hidden flex flex-col"
          role="document"
        >
          {/* Header */}
          <div className="flex items-center justify-between px-6 py-4 border-b bg-gray-100 flex-shrink-0">
            <div className="pr-4">
              <h1 className="text-xl font-bold text-gray-800 font-['Merriweather']">
                {productName ? `${productName} - PDF Viewer` : 'PDF Viewer'}
              </h1>
            </div>
            <div className="flex items-center gap-2">
              <a
                href={pdfUrl}
                download
                className="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition text-sm"
                title="Download PDF"
              >
                Download
              </a>
              <button
                ref={closeBtnRef}
                onClick={onClose}
                className="px-4 py-2 bg-gray-300 rounded-md hover:bg-gray-400 transition text-sm"
              >
                Close
              </button>
            </div>
          </div>

          {/* PDF Content */}
          <div className="flex-1 overflow-hidden">
            <iframe
              src={pdfUrl}
              className="w-full h-full border-0"
              title={productName ? `${productName} PDF` : 'PDF Document'}
              style={{ minHeight: '100%' }}
            />
          </div>
        </motion.div>
      </motion.div>
    </AnimatePresence>
  );
}
###################################
productdetail
import React, { useState } from 'react';
import { downloadPdfUrl, fetchSchemeImageUrl } from './api';
import PdfViewerModal from './PdfViewerModal';

export default function ProductDetail({ meta, details }) {
  const [pdfViewerOpen, setPdfViewerOpen] = useState(false);
  // If no product selected
  if (!meta) {
    return (
      <div className="p-6 text-gray-500 bg-white rounded-2xl shadow-sm">
        <div className="text-lg font-medium">Select a product to view details</div>
        <div className="text-sm mt-2">Product metadata and structured tables will appear here.</div>
      </div>
    );
  }

  // Build the endpoint URLs
  const pdfUrl = downloadPdfUrl(meta.id);
  const schemeImageUrl = fetchSchemeImageUrl(meta.id);

  return (
    <div className="p-6 bg-white rounded-2xl shadow-lg">
      <div className="flex justify-between items-start">
        <div>
          <h2 className="text-2xl font-bold text-primary">{meta.name}</h2>
          <div className="text-sm text-purple-700">{meta.reaction_type}</div>
        </div>
        <div className="flex gap-2 items-center">
          {/* Scheme image preview opens in new tab; file download will trigger FileResponse */}
          <a
            href={schemeImageUrl}
            target="_blank"
            rel="noreferrer"
            className="px-3 py-1 rounded-md bg-secondary/20 text-secondary text-sm"
            title="Open synthetic scheme image"
          >
            View Scheme
          </a>

          <button
            onClick={() => setPdfViewerOpen(true)}
            className="px-3 py-1 rounded-md bg-blue-500 text-white text-sm hover:bg-blue-600"
            title="View full PDF"
          >
            View PDF
          </button>
        </div>
      </div>

      <div className="mt-6 space-y-4">
        <div>
          <h4 className="text-sm text-gray-500">API Name</h4>
          <div className="mt-1 p-3 bg-gray-50 rounded">{details.api_name || '—'}</div>
        </div>

        <div>
          <h4 className="text-sm text-gray-500">Reaction Chemistry</h4>
          <div className="mt-1 p-3 bg-gray-50 rounded">{details.reaction_chemistry || '—'}</div>
        </div>

        <div>
          <h4 className="text-sm text-gray-500">Yield</h4>
          <div className="mt-1 p-3 bg-gray-50 rounded">{details.yield || '—'}</div>
        </div>

        <div>
          <h4 className="text-sm text-gray-500">Procedure</h4>
          <div className="mt-1 p-3 bg-white rounded border whitespace-pre-wrap">{details.procedure || '—'}</div>
        </div>

        <div>
          <h4 className="text-sm text-gray-500">Tables</h4>
          {details.tables && details.tables.length > 0 ? (
            details.tables.map((t, idx) => (
              <div className="mt-3" key={idx}>
                {t.headers && t.headers.length > 0 ? (
                  <div className="overflow-auto rounded-lg border">
                    <table className="min-w-full divide-y">
                      <thead className="bg-gray-50">
                        <tr>
                          {t.headers.map((h, i) => <th key={i} className="px-4 py-2 text-left text-xs font-medium text-gray-600">{h}</th>)}
                        </tr>
                      </thead>
                      <tbody className="bg-white divide-y">
                        {t.rows.map((r, ri) => (
                          <tr key={ri}>
                            {r.map((c, ci) => <td key={ci} className="px-4 py-2 text-sm">{c}</td>)}
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                ) : (
                  <pre className="bg-gray-50 p-3 rounded whitespace-pre-wrap">{t.raw_md}</pre>
                )}
              </div>
            ))
          ) : <div className="text-sm text-gray-500">No tabular data detected.</div>}
        </div>

        {/* Scheme image preview shown below tables for better layout */}
        <div className="mt-4">
          <h4 className="text-sm text-gray-500 mb-2">Synthetic Scheme Preview</h4>
          <div className="w-full bg-gray-50 rounded p-3 flex items-center justify-center">
            <img
              src={schemeImageUrl}
              alt={`${meta.name} scheme`}
              onError={(e) => {
                // show placeholder on error
                e.currentTarget.style.display = 'none';
                // optionally show fallback text
                const parent = e.currentTarget.parentNode;
                if (parent) {
                  const node = document.createElement('div');
                  node.textContent = 'Scheme image not available.';
                  node.className = 'text-sm text-gray-500';
                  parent.appendChild(node);
                }
              }}
              style={{ maxWidth: '100%', maxHeight: '360px', objectFit: 'contain', borderRadius: '8px' }}
            />
          </div>
        </div>
      </div>

      {/* PDF Viewer Modal */}
      <PdfViewerModal
        open={pdfViewerOpen}
        onClose={() => setPdfViewerOpen(false)}
        pdfUrl={pdfUrl}
        productName={meta.name}
      />
    </div>
  );
}
#########################

import React, { useEffect, useState, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import FancyLoader from './FancyLoader';
import PdfViewerModal from './PdfViewerModal';
import { downloadPdfUrl, fetchSchemeImageUrl, fetchStructureImageUrl } from './api';

export default function ProductDetailModal({ open, onClose, meta, details, loading }) {
  const [schemeUrl, setSchemeUrl] = useState(null);
  const [imgStatus, setImgStatus] = useState('idle'); // idle | loading | ok | error
  const [imgError, setImgError] = useState('');

  const [structureUrl, setStructureUrl] = useState(null);
  const [structureStatus, setStructureStatus] = useState('idle'); // idle | loading | ok | error
  const [structureError, setStructureError] = useState('');

  const [pdfViewerOpen, setPdfViewerOpen] = useState(false);

  const closeBtnRef = useRef(null);

  useEffect(() => {
    if (!open) {
      setSchemeUrl(null);
      setImgStatus('idle');
      setImgError('');
      setStructureUrl(null);
      setStructureStatus('idle');
      setStructureError('');
      setPdfViewerOpen(false);
      return;
    }
    if (closeBtnRef.current) closeBtnRef.current.focus();
  }, [open]);

  // Load Scheme Image
  useEffect(() => {
    let mounted = true;
    setSchemeUrl(null);
    setImgStatus('idle');
    setImgError('');

    if (!meta || !open) return;

    const candidateUrl =
      meta.scheme_image &&
      typeof meta.scheme_image === 'string' &&
      /^https?:\/\//i.test(meta.scheme_image)
        ? meta.scheme_image
        : fetchSchemeImageUrl(meta.id);

    if (!candidateUrl) {
      setImgStatus('error');
      setImgError('No scheme image configured for this product.');
      return;
    }

    setSchemeUrl(candidateUrl);
    setImgStatus('loading');

    const img = new Image();
    img.crossOrigin = 'anonymous';
    img.onload = () => {
      if (!mounted) return;
      setImgStatus('ok');
    };
    img.onerror = (err) => {
      if (!mounted) return;
      setImgStatus('error');
      setImgError(err.message || 'Failed to load image (CORS or missing file).');
    };

    try {
      img.src = candidateUrl;
    } catch (e) {
      setImgStatus('error');
      setImgError(e.message || 'Failed to start loading image.');
    }

    return () => {
      mounted = false;
    };
  }, [meta, open]);

  // Load Structure Image
  useEffect(() => {
    let mounted = true;
    setStructureUrl(null);
    setStructureStatus('idle');
    setStructureError('');

    if (!meta || !open) return;

    const candidateUrl =
      meta.structure_image &&
      typeof meta.structure_image === 'string' &&
      /^https?:\/\//i.test(meta.structure_image)
        ? meta.structure_image
        : fetchStructureImageUrl(meta.id);

    if (!candidateUrl) {
      setStructureStatus('error');
      setStructureError('No structure image configured for this product.');
      return;
    }

    setStructureUrl(candidateUrl);
    setStructureStatus('loading');

    const img = new Image();
    img.crossOrigin = 'anonymous';
    img.onload = () => {
      if (!mounted) return;
      setStructureStatus('ok');
    };
    img.onerror = (err) => {
      if (!mounted) return;
      setStructureStatus('error');
      setStructureError(err.message || 'Failed to load structure image (CORS or missing file).');
    };

    try {
      img.src = candidateUrl;
    } catch (e) {
      setStructureStatus('error');
      setStructureError(e.message || 'Failed to start loading structure image.');
    }

    return () => {
      mounted = false;
    };
  }, [meta, open]);

  // Close on ESC
  useEffect(() => {
    const handler = (e) => {
      if (e.key === 'Escape') onClose && onClose();
    };
    if (open) window.addEventListener('keydown', handler);
    return () => window.removeEventListener('keydown', handler);
  }, [open, onClose]);

  if (!open || !meta) return null;

  const pdfUrl = downloadPdfUrl(meta.id);
  const downloadScheme = () => {
    if (schemeUrl) {
      const a = document.createElement('a');
      a.href = schemeUrl;
      a.download = `${meta.name}_scheme.png`;
      a.click();
    }
  };

  const downloadStructure = () => {
    if (structureUrl) {
      const a = document.createElement('a');
      a.href = structureUrl;
      a.download = `${meta.name}_structure.png`;
      a.click();
    }
  };

  const copyProcedure = async () => {
    try {
      if (!details?.procedure) return;
      await navigator.clipboard.writeText(details.procedure);
      alert('Procedure copied to clipboard');
    } catch (e) {
      alert('Failed to copy (clipboard permission denied).');
    }
  };

  const openFullImage = () => {
    if (schemeUrl) window.open(schemeUrl, '_blank', 'noopener,noreferrer');
  };

  const openFullStructure = () => {
    if (structureUrl) window.open(structureUrl, '_blank', 'noopener,noreferrer');
  };

  return (
    <AnimatePresence>
      <motion.div
        key="modal-root"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        exit={{ opacity: 0 }}
        className="fixed inset-0 z-50 flex items-center justify-center bg-black/75"
        aria-modal="true"
        role="dialog"
      >
        <motion.div
          initial={{ y: -20, opacity: 0, scale: 0.95 }}
          animate={{ y: 0, opacity: 1, scale: 1 }}
          exit={{ y: -20, opacity: 0, scale: 0.95 }}
          transition={{ duration: 0.4 }}
          className="relative w-full max-w-5xl mx-4 rounded-2xl bg-white shadow-lg overflow-hidden"
          role="document"
        >
          {/* Header */}
          <div className="flex items-center justify-between px-6 py-4 border-b bg-gray-100">
            <div className="pr-4">
              <h1 className="text-2xl font-bold text-gray-800 font-['Merriweather']">{meta.name}</h1>
              <div className="text-sm text-gray-500 capitalize mt-1">{meta.reaction_type?.replace(/_/g, ' ')}</div>
            </div>
            <div className="flex items-center gap-2">
              <button
                ref={closeBtnRef}
                onClick={onClose}
                className="px-4 py-2 bg-gray-300 rounded-md hover:bg-gray-400 transition text-sm">
                Close
              </button>
            </div>
          </div>

          {/* Content */}
          <div className="p-6 grid grid-cols-1 lg:grid-cols-3 gap-6 max-h-[75vh] overflow-auto">
            {/* Main column */}
            <div className="lg:col-span-2 space-y-5">
              {/* Summary */}
              <div className="grid sm:grid-cols-3 gap-4 bg-gray-50 p-4 rounded-lg">
                {['API Name', 'Reaction Chemistry', 'Yield'].map((label, index) => (
                  <div key={index} className="text-gray-700">
                    <div className="text-xs text-gray-600">{label}</div>
                    <div className="text-sm font-medium mt-1">
                      {details ? details[label.toLowerCase().replace(/\s+/g, '_')] || '—' : 'Loading...'}
                    </div>
                  </div>
                ))}
              </div>

              {/* Procedure */}
              <div className="space-y-2">
                <div className="flex items-center justify-between text-sm font-semibold text-gray-600">
                  Procedure
                  <div className="flex gap-2">
                    <button onClick={copyProcedure} className="px-3 py-1 bg-gray-200 rounded hover:bg-gray-300">
                      Copy Procedure
                    </button>
                    <button
                      onClick={() => setPdfViewerOpen(true)}
                      className="px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600"
                    >
                      View PDF
                    </button>
                  </div>
                </div>
                <div
                  className="p-4 bg-gray-100 border rounded text-sm whitespace-pre-wrap font-['Roboto']"
                  style={{ fontFamily: "'Merriweather', serif" }}
                >
                  {details?.procedure || <span className="text-gray-400">Procedure not available.</span>}
                </div>
              </div>

              {/* Tables */}
              <div>
                <h3 className="text-sm font-semibold text-gray-600 mb-2">Tabular Data</h3>
                {details?.tables?.length > 0 ? (
                  <div className="space-y-4">
                    {details.tables.map((table, index) => (
                      <div key={index} className="border rounded-lg p-4 bg-gray-50">
                        <table className="text-sm min-w-full">
                          <thead>
                            <tr className="bg-gray-200">
                              {table.headers.map((header, hIndex) => (
                                <th
                                  key={hIndex}
                                  className="px-3 py-1 text-left font-semibold text-gray-700"
                                >
                                  {header}
                                </th>
                              ))}
                            </tr>
                          </thead>
                          <tbody>
                            {table.rows.map((row, rIndex) => (
                              <tr
                                key={rIndex}
                                className={`${
                                  rIndex % 2 === 0 ? 'bg-white' : 'bg-gray-100'
                                }`}
                              >
                                {row.map((item, cIndex) => (
                                  <td
                                    key={cIndex}
                                    className="px-3 py-2 text-gray-700"
                                  >
                                    {item}
                                  </td>
                                ))}
                              </tr>
                            ))}
                          </tbody>
                        </table>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="text-sm text-gray-400">
                    No tabular data detected in this document.
                  </div>
                )}
              </div>
            </div>

            {/* Scheme and Structure Preview */}
            <div className="space-y-5">
              {/* Scheme Image */}
              <div>
                <h3 className="text-sm font-semibold text-gray-600 mb-2">Synthetic Scheme</h3>
                <div className="bg-gray-100 p-5 rounded-lg flex items-center justify-center">
                  {imgStatus === 'loading' || loading ? (
                    <FancyLoader message="Loading scheme preview" />
                  ) : imgStatus === 'ok' ? (
                    <div className="flex flex-col items-center">
                      <img
                        src={schemeUrl}
                        alt={`${meta.name} scheme`}
                        className="max-w-full max-h-64 rounded-lg border cursor-zoom-in hover:shadow-lg"
                        onClick={openFullImage}
                      />
                      <button
                        onClick={downloadScheme}
                        className="mt-2 px-4 py-2 bg-primary text-white rounded-lg text-sm hover:bg-blue-600"
                      >
                        Download Scheme
                      </button>
                    </div>
                  ) : (
                    <div className="text-gray-500 text-center text-xs">
                      {imgError || 'No scheme image provided for this product.'}
                    </div>
                  )}
                </div>
              </div>

              {/* Structure Image */}
              <div>
                <h3 className="text-sm font-semibold text-gray-600 mb-2">Structure</h3>
                <div className="bg-gray-100 p-5 rounded-lg flex items-center justify-center">
                  {structureStatus === 'loading' || loading ? (
                    <FancyLoader message="Loading structure preview" />
                  ) : structureStatus === 'ok' ? (
                    <div className="flex flex-col items-center">
                      <img
                        src={structureUrl}
                        alt={`${meta.name} structure`}
                        className="max-w-full max-h-64 rounded-lg border cursor-zoom-in hover:shadow-lg"
                        onClick={openFullStructure}
                      />
                      <button
                        onClick={downloadStructure}
                        className="mt-2 px-4 py-2 bg-primary text-white rounded-lg text-sm hover:bg-blue-600"
                      >
                        Download Structure
                      </button>
                    </div>
                  ) : (
                    <div className="text-gray-500 text-center text-xs">
                      {structureError || 'No structure image provided for this product.'}
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
        </motion.div>

        {/* PDF Viewer Modal */}
        <PdfViewerModal
          open={pdfViewerOpen}
          onClose={() => setPdfViewerOpen(false)}
          pdfUrl={pdfUrl}
          productName={meta.name}
        />
      </motion.div>
    </AnimatePresence>
  );
}
