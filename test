{
  "name": "scaleup-predictor-ui",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "axios": "^1.4.0",
    "framer-motion": "^10.12.7",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-icons": "^4.10.1",
    "file-saver": "^2.0.5"
  },
  "devDependencies": {
    "autoprefixer": "^10.4.14",
    "postcss": "^8.4.23",
    "tailwindcss": "^3.4.8",
    "vite": "^5.0.0"
  }
}
##################################################
vite.config.js
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()]
})
##############################
tailwind.config.cjs
module.exports = {
  content: ['./index.html', './src/**/*.{js,jsx,ts,tsx}'],
  theme: {
    extend: {
      colors: {
        primary: '#4f46e5', // indigo-600
        accent: '#06b6d4'   // cyan-500
      },
      boxShadow: {
        soft: '0 8px 30px rgba(15,23,42,0.12)',
        glow: '0 12px 40px rgba(79,70,229,0.18)'
      }
    }
  },
  plugins: []
}
##################################
postcss.config.cjs
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {}
  }
}
#########################
public/index.html
<!doctype html>
<html>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1.0" />
    <title>Scaleup Predictor Chatbot</title>
  </head>
  <body class="antialiased bg-gray-50">
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>
##########################
src/main.jsx
import React from 'react'
import { createRoot } from 'react-dom/client'
import App from './App'
import './index.css'

createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
)
#########################
src/index.css
@tailwind base;
@tailwind components;
@tailwind utilities;

/* center-safe layout */
html, body, #root { height: 100%; }

/* subtle background */
body {
  background-image: radial-gradient(circle at 10% 10%, rgba(79,70,229,0.04), transparent 8%),
                    radial-gradient(circle at 90% 90%, rgba(6,182,212,0.02), transparent 10%);
  color: #0f172a;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/* scrollbars */
.scrollbar-thin::-webkit-scrollbar { height: 8px; width: 8px }
.scrollbar-thin::-webkit-scrollbar-thumb { background: rgba(0,0,0,0.12); border-radius: 8px }

/* chat modal sizing more robust across zoom levels */
.chat-modal {
  width: min(1100px, 94vw);
  height: min(760px, 86vh);
}

/* nicer message bubbles */
.msg-user { background: linear-gradient(90deg,#4f46e5,#7c3aed); color: white; }
.msg-agent { background: white; color: #0f172a; }

/* animated tile hover polish */
.tile-card { transition: transform .22s ease, box-shadow .22s ease; }
.tile-card:hover { transform: translateY(-8px) scale(1.02); box-shadow: 0 18px 40px rgba(15,23,42,0.12); }

/* read-aloud button style */
.read-btn { background: rgba(6,182,212,0.06); padding: 6px 8px; border-radius: 8px; }
#################################
src/api.js
import axios from 'axios'

const API_BASE = import.meta.env.VITE_API_BASE || 'http://localhost:8000'

export async function chatRequest(message) {
  const resp = await axios.post(`${API_BASE}/chat`, { message }, { timeout: 60000 })
  return resp.data
}

export async function uploadDocument(file, onProgress) {
  const fd = new FormData()
  fd.append('file', file, file.name)
  const resp = await axios.post(`${API_BASE}/upload-document`, fd, {
    headers: { 'Content-Type': 'multipart/form-data' },
    onUploadProgress: (ev) => onProgress?.(Math.round((ev.loaded / ev.total) * 100))
  })
  return resp.data
}

export async function speechToTextUpload(blob) {
  const fd = new FormData()
  fd.append('file', blob, 'audio.webm')
  const resp = await axios.post(`${API_BASE}/speech-to-text`, fd, { headers: { 'Content-Type': 'multipart/form-data' } })
  return resp.data
}

export function textToSpeechUrl(text) {
  return `${API_BASE}/text-to-speech?text=${encodeURIComponent(text)}`
}
###############################
src/utils/parseResponseToTable.js
export function parseResponseToTable(str) {
  if (!str) return null
  const s = str.trim()
  try {
    const parsed = JSON.parse(s)
    if (Array.isArray(parsed) && parsed.length && parsed.every(it => typeof it === 'object')) {
      return { type: 'json', data: parsed }
    }
    if (typeof parsed === 'object') return { type: 'json', data: [parsed] }
  } catch {}
  const lines = s.split('\n').map(l => l.trim()).filter(Boolean)
  if (lines.length >= 2) {
    const sep = lines[0].includes('|') ? '|' : (lines[0].includes('\t') ? '\t' : null)
    if (sep) {
      const headers = lines[0].split(sep).map(x => x.trim())
      const rows = lines.slice(1).map(r => r.split(sep).map(x => x.trim()))
      return { type: 'matrix', headers, rows }
    }
  }
  return null
}
##########################################
src/components/Message.jsx
import React from 'react'
import { parseResponseToTable } from '../utils/parseResponseToTable'
import { FiVolume2 } from 'react-icons/fi'

export default function Message({ from, text, onReadAloud }) {
  const table = parseResponseToTable(text)
  return (
    <div className={`flex ${from === 'user' ? 'justify-end' : 'justify-start'}`}>
      <div className={`max-w-[78%] p-4 rounded-2xl shadow-soft ${from === 'user' ? 'msg-user' : 'msg-agent'}`}>
        <div className="prose-sm whitespace-pre-wrap break-words">
          {!table && <div>{text}</div>}

          {table?.type === 'json' && (
            <div className="overflow-auto">
              <table className="min-w-full text-sm table-auto">
                <thead>
                  <tr className="text-left">
                    {Object.keys(table.data[0]).map(h => <th key={h} className="px-3 py-2 border-b">{h}</th>)}
                  </tr>
                </thead>
                <tbody>
                  {table.data.map((row, idx) => (
                    <tr key={idx}>
                      {Object.keys(table.data[0]).map(k => <td key={k} className="px-3 py-2 border-b align-top">{String(row[k] ?? '')}</td>)}
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}

          {table?.type === 'matrix' && (
            <div className="overflow-auto">
              <table className="min-w-full text-sm table-auto">
                <thead>
                  <tr>{table.headers.map(h => <th key={h} className="px-3 py-2 border-b">{h}</th>)}</tr>
                </thead>
                <tbody>
                  {table.rows.map((r, i) => <tr key={i}>{r.map((c,j) => <td key={j} className="px-3 py-2 border-b">{c}</td>)}</tr>)}
                </tbody>
              </table>
            </div>
          )}
        </div>

        {from === 'agent' && (
          <div className="mt-3 flex items-center justify-end gap-2">
            <button onClick={() => onReadAloud?.(text)} aria-label="Read aloud" className="read-btn flex items-center gap-2 text-xs">
              <FiVolume2 /> Read
            </button>
          </div>
        )}
      </div>
    </div>
  )
}
#######################################
src/components/PromptModal.jsx
import React from 'react'
import { motion } from 'framer-motion'
import { FiX } from 'react-icons/fi'

export default function PromptModal({ open, onClose, tiles, onPick }) {
  if (!open) return null

  return (
    <div className="fixed inset-0 z-60 flex items-center justify-center">
      <div onClick={onClose} className="absolute inset-0 bg-black/40 backdrop-blur-sm"></div>

      <motion.div initial={{ scale: 0.95, opacity: 0 }} animate={{ scale: 1, opacity: 1 }}
        className="relative w-[min(980px,92vw)] bg-white rounded-2xl shadow-2xl p-6">
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-lg font-semibold">Prompt Gallery</h3>
          <button onClick={onClose} aria-label="Close prompts" className="p-2 rounded hover:bg-gray-100">
            <FiX />
          </button>
        </div>

        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
          {Object.entries(tiles).flatMap(([group, prompts]) =>
            prompts.map((p, idx) => (
              <motion.button key={group + idx}
                whileHover={{ y: -8, scale: 1.02 }} whileTap={{ scale: 0.98 }}
                onClick={() => { onPick(p); onClose() }}
                className="tile-card p-4 rounded-xl bg-gradient-to-br from-white to-gray-50 text-left">
                <div className="text-sm font-medium">{p}</div>
                <div className="text-xs text-gray-500 mt-2">Prompt</div>
              </motion.button>
            ))
          )}
        </div>
      </motion.div>
    </div>
  )
}
###############################################
src/components/FileUploader.jsx
import React, { useRef, useState } from 'react'
import { FiUpload } from 'react-icons/fi'
import { uploadDocument } from '../api'
import { motion } from 'framer-motion'

export default function FileUploader({ onUploaded }) {
  const ref = useRef(null)
  const [progress, setProgress] = useState(0)
  const [uploading, setUploading] = useState(false)
  const [name, setName] = useState(null)

  async function handleFiles(files) {
    if (!files?.length) return
    const f = files[0]
    setName(f.name)
    setUploading(true)
    try {
      const data = await uploadDocument(f, (p) => setProgress(p))
      onUploaded?.(data)
    } catch (e) {
      onUploaded?.({ error: String(e) })
    } finally {
      setUploading(false)
      setTimeout(()=> setProgress(0), 500)
    }
  }

  return (
    <div className="flex items-center gap-2">
      <input ref={ref} type="file" hidden onChange={(e) => handleFiles(e.target.files)} />
      <motion.button whileHover={{ scale: 1.03 }} onClick={() => ref.current.click()} className="px-3 py-2 rounded-lg bg-white border flex items-center gap-2">
        <FiUpload /> <span className="text-sm">Upload</span>
      </motion.button>
      {uploading && (
        <div className="w-36">
          <div className="text-xs text-gray-500">{name}</div>
          <div className="h-2 bg-gray-200 rounded mt-1 overflow-hidden">
            <div style={{ width: `${progress}%` }} className="h-full bg-primary"></div>
          </div>
        </div>
      )}
    </div>
  )
}
#############################################
src/components/ChatWidget.jsx
import React, { useEffect, useRef, useState } from 'react'
import { motion } from 'framer-motion'
import { FiMessageCircle, FiX, FiUpload, FiMic, FiSend, FiPlus, FiChevronDown } from 'react-icons/fi'
import Message from './Message'
import PromptModal from './PromptModal'
import FileUploader from './FileUploader'
import { chatRequest, speechToTextUpload, textToSpeechUrl } from '../api'

const TILE_QUESTIONS = {
  "Product A": ["What is the API used?", "What is the batch size?", "Who is the manufacturer?"],
  "Line B": ["What is the speed range?", "What equipment is used?", "What is the pressure limit?"],
  "Formulation Z": ["List excipients used", "Describe dissolution method"],
  "Process Y": ["Steps in granulation?", "Drying temperature?"],
  "Machine Q": ["Model number details?", "Maintenance interval?"]
}

export default function ChatWidget() {
  const [open, setOpen] = useState(false)
  const [promptOpen, setPromptOpen] = useState(false)
  const [messages, setMessages] = useState([])
  const [input, setInput] = useState('')
  const [loading, setLoading] = useState(false)
  const [recording, setRecording] = useState(false)
  const recorderRef = useRef(null)
  const audioChunksRef = useRef([])
  const scrollRef = useRef(null)

  useEffect(() => { if (open) scrollToBottom() }, [open, messages])

  function appendMsg(from, text) {
    setMessages(m => [...m, { id: crypto?.randomUUID?.() ?? Date.now(), from, text }])
  }

  async function send() {
    const q = input.trim()
    if (!q) return
    appendMsg('user', q)
    setInput('')
    setLoading(true)
    try {
      const resp = await chatRequest(q)
      const ans = resp?.response ?? 'Oops! No relevant information found.'
      appendMsg('agent', ans)
    } catch (e) {
      appendMsg('agent', 'Error calling backend — ' + String(e.message ?? e))
    } finally {
      setLoading(false)
    }
  }

  function scrollToBottom() {
    try { scrollRef.current?.scrollIntoView({ behavior: 'smooth', block: 'end' }) } catch (e) {}
  }

  async function startRecording() {
    try {
      const s = await navigator.mediaDevices.getUserMedia({ audio: true })
      const mr = new MediaRecorder(s)
      recorderRef.current = mr
      audioChunksRef.current = []
      mr.ondataavailable = (e) => audioChunksRef.current.push(e.data)
      mr.onstop = async () => {
        const blob = new Blob(audioChunksRef.current, { type: 'audio/webm' })
        try {
          const r = await speechToTextUpload(blob)
          const text = r?.text ?? ''
          if (text) setInput(text)
        } catch (err) {
          appendMsg('agent', 'STT Error: ' + String(err.message ?? err))
        }
      }
      mr.start()
      setRecording(true)
    } catch (e) {
      appendMsg('agent', 'Mic access denied: ' + e.message)
    }
  }

  function stopRecording() {
    const mr = recorderRef.current
    if (mr && mr.state !== 'inactive') mr.stop()
    setRecording(false)
  }

  function onPromptPick(p) {
    setInput(p)
  }

  function onFileUploaded(data) {
    if (data?.filename) appendMsg('agent', `Uploaded: ${data.filename} — indexed and available for querying.`)
    else appendMsg('agent', `Upload response: ${JSON.stringify(data)}`)
  }

  function readAloud(text) {
    const url = textToSpeechUrl(text)
    const audio = new Audio(url)
    audio.play()
  }

  return (
    <>
      {/* Floating icon */}
      <div className="fixed bottom-6 right-6 z-50">
        <motion.button
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.96 }}
          onClick={() => setOpen(true)}
          className="w-16 h-16 rounded-full shadow-glow bg-gradient-to-br from-primary to-indigo-500 flex items-center justify-center text-white text-2xl"
          aria-label="Open chat"
        >
          <FiMessageCircle />
        </motion.button>
      </div>

      {/* Centered modal */}
      {open && (
        <div className="fixed inset-0 z-60 flex items-center justify-center p-4">
          <div onClick={() => setOpen(false)} className="absolute inset-0 bg-black/40 backdrop-blur-sm"></div>

          <motion.div
            initial={{ opacity: 0, scale: 0.98 }}
            animate={{ opacity: 1, scale: 1 }}
            className="relative chat-modal bg-white rounded-2xl shadow-2xl overflow-hidden"
            role="dialog"
            aria-modal="true"
          >
            {/* Header */}
            <div className="flex items-center justify-between px-6 py-4 border-b">
              <div className="flex items-center gap-3">
                <div className="w-11 h-11 rounded-lg bg-gradient-to-br from-primary to-indigo-400 flex items-center justify-center text-white font-bold shadow">SP</div>
                <div>
                  <div className="font-semibold text-lg">Scaleup Predictor</div>
                  <div className="text-xs text-gray-500">Ask your documents & dataset</div>
                </div>
              </div>

              <div className="flex items-center gap-3">
                <button onClick={() => setPromptOpen(true)} className="px-3 py-2 rounded bg-white border flex items-center gap-2">
                  <FiChevronDown /> Prompts
                </button>

                <FileUploader onUploaded={onFileUploaded} />

                <button onClick={() => setOpen(false)} className="p-2 rounded hover:bg-gray-100">
                  <FiX />
                </button>
              </div>
            </div>

            {/* Main */}
            <div className="flex flex-col h-full">
              <div className="flex-1 p-6 overflow-auto scrollbar-thin">
                <div className="flex flex-col gap-4">
                  {messages.length === 0 && (
                    <div className="text-center text-gray-400">Welcome — ask anything related to your dataset or uploaded documents.</div>
                  )}

                  {messages.map(m => (
                    <Message key={m.id} from={m.from} text={m.text} onReadAloud={readAloud} />
                  ))}

                  <div ref={scrollRef} />
                </div>
              </div>

              {/* Composer */}
              <div className="px-6 py-4 border-t bg-white">
                <div className="flex items-center gap-3">
                  <textarea
                    value={input}
                    onChange={(e) => setInput(e.target.value)}
                    placeholder="Type your question (Shift+Enter for newline, Enter to send)"
                    className="flex-1 resize-none p-3 rounded-xl border focus:outline-none"
                    rows={2}
                    onKeyDown={(e) => {
                      if (e.key === 'Enter' && !e.shiftKey) { e.preventDefault(); send() }
                    }}
                  />

                  <div className="flex items-center gap-2">
                    <button
                      onClick={() => { recording ? stopRecording() : startRecording() }}
                      className={`p-3 rounded-lg border ${recording ? 'bg-red-50' : 'bg-white'}`}
                      title={recording ? 'Stop recording' : 'Record (speech-to-text)'}
                    >
                      <FiMic />
                    </button>

                    <button onClick={() => send()} className="px-4 py-2 rounded-lg bg-primary text-white flex items-center gap-2">
                      <FiSend /> Send
                    </button>
                  </div>
                </div>

                {loading && <div className="text-xs text-gray-500 mt-2">Thinking...</div>}
              </div>
            </div>
          </motion.div>
        </div>
      )}

      <PromptModal open={promptOpen} onClose={() => setPromptOpen(false)} tiles={TILE_QUESTIONS} onPick={onPromptPick} />
    </>
  )
}
#######################################
src/App.jsx
import React from 'react'
import ChatWidget from './components/ChatWidget'

export default function App() {
  return (
    <div className="h-screen w-full flex items-center justify-center">
      <div className="text-center">
        <h1 className="text-4xl font-extrabold">Scaleup Predictor</h1>
        <p className="text-gray-500 mt-2">Click the chat icon at the bottom-right to open the assistant.</p>
      </div>

      <ChatWidget />
    </div>
  )
}
