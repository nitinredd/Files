import React, { useState, useRef, useEffect } from 'react'
import axios from 'axios'
import './Chatbot.css'

export default function Chatbot({ apiUrl }) {
  // Replace SAMPLE_TILES with your actual tile‚Üíquestions mapping:
  const SAMPLE_TILES = {
    "Product A": ["What is the API used?", "What is the batch size?", "Who is the manufacturer?"],
    "Line B":    ["What is the speed range?", "What equipment is used?", "What is the pressure limit?"],
    "Facility X":["Who owns this facility?", "What lines are operational?"],
    // ‚Ä¶add your own‚Ä¶
  }

  const [open, setOpen] = useState(false)
  const [tiles] = useState(SAMPLE_TILES)
  const [messages, setMessages] = useState([])
  const [input, setInput] = useState('')
  const [listening, setListening] = useState(false)
  const [loading, setLoading] = useState(false)
  const recognitionRef = useRef(null)
  const messagesEndRef = useRef(null)

  // Initialize browser STT
  useEffect(() => {
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition
    if (!SpeechRecognition) return
    const recog = new SpeechRecognition()
    recog.continuous = false
    recog.interimResults = false
    recog.lang = 'en-US'
    recog.onstart = () => setListening(true)
    recog.onend = () => setListening(false)
    recog.onresult = e => {
      const txt = e.results[0][0].transcript
      handleSend(txt)
    }
    recognitionRef.current = recog
  }, [])

  // On open: greeting + tile buttons
  useEffect(() => {
    if (open && messages.length === 0) {
      setMessages([
        { from: 'bot', text: 'Hi! How can I help?' },
        { from: 'bot', options: Object.keys(tiles) }
      ])
    }
  }, [open, tiles, messages.length])

  // Auto‚Äëscroll when messages or loading changes
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })
  }, [messages, loading])

  // Send helper
  const handleSend = async (text) => {
    setLoading(true)
    // remove any existing loading bubble
    setMessages(m => m.filter(msg => !msg.loading))
    setMessages(m => [...m, { from: 'user', text }, { from: 'bot', text: 'Analyzing...', loading: true }])
    setInput('')
    try {
      const res = await axios.post(apiUrl, { message: text })
      setMessages(m => m.filter(msg => !msg.loading))
      setMessages(m => [...m, { from: 'bot', text: res.data.response }])
    } catch {
      setMessages(m => m.filter(msg => !msg.loading))
      setMessages(m => [...m, { from: 'bot', text: 'Server error.' }])
    } finally {
      setLoading(false)
    }
  }

  // Handle tile click
  const onTileClick = (tile) => {
    setMessages(m => [...m, { from: 'user', text: tile }, { from: 'bot', options: tiles[tile] }])
  }

  // Handle button under tile
  const onOptionClick = (opt) => handleSend(opt)

  // Start voice recording
  const startListening = () => {
    recognitionRef.current?.start()
  }

  // Play TTS
  const playAudio = async (text) => {
    try {
      const blob = await axios.get(
        apiUrl.replace(/\/chat$/, '') + '/text-to-speech',
        { params: { text }, responseType: 'blob' }
      ).then(r => r.data)
      const url = URL.createObjectURL(blob)
      new Audio(url).play()
    } catch {}
  }

  return (
    <>
      {/* Sphere trigger as MP4 */}
      <video
        className={`chat-trigger ${open ? 'hidden' : ''}`}
        src="/sphere.mp4"
        autoPlay muted loop
        onClick={() => setOpen(true)}
      />

      {open && (
        <div className="chatbot-widget">
          <div className="chat-body">
            <div className="messages">
              {messages.map((m,i) =>
                m.options ? (
                  <div key={i} className="bot-options">
                    {m.options.map((opt,j) => (
                      <button key={j} className="tile-btn" onClick={() => onOptionClick(opt)}>
                        {opt}
                      </button>
                    ))}
                  </div>
                ) : (
                  <div key={i} className={`bubble ${m.from}`}>
                    {m.text}
                    {m.loading && <img src="/spinner.gif" alt="..." className="spinner" />}
                    {m.from==='bot' && !m.loading && (
                      <button className="read-btn" onClick={()=>playAudio(m.text)}>üîä</button>
                    )}
                  </div>
                )
              )}
              <div ref={messagesEndRef} />
            </div>

            <div className="chat-input">
              <div className="mic-wrapper" onClick={startListening}>
                {listening
                  ? <img src="/mic.gif" alt="Listening‚Ä¶" className="mic-gif" />
                  : <span className="mic-icon">üéôÔ∏è</span>
                }
              </div>

              <input
                value={input}
                onChange={e => setInput(e.target.value)}
                onKeyDown={e => e.key==='Enter' && input.trim() && !loading && handleSend(input)}
                placeholder="Type your question‚Ä¶"
              />

              <button
                className="send-btn"
                disabled={!input.trim() || loading}
                onClick={() => handleSend(input)}
              >‚û§</button>
            </div>
          </div>
        </div>
      )}
    </>
  )
}
######################
/* Sphere trigger */
.chat-trigger {
  position: fixed;
  bottom: 24px;
  right: 24px;
  width: 64px;
  height: 64px;
  border-radius: 50%;
  cursor: pointer;
  z-index: 1000;
}
.chat-trigger.hidden {
  display: none;
}

/* Chat window */
.chatbot-widget {
  position: fixed;
  bottom: 100px;
  right: 24px;
  width: 360px;
  height: 500px;
  backdrop-filter: blur(20px);
  background: rgba(255,255,255,0.15);
  border-radius: 16px;
  box-shadow: 0 16px 40px rgba(0,0,0,0.2);
  display: flex;
  flex-direction: column;
  overflow: hidden;
  z-index: 999;
}

.chat-body {
  flex: 1;
  display: flex;
  flex-direction: column;
}

.messages {
  flex: 1;
  overflow-y: auto;      /* enables vertical scroll */
  padding: 16px;
}

/* Bubbles */
.bubble {
  display: inline-block;
  padding: 12px 16px;
  margin: 8px 0;
  border-radius: 20px;
  position: relative;
  max-width: 80%;
  font-size: 0.95em;
}
.bubble.user {
  background: rgba(255,255,255,0.4);
  margin-left: auto;
}
.bubble.bot {
  background: rgba(255,255,255,0.6);
  margin-right: auto;
}
.bubble.bot::after {
  content: '';
  position: absolute;
  top: 50%; left: -8px;
  border-top: 8px solid transparent;
  border-right: 8px solid rgba(255,255,255,0.6);
  border-bottom: 8px solid transparent;
  transform: translateY(-50%);
}
.bubble.user::after {
  content: '';
  position: absolute;
  top: 50%; right: -8px;
  border-top: 8px solid transparent;
  border-left: 8px solid rgba(255,255,255,0.4);
  border-bottom: 8px solid transparent;
  transform: translateY(-50%);
}

/* Spinner */
.spinner {
  width: 16px; height: 16px;
  margin-left: 8px;
  vertical-align: middle;
}

/* Tiles */
.bot-options {
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
  margin: 8px 0;
}
.tile-btn {
  background: linear-gradient(135deg, #74b9ff, #a29bfe);
  border: none;
  border-radius: 24px;
  padding: 8px 16px;
  color: white;
  cursor: pointer;
  box-shadow: 0 8px 16px rgba(0,0,0,0.1);
  transition: transform .1s;
}
.tile-btn:hover {
  transform: translateY(-2px);
}

/* Input area */
.chat-input {
  display: flex;
  align-items: center;
  padding: 12px;
  border-top: 1px solid rgba(255,255,255,0.3);
}

.mic-wrapper {
  width: 36px; height: 36px;
  margin-right: 8px;
  display: flex; align-items: center; justify-content: center;
  cursor: pointer;
}
.mic-icon {
  font-size: 1.5em;
}
.mic-gif {
  width: 36px; height: 36px;
}

input {
  flex: 1;
  padding: 10px 14px;
  border: none;
  border-radius: 20px;
  background: rgba(255,255,255,0.3);
  outline: none;
  font-size: 0.95em;
}

.send-btn {
  margin-left: 8px;
  background: radial-gradient(circle at top left, #6c5ce7, #fd79a8);
  border: none;
  color: white;
  width: 36px; height: 36px;
  border-radius: 50%;
  cursor: pointer;
  font-size: 1.1em;
  display: flex;
  align-items: center;
  justify-content: center;
}
