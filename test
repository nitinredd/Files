import fitz  # PyMuPDF
import pytesseract
from PIL import Image
import os
import io
import tempfile
import time
from pathlib import Path

def pdf_to_images(pdf_path):
    """
    Convert PDF pages to images using PyMuPDF
    Returns a list of PIL Images
    """
    # Open the PDF
    pdf_document = fitz.open(pdf_path)
    
    images = []
    # Iterate through pages
    for page_num in range(pdf_document.page_count):
        page = pdf_document[page_num]
        
        # Convert page to image
        pix = page.get_pixmap()
        img_data = pix.tobytes("png")
        
        # Convert to PIL Image
        img = Image.open(io.BytesIO(img_data))
        images.append(img)
    
    pdf_document.close()
    return images

def safe_remove(file_path, max_attempts=5):
    """
    Safely remove a file with multiple attempts
    """
    for i in range(max_attempts):
        try:
            if os.path.exists(file_path):
                os.remove(file_path)
            return True
        except PermissionError:
            print(f"Attempt {i+1}: Waiting for file to be released...")
            time.sleep(1)  # Wait for 1 second before trying again
    return False

def process_images_and_create_pdf(images, output_path):
    """
    Perform OCR on images and create a new PDF with the OCR'd text overlay
    """
    # Configure Tesseract for Japanese
    pytesseract.pytesseract.tesseract_cmd = r'tesseract'  # Update this path if needed
    
    # Create a new PDF
    pdf = fitz.open()
    
    # Create a temporary directory
    with tempfile.TemporaryDirectory() as temp_dir:
        for i, image in enumerate(images):
            # Create temporary file path
            temp_pdf_path = Path(temp_dir) / f"temp_ocr_{i}.pdf"
            
            try:
                # Perform OCR to get text and bounding boxes
                ocr_data = pytesseract.image_to_pdf_or_hocr(image, lang='jpn', extension='pdf')
                
                # Write OCR results to temporary file
                temp_pdf_path.write_bytes(ocr_data)
                
                # Open the temporary PDF and append it to our main PDF
                temp_pdf = fitz.open(temp_pdf_path)
                pdf.insert_pdf(temp_pdf)
                temp_pdf.close()
                
            except Exception as e:
                print(f"Error processing page {i+1}: {str(e)}")
                continue
    
    # Save the final PDF
    try:
        pdf.save(output_path)
    except Exception as e:
        print(f"Error saving final PDF: {str(e)}")
        raise
    finally:
        pdf.close()

def main():
    # Input and output paths
    input_pdf = input("Enter the path to your PDF file: ")
    output_pdf = input("Enter the output PDF path (including .pdf extension): ")
    
    try:
        # Validate input file exists
        if not os.path.exists(input_pdf):
            raise FileNotFoundError(f"Input PDF not found: {input_pdf}")
            
        # Validate output directory exists or create it
        output_dir = os.path.dirname(output_pdf)
        if output_dir and not os.path.exists(output_dir):
            os.makedirs(output_dir)
        
        # Convert PDF to images
        print("Converting PDF to images...")
        images = pdf_to_images(input_pdf)
        
        # Process images and create searchable PDF
        print("Performing OCR and creating searchable PDF...")
        process_images_and_create_pdf(images, output_pdf)
        
        print(f"Processing complete! Check your output PDF: {output_pdf}")
        
    except Exception as e:
        print(f"An error occurred: {str(e)}")

if __name__ == "__main__":
    main()
