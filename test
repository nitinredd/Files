// src/App.jsx
import React, { useEffect, useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import ChatWindow from "./components/ChatWindow";
import ChatInput from "./components/ChatInput";
import ChatHistory from "./components/ChatHistory";
import ProductGrid from "./components/ProductGrid";
import ProductDetailDrawer from "./components/ProductDetailDrawer";

import { USE_MOCK } from "./config";
import { REACTION_TYPES, MOCK_PRODUCTS } from "./mockData";

export default function App() {
  const [messages, setMessages] = useState([]);
  const [threads, setThreads] = useState([]);
  const [currentProducts, setCurrentProducts] = useState([]);
  const [selectedProduct, setSelectedProduct] = useState(null);

  useEffect(() => {
    const saved = localStorage.getItem("pharma_threads");
    if (saved) setThreads(JSON.parse(saved));
  }, []);

  useEffect(() => {
    localStorage.setItem("pharma_threads", JSON.stringify(threads));
  }, [threads]);

  async function handleSend(text) {
    const userMsg = { role: "user", content: text };
    setMessages(prev => [...prev, userMsg]);

    const matched = REACTION_TYPES.find(rt => new RegExp("\\b" + rt + "\\b", "i").test(text));
    if (matched) {
      if (USE_MOCK) {
        const found = MOCK_PRODUCTS.filter(p => p.reaction_type === matched);
        setCurrentProducts(found);
        setMessages(prev => [...prev, { role: "assistant", content: `Found ${found.length} products for ${matched}` }]);
      } else {
        try {
          const res = await fetch(`${API_BASE_URL}/api/reaction?type=${encodeURIComponent(matched)}`);
          const data = await res.json();
          setCurrentProducts(data.products || []);
          setMessages(prev => [...prev, { role: "assistant", content: `Found ${data.products?.length || 0} products for ${matched}` }]);
        } catch (err) {
          setMessages(prev => [...prev, { role: "assistant", content: `Error fetching products for ${matched}` }]);
        }
      }

      setThreads(prev => [{ id: "t-" + Date.now(), title: matched, snippet: text }, ...prev].slice(0, 10));
    } else {
      setMessages(prev => [...prev, { role: "assistant", content: "Please ask about a specific reaction chemistry type (e.g. Amidation, Reduction, C-C Bond Formation)." }]);
    }
  }

  const onSelectProduct = (product) => {
    setSelectedProduct(product);
  };

  return (
    // Center the whole app on the page, constrain width, but keep chat-history at the right
    <div className="min-h-screen bg-gradient-to-b from-white to-gray-50 flex items-start py-8">
      <div className="w-full max-w-7xl mx-auto px-4">
        <div className="grid grid-cols-1 md:grid-cols-[1fr_320px] gap-6">
          {/* Main content column */}
          <div className="flex flex-col gap-4">
            <header className="bg-gradient-to-r from-brandPurple-300 to-brandPurple-500 rounded-2xl p-6 text-white shadow-soft-lg">
              <div className="flex items-center justify-between">
                <div>
                  <h1 className="text-2xl font-bold">PharmaReaction AI</h1>
                  <p className="text-sm mt-1 opacity-90">Reaction Chemistry Knowledge Base — demo frontend</p>
                </div>
                <div className="flex items-center gap-3">
                  <button className="bg-white/20 px-3 py-2 rounded-md">Demo</button>
                  <div className="text-xs text-white/90">Light violet theme</div>
                </div>
              </div>
            </header>

            {/* Main Body */}
            <div className="flex-1 relative">
              <AnimatePresence>
                {messages.length === 0 && (
                  <motion.div
                    key="center-input"
                    initial={{ opacity: 0, y: -20 }}
                    animate={{ opacity: 1, y: 0 }}
                    exit={{ opacity: 0, y: 20 }}
                    transition={{ type: "spring", stiffness: 300, damping: 28 }}
                    className="absolute inset-0 flex items-center justify-center"
                  >
                    <div className="w-full max-w-2xl p-8 bg-white rounded-2xl shadow-soft-lg border">
                      <h2 className="text-xl font-semibold text-brandPurple-700 text-center">Start a conversation</h2>
                      <p className="text-sm text-gray-400 text-center mt-2">Ask about any reaction chemistry — e.g. "Amidation"</p>

                      <div className="mt-6">
                        <ChatInput onSend={handleSend} placeholder="Ask about reaction chemistry (e.g. Amidation, Reduction)..." />
                      </div>
                    </div>
                  </motion.div>
                )}
              </AnimatePresence>

              <AnimatePresence>
                {messages.length > 0 && (
                  <motion.div
                    key="chat-window"
                    initial={{ opacity: 0, y: 30 }}
                    animate={{ opacity: 1, y: 0 }}
                    exit={{ opacity: 0, y: 30 }}
                    transition={{ type: "spring", stiffness: 300, damping: 28 }}
                    className="flex flex-col h-full"
                  >
                    <ChatWindow messages={messages} />
                    <div>
                      <ChatInput onSend={handleSend} placeholder="Type your message..." />
                    </div>
                  </motion.div>
                )}
              </AnimatePresence>
            </div>

            {/* Products result area */}
            <div className="mt-4">
              {currentProducts.length > 0 && (
                <div className="bg-white p-4 rounded-xl border">
                  <div className="flex items-center justify-between">
                    <h3 className="font-semibold text-brandPurple-700">Products</h3>
                    <div className="text-sm text-gray-500">{currentProducts.length} results</div>
                  </div>
                  <div className="mt-4">
                    <ProductGrid products={currentProducts} onSelect={onSelectProduct} />
                  </div>
                </div>
              )}
            </div>
          </div>

          {/* Right column: chat history */}
          <div>
            <ChatHistory threads={threads} onSelect={(id) => alert("Thread selected: " + id)} />
          </div>

          {/* Product drawer */}
          <ProductDetailDrawer product={selectedProduct} onClose={() => setSelectedProduct(null)} />
        </div>
      </div>
    </div>
  );
}
