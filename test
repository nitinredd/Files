import streamlit as st
import pandas as pd
import vertexai
import google.auth
import os
import tempfile
import warnings

import utils.optimization, utils.domain, utils.lhs, utils.hplcread, utils.flowrate
from vertexai.preview.generative_models import GenerativeModel, HarmCategory, HarmBlockThreshold, SafetySetting

# ---------------------------------------
# Vertex AI / Gemini Configuration
# ---------------------------------------
def configure_gemini():
    os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "D:/datascience-254609-genai.json"  # adjust as needed
    credentials, project_id = google.auth.default()
    safety_config = [
        SafetySetting(category=hc, threshold=HarmBlockThreshold.BLOCK_NONE)
        for hc in HarmCategory
    ]
    return {
        "flash_thinking": GenerativeModel("gemini-2.0-flash-thinking-exp-01-21"),
        "pro_model": GenerativeModel("gemini-2.0-pro-exp-02-05"),
        "safety": safety_config
    }

gemini_config = configure_gemini()

# ---------------------------------------
# Predefined Prompt Templates
# ---------------------------------------
PROMPT_TEMPLATES = {
    "3-Pump Basic": """I need flow rate calculations for 3 pumps where:
- Reaction time = ResidencetimeT1 Ã— Reactor Volume (from Reactor Details)
- Flow rates determined by molar ratios of:
  1. Primary reactant (first in Pump Details)
  2. Reagent 1 (second in Pump Details) using Equivalence1
  3. Reagent 2 (third in Pump Details) using Equivalence2
- Molarity = (Concentration / Molecular Weight) Ã— 1000
- Total flow = Reactor Volume / Residence Time
- Pump flows = (Individual molar ratio / Total molar sum) Ã— Total flow""",
    
    "4-Pump Advanced": """Calculate flow rates for 4 pumps with:
- Reaction time = (ResidenceTimeT1 + ResidenceTimeT2) Ã— Reactor Volume
- Pump 1: Base reactant (first in Pump Details)
- Pumps 2-3: Sequential reagents using Equivalence1-2
- Pump 4: Quench flow at 1.5Ã— total of first 3 pumps
- Account for temperature compensation from LHS experiments""",
    
    "Custom Setup": """Create custom flow calculations where:
- Reaction time depends on both ResidenceTime and CatalystLoading
- Flow rates must maintain stoichiometric ratios from LHS
- Include safety margin of 15% on all pump flows
- Handle unit conversions between ml/min and L/hour"""
}

# ---------------------------------------
# Gemini Code Generation Functions
# ---------------------------------------
def generate_flow_code(prompt, use_deepthink, pump_df, reactor_df):
    model = gemini_config["flash_thinking"] if use_deepthink else gemini_config["pro_model"]
    full_prompt = f"""
Generate Python code for pandas DataFrame operations that:
1. Takes df_lhs, df_pump, df_reactor as inputs.
2. Returns a DataFrame with calculated flow rates and reaction time.
3. Uses these columns from Pump Details: {list(pump_df.columns)}
4. Uses these columns from Reactor Details: {list(reactor_df.columns)}
5. Follows chemical engineering best practices.
6. Includes error checking for negative values.

User Requirements:
{prompt}

Return ONLY valid Python code without explanations.
"""
    response = model.generate_content(
        contents=full_prompt,
        safety_settings=gemini_config["safety"]
    )
    return response.text

def validate_generated_code(code):
    # Basic structure check: ensure key phrases exist
    required = [
        "def generated_flowrate(",
        "df_lhs",
        "df_pump",
        "df_reactor",
        "result =",
        "return"
    ]
    return all(component in code for component in required)

def inject_generated_code(generated_code):
    with open("utils/flowrate.py", "w") as f:
        f.write("import pandas as pd\n\n")
        f.write("def generated_flowrate(df_lhs, df_pump, df_reactor):\n")
        for line in generated_code.splitlines():
            f.write(f"    {line}\n")
        f.write("\n    return result\n")

def safe_execute(dfs):
    namespace = {
        "pd": pd,
        "df_lhs": dfs["lhs"].copy(),
        "df_pump": dfs["pump"].copy(),
        "df_reactor": dfs["reactor"].copy(),
        "__builtins__": {}
    }
    try:
        with open("utils/flowrate.py", "r") as f:
            code = f.read()
        exec(code, namespace)
        result = namespace['generated_flowrate'](dfs["lhs"], dfs["pump"], dfs["reactor"])
        return result
    except Exception as e:
        st.error(f"Execution Error: {str(e)}")
        return None

# ---------------------------------------
# Main App: Chat-like Single Page UI
# ---------------------------------------
def main():
    st.set_page_config(page_title="Automated Flowrate & Optimization", layout="wide")
    st.title("Automated Flowrate & Optimization via Gemini")
    
    # Initialize session_state variables if not set
    if "query_input" not in st.session_state:
        st.session_state.query_input = ""
    if "dfs" not in st.session_state:
        st.session_state.dfs = {}
    if "inputs" not in st.session_state:
        st.session_state.inputs = {}

    # --- Chat Input Row ---
    st.markdown("### Your Query:")
    st.session_state.query_input = st.text_area("Type your flow calculation query here...", value=st.session_state.query_input, height=100)
    
    col1, col2, col3 = st.columns([1, 1, 1])
    with col1:
        uploaded_file = st.file_uploader("ðŸ“¤ Upload Excel File", type=["xlsx"], key="excel_upload")
    with col2:
        deepthink = st.checkbox("Deepthink", value=False)
    with col3:
        send_button = st.button("Send")
    
    # --- Prompt Template Buttons ---
    st.markdown("#### Prompt Templates")
    temp_cols = st.columns(len(PROMPT_TEMPLATES))
    for idx, (title, text) in enumerate(PROMPT_TEMPLATES.items()):
        if temp_cols[idx].button(title):
            st.session_state.query_input = text

    # --- Process Excel File Upload and Show Data/Inputs ---
    if uploaded_file:
        try:
            st.session_state.dfs = {
                "lhs": pd.read_excel(uploaded_file, sheet_name="LHS"),
                "objectives": pd.read_excel(uploaded_file, sheet_name="Objectives"),
                "pump": pd.read_excel(uploaded_file, sheet_name="Pump Details"),
                "reactor": pd.read_excel(uploaded_file, sheet_name="Reactor Details")
            }
            st.success("Excel file loaded successfully!")
            with st.expander("Review & Edit Excel Data and Input Parameters", expanded=True):
                st.markdown("#### Excel Data Editing")
                st.session_state.dfs["lhs"] = st.data_editor(st.session_state.dfs["lhs"], key="lhs_editor")
                st.session_state.dfs["objectives"] = st.data_editor(st.session_state.dfs["objectives"], key="objectives_editor")
                st.session_state.dfs["pump"] = st.data_editor(st.session_state.dfs["pump"], key="pump_editor")
                st.session_state.dfs["reactor"] = st.data_editor(st.session_state.dfs["reactor"], key="reactor_editor")
                
                st.markdown("#### Input Parameters")
                colA, colB, colC = st.columns(3)
                with colA:
                    nexp = st.number_input("Number of LHS Experiments", min_value=1, value=10, step=1)
                with colB:
                    nobj = st.number_input("Number of Objectives", min_value=1, value=2, step=1)
                with colC:
                    nsor = st.number_input("Number of SOR Iterations", min_value=1, value=3, step=1)
                
                colP1, colP2 = st.columns(2)
                with colP1:
                    npump = st.selectbox("Number of Pumps", options=[3, 4])
                with colP2:
                    rscheme = st.selectbox("Reaction Scheme Identifier", options=[1, 2])
                
                st.markdown("#### HPLC Parameters")
                colH1, colH2 = st.columns(2)
                with colH1:
                    YminRT = st.number_input("Min RT for Purity (Yield)", value=2.0, format="%.2f")
                    YmaxRT = st.number_input("Max RT for Purity (Yield)", value=2.35, format="%.2f")
                    n_imp = st.number_input("Number of Impurities", min_value=0, value=1)
                    IminRT_list = []
                    ImaxRT_list = []
                    if n_imp > 0:
                        for i in range(int(n_imp)):
                            Imin = st.number_input(f"Min RT for Impurity {i+1}", value=1.3, format="%.2f", key=f"Imin_{i}")
                            Imax = st.number_input(f"Max RT for Impurity {i+1}", value=1.98, format="%.2f", key=f"Imax_{i}")
                            IminRT_list.append(Imin)
                            ImaxRT_list.append(Imax)
                with colH2:
                    minRTISO = st.number_input("Min RT for Standard", value=3.9, format="%.2f")
                    maxRTISO = st.number_input("Max RT for Standard", value=4.2, format="%.2f")
                    hplc_folder = st.text_input("Enter HPLC folder path", value="")
                
                st.session_state.inputs = {
                    "nexp": nexp,
                    "nobj": nobj,
                    "nsor": nsor,
                    "npump": npump,
                    "rscheme": rscheme,
                    "YminRT": YminRT,
                    "YmaxRT": YmaxRT,
                    "IminRT_list": IminRT_list,
                    "ImaxRT_list": ImaxRT_list,
                    "minRTISO": minRTISO,
                    "maxRTISO": maxRTISO,
                    "hplc_folder": hplc_folder
                }
        except Exception as e:
            st.error(f"Error processing Excel file: {str(e)}")
    
    # --- When the Send button is clicked ---
    if send_button and st.session_state.query_input and st.session_state.dfs:
        with st.spinner("Generating flow rate calculation code via Gemini..."):
            try:
                code = generate_flow_code(st.session_state.query_input, deepthink, st.session_state.dfs["pump"], st.session_state.dfs["reactor"])
                if validate_generated_code(code):
                    inject_generated_code(code)
                    st.success("Flowrate code generated and injected successfully!")
                    st.code(code, language="python")
                else:
                    st.error("Generated code structure is invalid.")
                    st.stop()
            except Exception as e:
                st.error(f"Error generating code: {str(e)}")
                st.stop()
            
            flow_results = safe_execute(st.session_state.dfs)
            if flow_results is None:
                st.error("Flowrate calculation failed.")
                st.stop()
            st.success("Flow rates calculated successfully!")
            st.dataframe(flow_results.head())
        
        # Continue with original workflow
        st.info("Initializing domain and performing LHS design...")
        domain = utils.domain.create_domain_X(st.session_state.dfs["lhs"])
        domain = utils.domain.create_domain_y(domain, st.session_state.dfs["objectives"])
        lhs_exp = utils.lhs.LHSDesign(st.session_state.inputs["nexp"], domain, st.session_state.inputs["nobj"])
        save_path = os.path.join(tempfile.gettempdir(), "SOR_result.xlsx")
        lhs_exp.to_excel(save_path)
        st.success(f"LHS results saved at {save_path}")
        
        st.info("Calculating pump flowrates...")
        if st.session_state.inputs["npump"] == 3 and st.session_state.inputs["rscheme"] == 1:
            lhs_pump = utils.flowrate.pump3_flow_rate1(lhs_exp, st.session_state.dfs["pump"], st.session_state.dfs["reactor"])
        elif st.session_state.inputs["npump"] == 3 and st.session_state.inputs["rscheme"] == 2:
            lhs_pump = utils.flowrate.pump3_flow_rate2(lhs_exp, st.session_state.dfs["pump"], st.session_state.dfs["reactor"])
        elif st.session_state.inputs["npump"] == 4 and st.session_state.inputs["rscheme"] == 1:
            lhs_pump = utils.flowrate.pump4_flow_rate1(lhs_exp, st.session_state.dfs["pump"], st.session_state.dfs["reactor"])
        elif st.session_state.inputs["npump"] == 4 and st.session_state.inputs["rscheme"] == 2:
            lhs_pump = utils.flowrate.pump4_flow_rate2(lhs_exp, st.session_state.dfs["pump"], st.session_state.dfs["reactor"])
        else:
            st.error("Invalid pump configuration.")
            st.stop()
        lhs_pump.to_excel(save_path)
        st.success("Pump flowrates calculated and saved!")
        
        # HPLC Data Reading
        if st.session_state.inputs["hplc_folder"]:
            st.info("Reading HPLC data from folder...")
            monitor_generator = utils.hplcread.monitor_folder_creation1_csv(
                lhs_pump,
                st.session_state.inputs["hplc_folder"],
                st.session_state.inputs["nobj"],
                st.session_state.inputs["YminRT"],
                st.session_state.inputs["YmaxRT"],
                st.session_state.inputs["IminRT_list"],
                st.session_state.inputs["ImaxRT_list"],
                st.session_state.inputs["minRTISO"],
                st.session_state.inputs["maxRTISO"]
            )
            i = 1
            while i <= st.session_state.inputs["nexp"]:
                try:
                    result = next(monitor_generator)
                    if result is not None:
                        result.to_excel(save_path)
                        st.write(f"HPLC results read for experiment {i}")
                        i += 1
                except StopIteration:
                    st.warning("HPLC data generator stopped early.")
                    break
            st.success("HPLC data read and saved!")
        else:
            st.warning("No HPLC folder provided, skipping HPLC data read.")
        
        # Optimization Step (SOR)
        st.info("Running optimization (SOR)...")
        sor_in = flow_results[flow_results.columns.drop(list(flow_results.filter(regex='Flow rate')))]
        if "Reaction time" in sor_in.columns:
            sor_in = sor_in.drop(columns={"Reaction time"})
        sor_in, opt_result = utils.optimization.run_optimization(
            domain,
            sor_in,
            st.session_state.inputs["nobj"],
            st.session_state.inputs["npump"],
            st.session_state.inputs["rscheme"],
            lhs_exp,
            st.session_state.dfs["pump"],
            st.session_state.dfs["reactor"]
        )
        combined_results = sor_in.copy()
        st.dataframe(sor_in)
        for i in range(1, st.session_state.inputs["nsor"]):
            st.info(f"Optimization iteration {i+1} of {st.session_state.inputs['nsor']}")
            opt_result.to_excel(save_path)
            if st.session_state.inputs["hplc_folder"]:
                monitor_generator1 = utils.hplcread.monitor_folder_creation1_csv(
                    sor_in,
                    st.session_state.inputs["hplc_folder"],
                    st.session_state.inputs["nobj"],
                    st.session_state.inputs["YminRT"],
                    st.session_state.inputs["YmaxRT"],
                    st.session_state.inputs["IminRT_list"],
                    st.session_state.inputs["ImaxRT_list"],
                    st.session_state.inputs["minRTISO"],
                    st.session_state.inputs["maxRTISO"],
                    use_dataframe_last_idx=True
                )
                try:
                    sor_in = next(monitor_generator1)
                except StopIteration:
                    st.warning("HPLC data generator for optimization stopped early.")
                    break
            sor_in, opt_result = utils.optimization.run_optimization(
                domain,
                sor_in,
                st.session_state.inputs["nobj"],
                st.session_state.inputs["npump"],
                st.session_state.inputs["rscheme"],
                lhs_exp,
                st.session_state.dfs["pump"],
                st.session_state.dfs["reactor"]
            )
            combined_results = pd.concat([combined_results, sor_in])
            st.dataframe(sor_in)
        st.success("Optimization Complete!")
        st.balloons()
        st.info(f"Final results saved at {save_path}")

if __name__ == "__main__":
    with warnings.catch_warnings():
        warnings.simplefilter("ignore")
    main()
