import streamlit as st
import pandas as pd
import google.auth
from vertexai.preview.generative_models import GenerativeModel, HarmCategory, HarmBlockThreshold, SafetySetting
import utils.domain
import utils.lhs
import ast
import re

# Configure Gemini
def configure_gemini():
    os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "your-service-account.json"
    credentials, project_id = google.auth.default()
    return GenerativeModel("gemini-2.0-flash-thinking-exp-01-21")

# Safety settings
safety_config = [
    SafetySetting(
        category=HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
        threshold=HarmBlockThreshold.BLOCK_NONE,
    )
]

def parse_excel(uploaded_file):
    """Parse uploaded Excel file into DataFrames"""
    dfs = {
        'lhs': pd.read_excel(uploaded_file, sheet_name="LHS"),
        'objectives': pd.read_excel(uploaded_file, sheet_name="Objectives"),
        'pump': pd.read_excel(uploaded_file, sheet_name="Pump Details"),
        'reactor': pd.read_excel(uploaded_file, sheet_name="Reactor Details", header=None)
    }
    return dfs

def generate_flowrate_prompt(df_pump, df_reactor, user_input):
    """Generate structured prompt for Gemini"""
    pump_details = "\n".join([f"Pump {i+1}: {row['Solvent Name']} ({row['Concentration of reagent (g/ml)']} g/ml, MW: {row['Molecular weight (g/mol)']})" 
                            for i, row in df_pump.iterrows()])
    
    prompt = f"""You are a chemical engineering expert. Analyze this pump setup:
    {pump_details}
    Reactor Volume: {df_reactor[1][0]} mL
    User Description: "{user_input}"
    
    Output Python dictionary with:
    1. "pump_count" - number of pumps needed
    2. "reaction_scheme" - numerical identifier
    3. "formulas" - dictionary with flowrate formulas for each pump using variables from LHS
    4. "reaction_time" - reaction time formula
    
    Use these variables from LHS:
    - Equivalence1, Equivalence2, Equivalence3
    - ResidencetimeT1, ResidencetimeT2
    - ReactionTemperature1, ReactionTemperature2
    
    Example output:
    {{"pump_count": 3, "reaction_scheme": 1, 
    "formulas": {{"Pump 1": "(reactor_vol / ResidencetimeT1) * (...)", ...}},
    "reaction_time": "ResidencetimeT1 * steady_state_factor"}}
    """
    return prompt

def calculate_flowrates(lhs_df, formulas, reactor_df, pump_df):
    """Calculate flow rates using generated formulas"""
    results = lhs_df.copy()
    reactor_vol = reactor_df[1][0]
    steady_state = reactor_df[3][0]
    
    # Calculate reaction time
    results['Reaction time'] = eval(formulas['reaction_time'], {}, {
        'ResidencetimeT1': results['ResidencetimeT1'],
        'steady_state_factor': steady_state
    })
    
    # Calculate pump flow rates
    for pump, formula in formulas['formulas'].items():
        results[f'Flow rate of {pump}'] = eval(formula, {}, {
            'reactor_vol': reactor_vol,
            'ResidencetimeT1': results['ResidencetimeT1'],
            'Equivalence1': results['Equivalence1'],
            'Equivalence2': results['Equivalence2'],
            'Equivalence3': results['Equivalence3'],
            'C': pump_df['Concentration of reagent (g/ml)'],
            'MW': pump_df['Molecular weight (g/mol)']
        })
    
    return results

def main():
    st.title("SOR Flow Rate Calculator (Phase 1)")
    st.subheader("Gemini-Powered Flow Rate Calculation")
    
    # File Upload
    uploaded_file = st.file_uploader("Upload Master Excel File", type=["xlsx"])
    if not uploaded_file:
        return
    
    # Parse Excel
    dfs = parse_excel(uploaded_file)
    
    # LHS Configuration
    n_exp = st.number_input("Number of LHS Experiments", min_value=5, max_value=100, value=7)
    domain = utils.domain.create_domain_X(dfs['lhs'])
    domain = utils.domain.create_domain_y(domain, dfs['objectives'])
    
    # Generate LHS
    lhs_design = utils.lhs.LHSDesign(n_exp, domain, dfs['objectives'].shape[1]-1)
    lhs_df = lhs_design.to_dataframe()
    
    # Reaction Scheme Input
    user_input = st.text_area("Describe your reaction scheme:", 
                             placeholder="e.g. '3 pumps with KSM, R1 and R2 reacting in series with quenching...'")
    
    if st.button("Calculate Flow Rates"):
        # Generate and execute Gemini prompt
        model = configure_gemini()
        prompt = generate_flowrate_prompt(dfs['pump'], dfs['reactor'], user_input)
        
        with st.spinner("Analyzing with Gemini..."):
            response = model.generate_content(
                [prompt],
                safety_settings=safety_config
            )
            
        try:
            # Parse Gemini response
            clean_response = re.sub(r'[\s\S]*?({[\s\S]*?})[\s\S]*', r'\1', response.text)
            config = ast.literal_eval(clean_response)
            
            # Calculate flow rates
            with st.spinner("Calculating flow rates..."):
                results_df = calculate_flowrates(lhs_df, config['formulas'], 
                                                dfs['reactor'], dfs['pump'])
            
            # Display results
            st.success("Calculation Complete!")
            st.dataframe(results_df)
            
            # Export to Excel
            output = pd.ExcelWriter('SOR_Result.xlsx')
            results_df.to_excel(output, sheet_name='Results')
            st.download_button("Download Results", output, 
                               file_name="SOR_Results.xlsx",
                               mime="application/vnd.ms-excel")
            
        except Exception as e:
            st.error(f"Error processing Gemini response: {str(e)}")
            st.text_area("Gemini Raw Response", response.text, height=200)

if __name__ == "__main__":
    main()
