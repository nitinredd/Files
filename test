// src/App.jsx
import React, { useEffect, useState, useRef } from "react";
import { motion } from "framer-motion";

import ChatWindow from "./components/ChatWindow";
import ProductTabs from "./components/ProductTabs";
import ProductDetailModal from "./components/ProductDetailModal";
import SidebarHistory from "./components/SidebarHistory";
import ReactionTiles from "./components/ReactionTiles";
import PromptGallery from "./components/PromptGallery";
import UploadPanel from "./components/UploadPanel"; // keep if you still want it; we won't show header upload

import {
  fetchReactions,
  fetchProducts,
  fetchProductMeta,
  fetchProductDetails,
  fetchSchemeImageUrl,
  fetchPrompts,
  queryWithCitations,
  searchProducts,
} from "./api";

import Navbar from "./Navbar/Navbar";
import Footer from "./Footer/Footer";

import chem_logo from "../assets/Chemhub_Logo_Colored.png";

export default function App() {
  // Global app state
  const [reactions, setReactions] = useState([]);
  const [prompts, setPrompts] = useState([]);

  const [products, setProducts] = useState([]);
  const [selectedReaction, setSelectedReaction] = useState(null);

  const [selectedProduct, setSelectedProduct] = useState(null); // meta
  const [productDetails, setProductDetails] = useState(null);
  const [productListVisible, setProductListVisible] = useState(false);

  const [detailModalOpen, setDetailModalOpen] = useState(false);

  const [messages, setMessages] = useState([]); // chat messages
  const [history, setHistory] = useState([]); // conversation history list

  const [loadingDetails, setLoadingDetails] = useState(false);
  const [queryLoading, setQueryLoading] = useState(false);

  const [selectedCitedDocs, setSelectedCitedDocs] = useState([]);

  const [selectedSchemeUrl, setSelectedSchemeUrl] = useState(null);

  // Prompt gallery UI
  const [promptGalleryOpen, setPromptGalleryOpen] = useState(false);

  // Expanded full-page view (when user clicks a reaction or wants larger workspace)
  const [expandedViewOpen, setExpandedViewOpen] = useState(false);

  // Slider state
  const [slideIndex, setSlideIndex] = useState(0);
  const sliderIntervalRef = useRef(null);
  const SLIDE_COUNT = 5;

  const chatWindowRef = useRef(null);

  // Init reactions/prompts + onboarding assistant message
  useEffect(() => {
    fetchReactions()
      .then((r) => setReactions(r || []))
      .catch((e) => console.error("fetchReactions error:", e));

    fetchPrompts()
      .then((p) => setPrompts(p?.prompts || p || []))
      .catch((e) => console.warn("fetchPrompts failed:", e));

    // initial assistant hint
    setMessages([
      {
        role: "assistant",
        content: "Welcome — type a reaction or product name to find documents, click a reaction tile to explore, or ask a question directly.",
      },
    ]);
  }, []);

  // Slider autoplay
  useEffect(() => {
    sliderIntervalRef.current = setInterval(() => {
      setSlideIndex((s) => (s + 1) % SLIDE_COUNT);
    }, 3500);
    return () => {
      if (sliderIntervalRef.current) clearInterval(sliderIntervalRef.current);
    };
  }, []);

  // helper push
  const pushMessage = (m) => setMessages((prev) => [...prev, m]);

  // Normalize helper
  const normalize = (s) => (s || "").toString().toLowerCase().replace(/[^a-z0-9]/g, "");

  // Upload handler (passed to ChatWindow as onUploadFile). Uses fetch to avoid axios issues.
  const handleUploadFile = async (file) => {
    if (!file) return;
    const form = new FormData();
    form.append("file", file);
    // optional reaction_type can be added by user UI; default to "Miscellaneous"
    form.append("reaction_type", "Miscellaneous");
    try {
      const res = await fetch("/upload", {
        method: "POST",
        body: form,
      });
      if (!res.ok) {
        const text = await res.text();
        throw new Error(`Upload failed: ${res.status} ${text}`);
      }
      const payload = await res.json();
      // refresh products from uploads location (if your backend stores under a reaction folder)
      try {
        const prods = await fetchProducts("Miscellaneous");
        setProducts(prods || []);
        setProductListVisible(true);
      } catch (e) {
        // ignore
      }
      pushMessage({ role: "assistant", content: "Upload complete and indexed (if supported)." });
      return payload;
    } catch (err) {
      console.error("Upload error (frontend):", err);
      pushMessage({ role: "assistant", content: "Upload failed. See console for details." });
      throw err;
    }
  };

  // When a product is selected (from ProductTabs)
  const handleSelectProduct = async (productId) => {
    try {
      setLoadingDetails(true);
      const meta = await fetchProductMeta(productId);
      setSelectedProduct(meta);
      setProductDetails(null);
      setSelectedSchemeUrl(null);
      setDetailModalOpen(true);

      // preload scheme image url for quicker preview (API may return 404 if not found)
      try {
        const schemeUrl = await fetchSchemeImageUrl(productId);
        setSelectedSchemeUrl(schemeUrl);
      } catch (e) {
        // ignore
      }

      // canonical extraction call
      try {
        const res = await fetchProductDetails(productId); // extraction default
        const payload = (res && res.data) ? res.data : res;
        setProductDetails(payload);
        setHistory((h) => [
          { title: meta.name, content: payload.procedure ? payload.procedure.slice(0, 120) : "", productId: meta.id },
          ...h,
        ]);
      } catch (e) {
        console.error("fetchProductDetails (for select) error:", e);
        pushMessage({ role: "assistant", content: "Failed to extract details for selected product." });
      }
    } catch (err) {
      console.error("handleSelectProduct error:", err);
      pushMessage({ role: "assistant", content: "Failed to load product details." });
    } finally {
      setLoadingDetails(false);
    }
  };

  // Toggle citation
  const handleToggleCite = (product) => {
    const exists = selectedCitedDocs.find((p) => p.id === product.id);
    if (exists) {
      setSelectedCitedDocs((prev) => prev.filter((p) => p.id !== product.id));
      pushMessage({ role: "assistant", content: `Removed citation: ${product.name}` });
    } else {
      setSelectedCitedDocs((prev) => [{ id: product.id, name: product.name, reaction_type: product.reaction_type }, ...prev]);
      pushMessage({ role: "assistant", content: `Added citation: ${product.name}` });
    }
  };

  const removeCitation = (id) => {
    const found = selectedCitedDocs.find((d) => d.id === id);
    setSelectedCitedDocs((prev) => prev.filter((d) => d.id !== id));
    if (found) pushMessage({ role: "assistant", content: `Removed citation: ${found.name}` });
  };

  // prompt pick -> send
  const handlePromptPick = async (promptText) => {
    setPromptGalleryOpen(false);
    await handleUserSend(promptText);
  };

  // When user clicks a reaction tile: fetch products then open expanded view
  const handleReactionClick = async (reactionName) => {
    setSelectedReaction(reactionName);
    try {
      const prods = await fetchProducts(reactionName);
      setProducts(prods || []);
      setProductListVisible(true);
      // open expanded workspace so products may be shown beautifully
      setExpandedViewOpen(true);
      pushMessage({ role: "assistant", content: `Found ${prods.length} products for ${reactionName}` });
    } catch (e) {
      console.error(e);
      pushMessage({ role: "assistant", content: "Error loading products for that reaction." });
    }
  };

  // Main user-send handler (handles citation queries, product detection and fallback to LLM)
  const handleUserSend = async (text) => {
    pushMessage({ role: "user", content: text });

    // If text exactly matches a reaction name - list products (and open expanded)
    const norm = normalize(text);
    const reactionMatch = reactions.find((r) => normalize(r) === norm || normalize(r) === normalize(text.replace(/\s+/g, "_")));
    if (reactionMatch) {
      setSelectedReaction(reactionMatch);
      try {
        const prods = await fetchProducts(reactionMatch);
        setProducts(prods || []);
        setProductListVisible(true);
        setExpandedViewOpen(true);
        pushMessage({ role: "assistant", content: `Found ${prods.length} product${prods.length === 1 ? "" : "s"} — expanded view opened.` });
      } catch (e) {
        console.error(e);
        pushMessage({ role: "assistant", content: "Error loading products for that reaction." });
      }
      return;
    }

    // If user has selected citations -> query across those docs
    if (selectedCitedDocs && selectedCitedDocs.length > 0) {
      setQueryLoading(true);
      pushMessage({ role: "assistant", content: "Searching selected documents...", loading: true });
      try {
        const ids = selectedCitedDocs.map((d) => d.id);
        const res = await queryWithCitations(ids, text);
        const payload = (res && res.data) ? res.data : res;
        // remove loading placeholder
        setMessages((prev) => {
          const idx = prev.map((m) => m.loading).lastIndexOf(true);
          if (idx >= 0) {
            const copy = [...prev];
            copy.splice(idx, 1);
            return copy;
          }
          return prev;
        });
        const answer = payload?.answer || payload?.response || "No relevant answer found.";
        const sources = (payload?.sources || []).map((s) => ({ product_id: s.product_id, product_name: s.product_name }));
        pushMessage({ role: "assistant", content: answer, sources });
      } catch (err) {
        console.error("queryWithCitations error:", err);
        pushMessage({ role: "assistant", content: "Error querying selected documents." });
      } finally {
        setQueryLoading(false);
      }
      return;
    }

    // If no selected product, let backend detect product name inside question or respond generatively
    if (!selectedProduct) {
      setQueryLoading(true);
      pushMessage({ role: "assistant", content: "Searching documents...", loading: true });
      try {
        const res = await fetchProductDetails(undefined, text);
        const payload = (res && res.data) ? res.data : res;
        // remove loading placeholder
        setMessages((prev) => {
          const idx = prev.map((m) => m.loading).lastIndexOf(true);
          if (idx >= 0) {
            const copy = [...prev];
            copy.splice(idx, 1);
            return copy;
          }
          return prev;
        });

        if (payload && payload.api_name) {
          // structured extraction returned
          let summary = "";
          if (payload.api_name) summary += `API: ${payload.api_name}\n\n`;
          if (payload.reaction_chemistry) summary += `Reaction: ${payload.reaction_chemistry}\n\n`;
          if (payload.yield) summary += `Yield: ${payload.yield}\n\n`;
          if (payload.procedure) summary += `Procedure (excerpt):\n${(payload.procedure || "").slice(0, 400)}\n\n`;
          pushMessage({ role: "assistant", content: summary, tables: payload.tables || [] });
        } else if (payload && (payload.answer || payload.response)) {
          const answer = payload.answer || payload.response || "No answer.";
          const sources = (payload.sources || []).map((s) => ({ product_id: s.product_id, product_name: s.product_name }));
          pushMessage({ role: "assistant", content: answer, sources });
        } else {
          pushMessage({ role: "assistant", content: "No structured data found. Try selecting a product or ask for specific extraction." });
        }
      } catch (err) {
        console.error("fetchProductDetails error (no product):", err);
        pushMessage({ role: "assistant", content: "Error querying documents." });
      } finally {
        setQueryLoading(false);
      }
      return;
    }

    // If a product is selected, query it directly
    setQueryLoading(true);
    pushMessage({ role: "assistant", content: "Fetching answer from selected document...", loading: true });
    try {
      const res = await fetchProductDetails(selectedProduct.id, text);
      const payload = (res && res.data) ? res.data : res;

      // remove loading placeholder
      setMessages((prev) => {
        const idx = prev.map((m) => m.loading).lastIndexOf(true);
        if (idx >= 0) {
          const copy = [...prev];
          copy.splice(idx, 1);
          return copy;
        }
        return prev;
      });

      if (payload && payload.api_name) {
        let summary = "";
        if (payload.api_name) summary += `API: ${payload.api_name}\n\n`;
        if (payload.reaction_chemistry) summary += `Reaction: ${payload.reaction_chemistry}\n\n`;
        if (payload.yield) summary += `Yield: ${payload.yield}\n\n`;
        if (payload.procedure) summary += `Procedure (excerpt):\n${(payload.procedure || "").slice(0, 400)}\n\n`;
        pushMessage({ role: "assistant", content: summary, tables: payload.tables || [] });
        setProductDetails(payload);
        setDetailModalOpen(true);
        setHistory((h) => [{ title: selectedProduct.name, content: payload.procedure ? payload.procedure.slice(0, 120) : "", productId: selectedProduct.id }, ...h]);
      } else if (payload && (payload.answer || payload.response)) {
        const answer = payload.answer || payload.response || "No answer.";
        const sources = (payload.sources || []).map((s) => ({ product_id: s.product_id, product_name: s.product_name }));
        pushMessage({ role: "assistant", content: answer, sources });
      } else {
        pushMessage({ role: "assistant", content: "No answer found from document." });
      }
    } catch (err) {
      console.error("fetchProductDetails (selected) error:", err);
      pushMessage({ role: "assistant", content: "Error querying backend." });
    } finally {
      setQueryLoading(false);
    }
  };

  // Close expanded view
  const closeExpandedView = () => setExpandedViewOpen(false);

  // UI: slides (first contains logo + welcome)
  const slides = [
    {
      id: 0,
      content: (
        <div className="flex flex-col items-center justify-center h-full gap-2">
          <div className="text-lg font-semibold">Welcome to</div>
          <img src={chem_logo} alt="chemhub-logo" className="h-20 w-auto" />
        </div>
      ),
      bg: "bg-gradient-to-r from-indigo-500 to-purple-500",
    },
    { id: 1, content: null, bg: "bg-gradient-to-r from-pink-400 via-red-300 to-yellow-300" },
    { id: 2, content: null, bg: "bg-gradient-to-r from-emerald-400 to-teal-500" },
    { id: 3, content: null, bg: "bg-gradient-to-r from-sky-400 to-indigo-400" },
    { id: 4, content: null, bg: "bg-gradient-to-r from-rose-300 to-fuchsia-500" },
  ];

  // Small helper: when reaction/prods loaded open expanded view
  const openExpandedFor = async (reactionName) => {
    try {
      const prods = await fetchProducts(reactionName);
      setProducts(prods || []);
      setProductListVisible(true);
      setExpandedViewOpen(true);
    } catch (e) {
      console.error("openExpandedFor error:", e);
    }
  };

  return (
    <>
      <Navbar />

      <div className="min-h-screen bg-gradient-to-b from-bg to-white flex justify-center">
        <div className="w-full max-w-7xl py-8 px-4">

          {/* Top slider */}
          <div className="mb-6">
            <div className="relative rounded-2xl overflow-hidden">
              <div className="grid grid-cols-5 gap-4">
                {slides.map((s, i) => {
                  // show single large sliding row - we will show only current slide visually centered
                  const isActive = i === slideIndex;
                  return (
                    <div
                      key={s.id}
                      className={`col-span-1 h-36 rounded-2xl flex items-center justify-center transform transition-all duration-700 ${isActive ? "scale-100 shadow-xl z-20" : "scale-95 opacity-60"} ${s.bg}`}
                      aria-hidden={!isActive}
                    >
                      <div className="text-white text-center p-4 w-full">
                        {s.content ? s.content : <div className="h-full w-full" />}
                      </div>
                    </div>
                  );
                })}
              </div>
            </div>
          </div>

          {/* Reaction tiles row */}
          <div className="mb-6">
            <ReactionTiles reactions={reactions} onSelect={(r) => { handleReactionClick(r); }} />
          </div>

          {/* Main layout */}
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            {/* Chat + prompt gallery (centered single column) */}
            <div className="lg:col-span-2 flex flex-col items-center">
              <ChatWindow
                ref={chatWindowRef}
                messages={messages}
                onSend={handleUserSend}
                centeredWidth="w-full max-w-3xl"
                loading={queryLoading || loadingDetails}
                selectedCitedDocs={selectedCitedDocs}
                removeCitation={removeCitation}
                onUploadFile={handleUploadFile}
                openPromptGallery={() => setPromptGalleryOpen(true)}
              />

              {/* Prompt gallery button/modal handled centrally */}
              {promptGalleryOpen && (
                <div className="fixed inset-0 z-50 flex items-center justify-center">
                  <div className="absolute inset-0 bg-black/40" onClick={() => setPromptGalleryOpen(false)}></div>
                  <div className="relative w-full max-w-3xl bg-white rounded-2xl p-6 shadow-2xl">
                    <div className="flex items-center justify-between mb-4">
                      <h3 className="text-lg font-semibold">Prompt Gallery</h3>
                      <button className="p-2 rounded-md" onClick={() => setPromptGalleryOpen(false)}>Close</button>
                    </div>
                    <PromptGallery prompts={prompts} onPick={handlePromptPick} />
                  </div>
                </div>
              )}
            </div>

            {/* Right column: only history (product cards moved to expanded view) */}
            <div className="lg:col-span-1">
              <div className="mb-4">
                <SidebarHistory history={history} onSelect={(h) => { if (h && h.productId) handleSelectProduct(h.productId); }} />
              </div>
            </div>
          </div>

          {/* Expanded full-page overlay (shows large chat + product cards) */}
          {expandedViewOpen && (
            <div className="fixed inset-0 z-50 bg-white/95 backdrop-blur-sm overflow-auto">
              <div className="max-w-7xl mx-auto py-8 px-6">
                <div className="flex items-start justify-between mb-4">
                  <div className="flex items-center gap-3">
                    <button className="px-3 py-2 rounded-lg bg-gray-100" onClick={() => setExpandedViewOpen(false)}>Close</button>
                    <h2 className="text-xl font-semibold">Expanded Workspace — {selectedReaction || "Explore Products"}</h2>
                  </div>
                  <div>
                    <button className="px-3 py-2 rounded-lg bg-indigo-600 text-white" onClick={() => setExpandedViewOpen(false)}>Done</button>
                  </div>
                </div>

                <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                  {/* large chat on left (2/3) */}
                  <div className="lg:col-span-2">
                    <div className="bg-white rounded-2xl shadow p-4">
                      <ChatWindow
                        messages={messages}
                        onSend={handleUserSend}
                        centeredWidth="w-full"
                        loading={queryLoading || loadingDetails}
                        selectedCitedDocs={selectedCitedDocs}
                        removeCitation={removeCitation}
                        onUploadFile={handleUploadFile}
                        openPromptGallery={() => setPromptGalleryOpen(true)}
                      />
                    </div>
                  </div>

                  {/* products / product cards on right */}
                  <div className="lg:col-span-1">
                    <div className="bg-white rounded-2xl shadow p-4">
                      <h3 className="text-lg font-semibold mb-3">Matched Products</h3>
                      {productListVisible && products && products.length > 0 ? (
                        <ProductTabs
                          products={products}
                          onSelect={(pid) => { handleSelectProduct(pid); }}
                          onContext={(p) => handleToggleCite(p)}
                          citedIds={new Set(selectedCitedDocs.map((d) => d.id))}
                        />
                      ) : (
                        <div className="text-gray-500">No products loaded — pick a reaction tile or type a product name.</div>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* Product detail modal */}
          <ProductDetailModal
            open={detailModalOpen}
            onClose={() => setDetailModalOpen(false)}
            meta={selectedProduct}
            details={productDetails}
            loading={loadingDetails}
          />

        </div>
      </div>

      <Footer />
    </>
  );
}
