# utils/optimization.py
from summit.strategies import TSEMO, SNOBFIT
import pandas as pd
from summit.utils.dataset import DataSet
from .flowrate import generated_flowrate  # Add this import

def multi_tsemo(domain, lhs_exp):
    strat_TSEMO = TSEMO(domain, random_rate=0.00, n_spectral_points=4000)
    initial = DataSet.from_df(lhs_exp)
    return strat_TSEMO.suggest_experiments(1, initial, use_spectral_sample=True, pop_size=100, iterations=100)

def single_snobfit(domain, lhs_exp):
    strat_SNOBFIT = SNOBFIT(domain)
    initial = DataSet.from_df(lhs_exp)
    return strat_SNOBFIT.suggest_experiments(1, initial)

def run_optimization(domain, sor_in, nobj, df_pump, df_reactor):  # Removed pump scheme params
    if nobj > 1:
        sor_out = multi_tsemo(domain, sor_in)
    else:
        sor_out = single_snobfit(domain, sor_in)
    
    sor_out.columns = [col[0] for col in sor_out.columns]
    sor_out = sor_out[sor_in.columns.tolist()]
    sor_in = pd.concat([sor_in, sor_out], axis=0).reset_index(drop=True)
    
    # Dynamic flow rate call
    result = generated_flowrate(sor_in, df_pump, df_reactor)
    
    result = pd.concat([result, sor_in.iloc[:,-nobj:]], axis=1).reset_index(drop=True)
    return sor_in, result
################################################
# utils/flowrate.py
import pandas as pd

def generated_flowrate(df_lhs, df_pump, df_reactor):
    """Dynamically generated function placeholder"""
    # This will be overwritten by Gemini-generated code
    return df_lhs.copy()
#############################
# main.py
import streamlit as st
import pandas as pd
import vertexai
import google.auth
from vertexai.preview.generative_models import GenerativeModel, HarmCategory, HarmBlockThreshold, SafetySetting
import ast
import os
import tempfile
from summit.utils.dataset import DataSet
import utils.optimization, utils.domain, utils.lhs, utils.hplcread

# Gemini Configuration
def configure_gemini():
    os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "D:/datascience-254609-genai.json"
    credentials, project_id = google.auth.default()
    
    safety_config = [
        SafetySetting(category=hc, threshold=HarmBlockThreshold.BLOCK_NONE)
        for hc in HarmCategory
    ]
    
    return {
        "flash_thinking": GenerativeModel("gemini-2.0-flash-thinking-exp-01-21"),
        "pro_model": GenerativeModel("gemini-2.0-pro-exp-02-05"),
        "safety": safety_config
    }

gemini_config = configure_gemini()

# Predefined Prompt Templates
PROMPT_TEMPLATES = {
    "3-Pump Basic": """I need flow rate calculations for 3 pumps where:
- Reaction time = ResidencetimeT1 √ó Reactor Volume (from Reactor Details)
- Flow rates determined by molar ratios of:
  1. Primary reactant (first in Pump Details)
  2. Reagent 1 (second in Pump Details) using Equivalence1
  3. Reagent 2 (third in Pump Details) using Equivalence2
- Molarity = (Concentration / Molecular Weight) √ó 1000
- Total flow = Reactor Volume / Residence Time
- Pump flows = (Individual molar ratio / Total molar sum) √ó Total flow""",

    "4-Pump Advanced": """Calculate flow rates for 4 pumps with:
- Reaction time = (ResidenceTimeT1 + ResidenceTimeT2) √ó Reactor Volume
- Pump 1: Base reactant (first in Pump Details) 
- Pumps 2-3: Sequential reagents using Equivalence1-2
- Pump 4: Quench flow at 1.5√ó total of first 3 pumps
- Account for temperature compensation from LHS experiments""",

    "Custom Setup": """Create custom flow calculations where:
- Reaction time depends on both ResidenceTime and CatalystLoading
- Flow rates must maintain stoichiometric ratios from LHS
- Include safety margin of 15% on all pump flows
- Handle unit conversions between ml/min and L/hour"""
}

def generate_flow_code(prompt, use_deepthink, pump_df, reactor_df):
    model = gemini_config["flash_thinking"] if use_deepthink else gemini_config["pro_model"]
    
    full_prompt = f"""
    Generate Python code for pandas DataFrame operations that:
    1. Takes df_lhs, df_pump, df_reactor as inputs
    2. Returns DataFrame with calculated flow rates and reaction time
    3. Uses these columns from Pump Details: {list(pump_df.columns)}
    4. Uses these columns from Reactor Details: {list(reactor_df.columns)}
    5. Follows chemical engineering best practices
    6. Includes error checking for negative values
    
    User Requirements:
    {prompt}
    
    Return ONLY valid Python code without explanations.
    """
    
    response = model.generate_content(
        contents=full_prompt,
        safety_settings=gemini_config["safety"]
    )
    return response.text

def inject_generated_code(generated_code):
    """Dynamically updates flowrate.py"""
    with open("utils/flowrate.py", "w") as f:
        f.write("import pandas as pd\n\n")
        f.write(f"def generated_flowrate(df_lhs, df_pump, df_reactor):\n")
        for line in generated_code.split('\n'):
            f.write(f"    {line}\n")
        f.write("\n    return result\n")

def validate_generated_code(code):
    """Basic code validation"""
    required = [
        "def generated_flowrate(",
        "df_lhs",
        "df_pump",
        "df_reactor",
        "result =",
        "return"
    ]
    return all(component in code for component in required)

def safe_execute(dfs):
    """Execute generated code safely"""
    namespace = {
        "pd": pd,
        "df_lhs": dfs["lhs"].copy(),
        "df_pump": dfs["pump"].copy(),
        "df_reactor": dfs["reactor"].copy(),
        "__builtins__": {}
    }
    
    try:
        with open("utils/flowrate.py", "r") as f:
            code = f.read()
        exec(code, namespace)
        result = namespace['generated_flowrate'](
            dfs["lhs"], dfs["pump"], dfs["reactor"]
        )
        return result
    except Exception as e:
        st.error(f"Execution Error: {str(e)}")
        return None

def main():
    st.set_page_config(page_title="AutoFlow Reactor Optimizer", layout="wide")
    st.title("üî¨ AutoFlow Reactor Optimizer")
    
    # Initialize session state
    if "dfs" not in st.session_state:
        st.session_state.dfs = {}

    # File Upload Section
    with st.expander("üì§ Upload Configuration Files", expanded=True):
        uploaded_file = st.file_uploader(
            "Upload Master Excel File", 
            type=["xlsx"],
            help="Should contain LHS, Objectives, Pump Details, and Reactor Details sheets"
        )
        
        if uploaded_file:
            st.session_state.dfs = {
                "lhs": pd.read_excel(uploaded_file, sheet_name="LHS"),
                "objectives": pd.read_excel(uploaded_file, sheet_name="Objectives"),
                "pump": pd.read_excel(uploaded_file, sheet_name="Pump Details"),
                "reactor": pd.read_excel(uploaded_file, sheet_name="Reactor Details")
            }

    # Data Editing Section
    if st.session_state.dfs:
        with st.expander("‚úèÔ∏è Edit Configuration Data", expanded=True):
            tabs = st.tabs(["LHS Design", "Objectives", "Pump Details", "Reactor Details"])
            with tabs[0]:
                st.session_state.dfs["lhs"] = st.data_editor(st.session_state.dfs["lhs"])
            with tabs[1]:
                st.session_state.dfs["objectives"] = st.data_editor(st.session_state.dfs["objectives"])
            with tabs[2]:
                st.session_state.dfs["pump"] = st.data_editor(st.session_state.dfs["pump"])
            with tabs[3]:
                st.session_state.dfs["reactor"] = st.data_editor(st.session_state.dfs["reactor"])

        # Flow Calculation Setup
        st.divider()
        with st.container():
            col1, col2 = st.columns([3, 1])
            with col1:
                st.subheader("üß™ Flow Rate Configuration")
                user_prompt = st.text_area(
                    "Enter your flow calculation requirements:",
                    height=150,
                    help="Describe your pump flow calculations in natural language"
                )
                
                # Template Selection
                with st.expander("üöÄ Quick Start Templates"):
                    selected_template = st.selectbox(
                        "Choose a template",
                        list(PROMPT_TEMPLATES.keys())
                    )
                    user_prompt = st.text_area(
                        "Selected Template",
                        value=PROMPT_TEMPLATES[selected_template],
                        height=200
                    )

            with col2:
                st.subheader("‚öôÔ∏è Settings")
                use_deepthink = st.toggle(
                    "DeepThink Analysis",
                    help="Use advanced reasoning model for complex calculations"
                )
                st.session_state.nexp = st.number_input(
                    "Number of LHS Experiments",
                    min_value=5, 
                    value=10
                )
                st.session_state.nobj = st.number_input(
                    "Number of Objectives", 
                    min_value=1, 
                    max_value=3, 
                    value=2
                )

            # Generate Flow Calculations
            if st.button("‚ö° Generate Flow Calculations", use_container_width=True):
                if user_prompt:
                    with st.spinner("Generating optimal flow calculations..."):
                        try:
                            # Generate and validate code
                            code = generate_flow_code(
                                user_prompt,
                                use_deepthink,
                                st.session_state.dfs["pump"],
                                st.session_state.dfs["reactor"]
                            )
                            
                            if validate_generated_code(code):
                                inject_generated_code(code)
                                st.success("Code validated and injected successfully!")
                            else:
                                st.error("Invalid code structure generated")
                                st.stop()

                            # Execute and display results
                            with st.expander("üìÑ Generated Code", expanded=False):
                                st.code(code)
                            
                            result = safe_execute(st.session_state.dfs)
                            if result is not None:
                                st.session_state.flow_results = result
                                st.success("‚úÖ Flow rates calculated successfully!")
                                st.dataframe(result.head())

                                # Proceed to optimization
                                st.divider()
                                st.subheader("üìà Optimization Progress")
                                domain = utils.domain.create_domain_X(st.session_state.dfs["lhs"])
                                domain = utils.domain.create_domain_y(domain, st.session_state.dfs["objectives"])
                                
                                progress_bar = st.progress(0)
                                status_text = st.empty()
                                
                                for i in range(st.session_state.nobj):
                                    status_text.text(f"Running Optimization Cycle {i+1}/{st.session_state.nobj}")
                                    progress_bar.progress((i+1)/st.session_state.nobj)
                                    
                                    # Run optimization with dynamic flowrate
                                    sor_in, result = utils.optimization.run_optimization(
                                        domain,
                                        st.session_state.flow_results,
                                        st.session_state.nobj,
                                        st.session_state.dfs["pump"],
                                        st.session_state.dfs["reactor"]
                                    )
                                    
                                    # Update and display results
                                    st.session_state.flow_results = pd.concat([st.session_state.flow_results, sor_in])
                                    st.dataframe(sor_in)
                                
                                st.balloons()
                                st.success("Optimization Complete!")

                        except Exception as e:
                            st.error(f"Error in optimization process: {str(e)}")
                else:
                    st.warning("Please enter calculation requirements")

if __name__ == "__main__":
    main()
