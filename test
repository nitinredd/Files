def create_cfd_volume(cfd_sim):
    """Create the 3D volume and slice visualization of the CFD simulation."""
    grid_size = cfd_sim.grid_size
    X, Y, Z = np.mgrid[:grid_size, :grid_size, :grid_size]
    values = cfd_sim.concentration.flatten()
    
    fig = go.Figure(data=go.Volume(
        x=X.flatten(),
        y=Y.flatten(),
        z=Z.flatten(),
        value=values,
        isomin=0.1,
        isomax=0.8,
        opacity=0.2,
        surface_count=7,
        colorscale='Plasma',
        caps=dict(x_show=False, y_show=False, z_show=False),
    ))
    
    slice_pos = grid_size // 2

    # X-plane (YZ slice): x is constant.
    Y_mesh, Z_mesh = np.mgrid[:grid_size, :grid_size]
    X_const = np.full_like(Y_mesh, slice_pos)
    slice_data = cfd_sim.get_slice('x', slice_pos)
    fig.add_trace(go.Surface(
        x=X_const,
        y=Y_mesh,
        z=slice_data,
        colorscale='Viridis',
        showscale=False,
        opacity=0.8,
        name='YZ Plane'
    ))

    # Y-plane (XZ slice): y is constant.
    X_mesh, Z_mesh = np.mgrid[:grid_size, :grid_size]
    Y_const = np.full_like(X_mesh, slice_pos)
    slice_data = cfd_sim.get_slice('y', slice_pos)
    fig.add_trace(go.Surface(
        x=X_mesh,
        y=Y_const,
        z=slice_data,
        colorscale='Viridis',
        showscale=False,
        opacity=0.8,
        name='XZ Plane'
    ))

    # Z-plane (XY slice): z is constant. Here we use surfacecolor.
    X_mesh, Y_mesh = np.mgrid[:grid_size, :grid_size]
    Z_const = np.full_like(X_mesh, slice_pos)
    slice_data = cfd_sim.get_slice('z', slice_pos)
    fig.add_trace(go.Surface(
        x=X_mesh,
        y=Y_mesh,
        z=Z_const,
        surfacecolor=slice_data,
        colorscale='Viridis',
        showscale=False,
        opacity=0.8,
        name='XY Plane'
    ))
    
    fig.update_layout(
        title=f'3D Drug Diffusion CFD Simulation (Time: {cfd_sim.time_elapsed:.2f} s)',
        scene=dict(
            xaxis_title='X Position',
            yaxis_title='Y Position',
            zaxis_title='Z Position',
            camera=dict(eye=dict(x=1.8, y=1.8, z=0.8)),
            aspectratio=dict(x=1, y=1, z=1)
        ),
        height=800,
        margin=dict(l=0, r=0, b=0, t=40)
    )
    return fig

def create_flow_cone(cfd_sim):
    """Create a cone plot to visualize the local diffusion flow (i.e. gradient of concentration)."""
    grid_size = cfd_sim.grid_size
    # Calculate gradients of the concentration field
    grad_x, grad_y, grad_z = np.gradient(cfd_sim.concentration)
    
    # For clarity, subsample the grid (for example, take every 3rd point)
    step = max(grid_size // 10, 1)
    x, y, z = np.mgrid[0:grid_size:step, 0:grid_size:step, 0:grid_size:step]
    u = grad_x[::step, ::step, ::step]
    v = grad_y[::step, ::step, ::step]
    w = grad_z[::step, ::step, ::step]
    
    # Create the cone plot. The cones will point in the direction of steepest increase.
    cone = go.Cone(
        x=x.flatten(),
        y=y.flatten(),
        z=z.flatten(),
        u=u.flatten(),
        v=v.flatten(),
        w=w.flatten(),
        colorscale='Blues',
        sizemode="absolute",
        sizeref=2,
        showscale=True,
        anchor="tail",
        colorbar=dict(title="Gradient")
    )
    
    fig = go.Figure(data=[cone])
    fig.update_layout(
        title="Live Diffusion Flow (Gradient Field)",
        scene=dict(
            xaxis_title='X',
            yaxis_title='Y',
            zaxis_title='Z',
            camera=dict(eye=dict(x=1.8, y=1.8, z=0.8)),
            aspectratio=dict(x=1, y=1, z=1)
        ),
        height=800,
        margin=dict(l=0, r=0, b=0, t=40)
    )
    return fig

with st.expander("üåê 3D CFD Simulation", expanded=True):
    st.markdown("### Real-time Computational Fluid Dynamics and Live Flow Visualization")
    
    col1, col2 = st.columns(2)
    
    # Display metrics
    col1.metric("Current Time", f"{st.session_state.cfd.time_elapsed:.2f} s")
    current_rate = st.session_state.cfd.calculate_diffusion_rate()
    col1.metric("Instant Diffusion Rate", f"{current_rate:.4f} mg/s")
    total_mass = np.sum(st.session_state.cfd.concentration)
    col1.metric("Remaining Drug Mass", f"{total_mass:.4f} mg")
    
    # Update the CFD simulation if running
    if st.session_state.get('run_cfd', False):
        st.session_state.cfd.update()
    
    # Create and display the volume (CFD) visualization
    fig_volume = create_cfd_volume(st.session_state.cfd)
    col1.plotly_chart(fig_volume, use_container_width=True)
    
    # Create and display the cone plot for live flow visualization
    fig_cone = create_flow_cone(st.session_state.cfd)
    col2.plotly_chart(fig_cone, use_container_width=True)
