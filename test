src/index.css
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  @apply bg-gradient-to-br from-violet-50 to-purple-100 text-gray-800;
}

.chat-container {
  scrollbar-width: thin;
  scrollbar-color: #c084fc #f0f0f0;
}

.chat-container::-webkit-scrollbar {
  width: 6px;
}

.chat-container::-webkit-scrollbar-track {
  @apply bg-purple-50;
}

.chat-container::-webkit-scrollbar-thumb {
  @apply bg-purple-300 rounded-full;
}

.gradient-header {
  @apply bg-gradient-to-r from-violet-600 to-purple-500;
}

.product-card {
  @apply transition-all duration-300 hover:scale-[1.02] hover:shadow-lg;
}
##############################
src/tailwind.config.js
module.exports = {
    content: [
      "./src/**/*.{js,jsx,ts,tsx}",
    ],
    theme: {
      extend: {
        colors: {
          violet: {
            50: '#f5f3ff',
            100: '#ede9fe',
            200: '#ddd6fe',
            300: '#c4b5fd',
            400: '#a78bfa',
            500: '#8b5cf6',
            600: '#7c3aed',
            700: '#6d28d9',
            800: '#5b21b6',
            900: '#4c1d95',
          },
          purple: {
            50: '#faf5ff',
            100: '#f3e8ff',
            200: '#e9d5ff',
            300: '#d8b4fe',
            400: '#c084fc',
            500: '#a855f7',
            600: '#9333ea',
            700: '#7e22ce',
            800: '#6b21a8',
            900: '#581c87',
          }
        },
        animation: {
          'pulse-slow': 'pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite',
          'float': 'float 6s ease-in-out infinite',
        },
        keyframes: {
          float: {
            '0%, 100%': { transform: 'translateY(0)' },
            '50%': { transform: 'translateY(-10px)' },
          }
        }
      },
    },
    plugins: [
      require('@tailwindcss/forms'),
    ],
  }
  src/contexts/AppContext.js
  import React, { createContext, useState, useContext, useEffect } from 'react';

  const AppContext = createContext();
  
  export function useAppContext() {
    return useContext(AppContext);
  }
  
  export function AppProvider({ children }) {
    const [messages, setMessages] = useState([]);
    const [products, setProducts] = useState([]);
    const [currentProduct, setCurrentProduct] = useState(null);
    const [reactionType, setReactionType] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const [sidebarOpen, setSidebarOpen] = useState(true);
  
    const addMessage = (message) => {
      setMessages(prev => [...prev, message]);
    };
  
    const clearChat = () => {
      setMessages([]);
      setCurrentProduct(null);
      setReactionType('');
    };
  
    const value = {
      messages,
      addMessage,
      clearChat,
      products,
      setProducts,
      currentProduct,
      setCurrentProduct,
      reactionType,
      setReactionType,
      isLoading,
      setIsLoading,
      sidebarOpen,
      setSidebarOpen
    };
  
    return <AppContext.Provider value={value}>{children}</AppContext.Provider>;
  }
  #####################
  src/hooks/useApi.js
  import { useState } from 'react';

  export default function useApi(apiFunc) {
    const [data, setData] = useState(null);
    const [error, setError] = useState(null);
    const [loading, setLoading] = useState(false);
  
    const request = async (...args) => {
      setLoading(true);
      try {
        const result = await apiFunc(...args);
        setData(result.data);
        setError(null);
        return result;
      } catch (err) {
        setError(err.message || 'Unexpected Error!');
      } finally {
        setLoading(false);
      }
    };
  
    return { data, error, loading, request };
  }
  #####################
  src/components/SpeechRecognition.jsx
  import { useState, useEffect } from 'react';
  import { FaMicrophone, FaStopCircle } from 'react-icons/fa';
  
  const SpeechRecognition = ({ onResult }) => {
    const [listening, setListening] = useState(false);
    const [speechRecognition, setSpeechRecognition] = useState(null);
  
    useEffect(() => {
      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
      if (SpeechRecognition) {
        const recognition = new SpeechRecognition();
        recognition.continuous = true;
        recognition.interimResults = true;
        recognition.lang = 'en-US';
        
        recognition.onresult = (event) => {
          const transcript = Array.from(event.results)
            .map(result => result[0])
            .map(result => result.transcript)
            .join('');
          onResult(transcript);
        };
        
        recognition.onerror = (event) => {
          console.error('Speech recognition error', event.error);
          setListening(false);
        };
        
        setSpeechRecognition(recognition);
      }
    }, [onResult]);
  
    const toggleListening = () => {
      if (listening) {
        speechRecognition.stop();
      } else {
        speechRecognition.start();
      }
      setListening(!listening);
    };
  
    return (
      <button
        onClick={toggleListening}
        className={`p-3 rounded-full ${listening 
          ? 'bg-red-500 text-white animate-pulse' 
          : 'bg-violet-100 text-violet-600 hover:bg-violet-200'}`}
      >
        {listening ? <FaStopCircle size={20} /> : <FaMicrophone size={20} />}
      </button>
    );
  };
  
  export default SpeechRecognition;
  ##############################
  src/components/ChatMessage.jsx
  import React from 'react';
  import { motion } from 'framer-motion';
  import { FaUser, FaRobot } from 'react-icons/fa';
  
  const ChatMessage = ({ message }) => {
    const isUser = message.role === 'user';
    
    return (
      <motion.div 
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.3 }}
        className={`flex ${isUser ? 'justify-end' : 'justify-start'} mb-4`}
      >
        <div className={`flex items-start max-w-3/4 ${isUser ? 'flex-row-reverse' : ''}`}>
          <div className={`w-10 h-10 rounded-full flex items-center justify-center ${isUser ? 'bg-violet-600' : 'bg-purple-500'}`}>
            {isUser ? (
              <FaUser className="text-white" />
            ) : (
              <FaRobot className="text-white" size={20} />
            )}
          </div>
          
          <div className={`mx-3 px-4 py-3 rounded-2xl ${isUser 
            ? 'bg-violet-600 text-white rounded-tr-none' 
            : 'bg-white shadow-md rounded-tl-none'}`}
          >
            {message.content}
          </div>
        </div>
      </motion.div>
    );
  };
  
  export default ChatMessage;
  ###############################
  src/components/ProductCard.jsx
  import React from 'react';
  import { motion } from 'framer-motion';
  
  const ProductCard = ({ product, onClick }) => {
    return (
      <motion.div
        whileHover={{ scale: 1.03 }}
        whileTap={{ scale: 0.98 }}
        className="product-card bg-white rounded-xl shadow-md overflow-hidden cursor-pointer border border-violet-100 transition-all duration-300"
        onClick={() => onClick(product)}
      >
        <div className="p-5">
          <div className="flex justify-between items-start">
            <h3 className="text-lg font-semibold text-violet-800">{product.name}</h3>
            <span className="bg-purple-100 text-purple-800 text-xs font-medium px-2.5 py-0.5 rounded-full">
              {product.reaction_type}
            </span>
          </div>
          
          <div className="mt-3 flex justify-center">
            <div className="bg-gray-200 border-2 border-dashed rounded-xl w-16 h-16" />
          </div>
          
          <div className="mt-4 flex justify-end">
            <button className="text-sm bg-violet-500 hover:bg-violet-600 text-white px-3 py-1 rounded-full transition-colors">
              View Details
            </button>
          </div>
        </div>
      </motion.div>
    );
  };
  
  export default ProductCard;
  ########################
  src/components/ProductGrid.jsx    
  import React from 'react';
import { motion } from 'framer-motion';
import ProductCard from './ProductCard';

const ProductGrid = ({ products, onSelectProduct }) => {
  return (
    <div className="py-6">
      <h2 className="text-2xl font-bold text-violet-800 mb-6">Reaction Products</h2>
      
      <motion.div 
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ duration: 0.5 }}
        className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"
      >
        {products.map((product, index) => (
          <motion.div
            key={product.id}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.3, delay: index * 0.1 }}
          >
            <ProductCard 
              product={product} 
              onClick={onSelectProduct} 
            />
          </motion.div>
        ))}
      </motion.div>
      
      <div className="mt-8 flex justify-center">
        <button 
          onClick={() => onSelectProduct(null)}
          className="px-4 py-2 bg-white border border-violet-300 text-violet-600 rounded-lg hover:bg-violet-50 transition-colors"
        >
          Back to Chat
        </button>
      </div>
    </div>
  );
};

export default ProductGrid;
##########################
src/components/ProductDetail.jsx
import React, { useEffect, useState } from 'react';
import { motion } from 'framer-motion';
import { FaArrowLeft, FaDownload } from 'react-icons/fa';

const ProductDetail = ({ product, onBack }) => {
  const [details, setDetails] = useState('');
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchDetails = async () => {
      try {
        setLoading(true);
        const response = await fetch(`http://localhost:8000/process_product/${product.id}`);
        const data = await response.json();
        setDetails(data);
      } catch (error) {
        console.error('Error fetching product details:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchDetails();
  }, [product.id]);

  const renderDetailSection = (title, content) => {
    if (!content) return null;
    
    return (
      <motion.div 
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        className="mb-6"
      >
        <h3 className="text-lg font-semibold text-violet-700 mb-2">{title}</h3>
        <div className="bg-white p-4 rounded-lg shadow-sm border border-violet-100">
          {content}
        </div>
      </motion.div>
    );
  };

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      className="bg-white rounded-xl shadow-lg p-6"
    >
      <button 
        onClick={onBack}
        className="flex items-center text-violet-600 hover:text-violet-800 mb-4"
      >
        <FaArrowLeft className="mr-2" /> Back to Products
      </button>
      
      <div className="flex flex-col md:flex-row gap-6">
        <div className="md:w-1/3">
          <div className="bg-gradient-to-br from-violet-100 to-purple-100 rounded-xl p-4 flex flex-col items-center">
            <h2 className="text-2xl font-bold text-violet-800 mb-2">{product.name}</h2>
            <div className="bg-gray-200 border-2 border-dashed rounded-xl w-48 h-48 mb-4" />
            
            <div className="flex gap-3 mt-4">
              <button className="flex items-center gap-2 bg-violet-600 text-white px-4 py-2 rounded-lg hover:bg-violet-700 transition-colors">
                <FaDownload /> PDF
              </button>
              <button className="flex items-center gap-2 bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 transition-colors">
                <FaDownload /> ChemDraw
              </button>
            </div>
          </div>
        </div>
        
        <div className="md:w-2/3">
          {loading ? (
            <div className="flex justify-center items-center h-64">
              <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-violet-500"></div>
            </div>
          ) : (
            <div className="space-y-4">
              {renderDetailSection('API Name', details.match(/### API Name\n(.*?)(?=###|\Z)/s)?.[1]?.trim())}
              {renderDetailSection('Reaction Chemistry', details.match(/### Reaction Chemistry\n(.*?)(?=###|\Z)/s)?.[1]?.trim())}
              {renderDetailSection('Yield', details.match(/### Yield\n(.*?)(?=###|\Z)/s)?.[1]?.trim())}
              {renderDetailSection('Procedure', details.match(/### Procedure\n(.*?)(?=###|\Z)/s)?.[1]?.trim())}
            </div>
          )}
        </div>
      </div>
    </motion.div>
  );
};

export default ProductDetail;
##########################################
src/components/Sidebar.jsx
import React from 'react';
import { motion } from 'framer-motion';
import { FaTimes, FaPlus } from 'react-icons/fa';

const Sidebar = ({ isOpen, onClose, chats, onNewChat }) => {
  return (
    <motion.div
      initial={{ x: '-100%' }}
      animate={{ x: isOpen ? 0 : '-100%' }}
      transition={{ type: 'spring', stiffness: 300, damping: 30 }}
      className="fixed inset-y-0 left-0 w-64 bg-gradient-to-b from-violet-800 to-purple-900 text-white z-50 shadow-2xl"
    >
      <div className="p-4">
        <div className="flex justify-between items-center mb-8">
          <h2 className="text-xl font-bold">Reaction AI</h2>
          <button 
            onClick={onClose}
            className="p-2 rounded-full hover:bg-purple-700"
          >
            <FaTimes />
          </button>
        </div>
        
        <button
          onClick={onNewChat}
          className="w-full flex items-center justify-center gap-2 bg-white text-violet-800 py-2 rounded-lg mb-6 font-medium hover:bg-violet-100 transition-colors"
        >
          <FaPlus /> New Chat
        </button>
        
        <div className="space-y-2">
          {chats.map((chat, index) => (
            <div 
              key={index}
              className="p-3 rounded-lg cursor-pointer hover:bg-purple-700 transition-colors truncate"
            >
              Chat {index + 1}
            </div>
          ))}
        </div>
      </div>
    </motion.div>
  );
};

export default Sidebar;
##############################
src/App.jsx
import React, { useState, useEffect, useContext } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { AppProvider, useAppContext } from './contexts/AppContext';
import ChatMessage from './components/ChatMessage';
import ProductGrid from './components/ProductGrid';
import ProductDetail from './components/ProductDetail';
import Sidebar from './components/Sidebar';
import SpeechRecognition from './components/SpeechRecognition';
import { FaBars } from 'react-icons/fa';

const ChatInterface = () => {
  const { 
    messages, 
    addMessage, 
    products, 
    setProducts,
    currentProduct,
    setCurrentProduct,
    reactionType,
    setReactionType,
    isLoading,
    setIsLoading,
    sidebarOpen,
    setSidebarOpen
  } = useAppContext();
  
  const [inputValue, setInputValue] = useState('');
  const [interimText, setInterimText] = useState('');

  useEffect(() => {
    // Scroll to bottom of chat
    const chatContainer = document.getElementById('chat-container');
    if (chatContainer) {
      chatContainer.scrollTop = chatContainer.scrollHeight;
    }
  }, [messages]);

  const handleSendMessage = async () => {
    if (!inputValue.trim()) return;
    
    // Add user message
    addMessage({ role: 'user', content: inputValue });
    setInputValue('');
    
    try {
      setIsLoading(true);
      
      const response = await fetch('http://localhost:8000/chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          message: inputValue,
          product_id: currentProduct?.id 
        })
      });
      
      const data = await response.json();
      
      if (data.products && data.products.length > 0) {
        setProducts(data.products);
        setReactionType(inputValue);
      } else {
        addMessage({ role: 'assistant', content: data.response });
      }
    } catch (error) {
      addMessage({ 
        role: 'assistant', 
        content: 'Sorry, I encountered an error processing your request.' 
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleSpeechResult = (transcript) => {
    setInputValue(transcript);
  };

  const handleKeyDown = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  return (
    <div className="flex h-screen max-h-screen overflow-hidden bg-gradient-to-br from-violet-50 to-purple-100">
      <Sidebar 
        isOpen={sidebarOpen} 
        onClose={() => setSidebarOpen(false)}
        chats={[1, 2, 3]} 
        onNewChat={() => {
          setMessages([]);
          setProducts([]);
          setCurrentProduct(null);
          setReactionType('');
        }}
      />
      
      <div className="flex-1 flex flex-col h-full">
        <header className="gradient-header text-white p-4 flex items-center justify-between shadow-md">
          <button 
            onClick={() => setSidebarOpen(true)}
            className="p-2 rounded-full hover:bg-violet-700 transition-colors"
          >
            <FaBars size={20} />
          </button>
          <h1 className="text-xl font-bold">Reaction Chemistry AI</h1>
          <div className="w-10"></div> {/* Spacer */}
        </header>
        
        <main className="flex-1 overflow-hidden p-4">
          {currentProduct ? (
            <ProductDetail 
              product={currentProduct} 
              onBack={() => setCurrentProduct(null)} 
            />
          ) : products.length > 0 ? (
            <ProductGrid 
              products={products} 
              onSelectProduct={setCurrentProduct} 
            />
          ) : (
            <div className="h-full flex flex-col max-w-4xl mx-auto">
              <div 
                id="chat-container"
                className="flex-1 overflow-y-auto mb-4 p-4 bg-white/50 backdrop-blur-sm rounded-xl shadow-inner"
              >
                <AnimatePresence>
                  {messages.map((message, index) => (
                    <ChatMessage key={index} message={message} />
                  ))}
                  
                  {isLoading && (
                    <motion.div
                      initial={{ opacity: 0 }}
                      animate={{ opacity: 1 }}
                      className="flex justify-start mb-4"
                    >
                      <div className="flex items-start">
                        <div className="w-10 h-10 rounded-full flex items-center justify-center bg-purple-500">
                          <div className="bg-white w-5 h-5 rounded-full animate-pulse" />
                        </div>
                        <div className="mx-3 px-4 py-3 bg-white shadow-md rounded-2xl rounded-tl-none w-24">
                          <div className="flex space-x-1">
                            <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                            <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                            <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.4s' }}></div>
                          </div>
                        </div>
                      </div>
                    </motion.div>
                  )}
                </AnimatePresence>
              </div>
              
              <div className="mt-auto bg-white rounded-xl shadow-lg p-4">
                <div className="flex items-end gap-3">
                  <div className="flex-1 bg-violet-50 rounded-lg border border-violet-200">
                    <textarea
                      value={inputValue}
                      onChange={(e) => setInputValue(e.target.value)}
                      onKeyDown={handleKeyDown}
                      placeholder="Ask about reaction chemistry..."
                      className="w-full bg-transparent p-3 resize-none focus:outline-none min-h-[60px] max-h-32"
                    />
                    {interimText && (
                      <div className="p-3 pt-0 text-gray-500 italic text-sm">
                        {interimText}
                      </div>
                    )}
                  </div>
                  
                  <div className="flex gap-2">
                    <SpeechRecognition onResult={setInterimText} />
                    <button
                      onClick={handleSendMessage}
                      disabled={isLoading || !inputValue.trim()}
                      className={`px-5 py-3 rounded-lg font-medium ${
                        inputValue.trim()
                          ? 'bg-violet-600 text-white hover:bg-violet-700'
                          : 'bg-gray-200 text-gray-400 cursor-not-allowed'
                      } transition-colors`}
                    >
                      Send
                    </button>
                  </div>
                </div>
              </div>
            </div>
          )}
        </main>
      </div>
    </div>
  );
};

export default function App() {
  return (
    <AppProvider>
      <ChatInterface />
    </AppProvider>
  );
}
############################          
src/index.js
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);
######################
package.json
{
    "name": "reaction-chemistry-ai",
    "version": "1.0.0",
    "private": true,
    "dependencies": {
      "@testing-library/jest-dom": "^5.17.0",
      "@testing-library/react": "^13.4.0",
      "@testing-library/user-event": "^13.5.0",
      "axios": "^1.7.2",
      "framer-motion": "^10.17.4",
      "react": "^18.2.0",
      "react-dom": "^18.2.0",
      "react-icons": "^4.12.0",
      "react-router-dom": "^6.22.3",
      "react-scripts": "5.0.1",
      "tailwindcss": "^3.4.1",
      "web-vitals": "^2.1.4"
    },
    "scripts": {
      "start": "react-scripts start",
      "build": "react-scripts build",
      "test": "react-scripts test",
      "eject": "react-scripts eject"
    },
    "eslintConfig": {
      "extends": [
        "react-app",
        "react-app/jest"
      ]
    },
    "browserslist": {
      "production": [
        ">0.2%",
        "not dead",
        "not op_mini all"
      ],
      "development": [
        "last 1 chrome version",
        "last 1 firefox version",
        "last 1 safari version"
      ]
    },
    "devDependencies": {
      "@tailwindcss/forms": "^0.5.7",
      "autoprefixer": "^10.4.19",
      "postcss": "^8.4.38",
      "tailwind-scrollbar": "^3.0.1"
    }
  }
  ######################
