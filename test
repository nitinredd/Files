import React, { useState, useEffect, useContext } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { AppProvider, useAppContext } from './contexts/AppContext';
import ChatMessage from './components/ChatMessage';
import ProductGrid from './components/ProductGrid';
import ProductDetail from './components/ProductDetail';
import Sidebar from './components/Sidebar';
import SpeechRecognition from './components/SpeechRecognition';
import { FaBars } from 'react-icons/fa';

const ChatInterface = () => {
  const { 
    messages, 
    setMessages, // Now properly exposed from context
    addMessage, 
    products, 
    setProducts,
    currentProduct,
    setCurrentProduct,
    reactionType,
    setReactionType,
    isLoading,
    setIsLoading,
    sidebarOpen,
    setSidebarOpen
  } = useAppContext();
  
  const [inputValue, setInputValue] = useState('');
  const [interimText, setInterimText] = useState('');

  useEffect(() => {
    // Scroll to bottom of chat when messages change
    const chatContainer = document.getElementById('chat-container');
    if (chatContainer) {
      chatContainer.scrollTop = chatContainer.scrollHeight;
    }
  }, [messages]);

  const handleSendMessage = async () => {
    if (!inputValue.trim()) return;
    
    // Add user message
    addMessage({ role: 'user', content: inputValue });
    setInputValue('');
    setInterimText('');
    
    try {
      setIsLoading(true);
      
      const response = await fetch('http://localhost:8000/chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          message: inputValue,
          product_id: currentProduct?.id 
        })
      });
      
      const data = await response.json();
      
      if (data.products && data.products.length > 0) {
        setProducts(data.products);
        setReactionType(inputValue);
      } else {
        addMessage({ role: 'assistant', content: data.response });
      }
    } catch (error) {
      addMessage({ 
        role: 'assistant', 
        content: 'Sorry, I encountered an error processing your request.' 
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleSpeechResult = (transcript) => {
    setInputValue(transcript);
  };

  const handleKeyDown = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  return (
    <div className="flex h-screen max-h-screen overflow-hidden bg-gradient-to-br from-violet-50 to-purple-100">
      <Sidebar 
        isOpen={sidebarOpen} 
        onClose={() => setSidebarOpen(false)}
        chats={[1, 2, 3]} 
        onNewChat={() => {
          setMessages([]);
          setProducts([]);
          setCurrentProduct(null);
          setReactionType('');
        }}
      />
      
      <div className="flex-1 flex flex-col h-full">
        <header className="bg-gradient-to-r from-violet-600 to-purple-500 text-white p-4 flex items-center justify-between shadow-md">
          <button 
            onClick={() => setSidebarOpen(true)}
            className="p-2 rounded-full hover:bg-violet-700 transition-colors"
          >
            <FaBars size={20} />
          </button>
          <h1 className="text-xl font-bold">Reaction Chemistry AI</h1>
          <div className="w-10"></div> {/* Spacer */}
        </header>
        
        <main className="flex-1 overflow-hidden p-4">
          {currentProduct ? (
            <ProductDetail 
              product={currentProduct} 
              onBack={() => setCurrentProduct(null)} 
            />
          ) : products.length > 0 ? (
            <ProductGrid 
              products={products} 
              onSelectProduct={setCurrentProduct} 
            />
          ) : (
            <div className="h-full flex flex-col max-w-4xl mx-auto">
              <div 
                id="chat-container"
                className="flex-1 overflow-y-auto mb-4 p-4 bg-white/50 backdrop-blur-sm rounded-xl shadow-inner"
              >
                <AnimatePresence>
                  {messages.map((message, index) => (
                    <ChatMessage key={index} message={message} />
                  ))}
                  
                  {isLoading && (
                    <motion.div
                      initial={{ opacity: 0 }}
                      animate={{ opacity: 1 }}
                      className="flex justify-start mb-4"
                    >
                      <div className="flex items-start">
                        <div className="w-10 h-10 rounded-full flex items-center justify-center bg-purple-500">
                          <div className="bg-white w-5 h-5 rounded-full animate-pulse" />
                        </div>
                        <div className="mx-3 px-4 py-3 bg-white shadow-md rounded-2xl rounded-tl-none w-24">
                          <div className="flex space-x-1">
                            <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                            <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                            <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.4s' }}></div>
                          </div>
                        </div>
                      </div>
                    </motion.div>
                  )}
                </AnimatePresence>
              </div>
              
              <div className="mt-auto bg-white rounded-xl shadow-lg p-4">
                <div className="flex items-end gap-3">
                  <div className="flex-1 bg-violet-50 rounded-lg border border-violet-200">
                    <textarea
                      value={inputValue}
                      onChange={(e) => setInputValue(e.target.value)}
                      onKeyDown={handleKeyDown}
                      placeholder="Ask about reaction chemistry..."
                      className="w-full bg-transparent p-3 resize-none focus:outline-none min-h-[60px] max-h-32"
                    />
                    {interimText && (
                      <div className="p-3 pt-0 text-gray-500 italic text-sm">
                        {interimText}
                      </div>
                    )}
                  </div>
                  
                  <div className="flex gap-2">
                    <SpeechRecognition onResult={setInterimText} />
                    <button
                      onClick={handleSendMessage}
                      disabled={isLoading || !inputValue.trim()}
                      className={`px-5 py-3 rounded-lg font-medium ${
                        inputValue.trim()
                          ? 'bg-violet-600 text-white hover:bg-violet-700'
                          : 'bg-gray-200 text-gray-400 cursor-not-allowed'
                      } transition-colors`}
                    >
                      Send
                    </button>
                  </div>
                </div>
              </div>
            </div>
          )}
        </main>
      </div>
    </div>
  );
};

export default function App() {
  return (
    <AppProvider>
      <ChatInterface />
    </AppProvider>
  );
}
