import os
import subprocess
import json
import streamlit as st
from langchain.chat_models import AzureChatOpenAI
from langchain.schema import SystemMessage, HumanMessage
from pydantic import BaseModel, Field

# --- Azure/OpenAI configuration (exactly as provided) ---
base_url        = ""
api_version     = "2024-02-15-preview"
api_key         = ""
deployment_name = "GPT4o"
model_name      = "GPT4o"

# --- Initialize AzureChatOpenAI with the given config ---
chat_model = AzureChatOpenAI(
    azure_deployment=deployment_name,
    model=model_name,
    api_version=api_version,
    api_key=api_key,
    azure_endpoint=base_url
)

# --- 1) Generic Python executor ---
def execute_python(code: str) -> str:
    """
    Execute the given Python code snippet in a sandboxed subprocess
    and return stdout. The snippet should print or populate `result`.
    """
    script = f"""
import sys
def safe_exec():
{code.replace(chr(10), chr(10) + '    ')}
if __name__ == "__main__":
    safe_exec()
"""
    proc = subprocess.run(
        ["python3", "-c", script],
        capture_output=True,
        text=True,
        timeout=10
    )
    if proc.returncode != 0:
        return f"Error:\\n{proc.stderr}"
    return proc.stdout.strip()

# --- 2) Define function schema for GPT function-calling ---
class ExecutePythonSchema(BaseModel):
    code: str = Field(..., description="Python code snippet printing or populating `result`.")

function_def = {
    "name": "execute_python",
    "description": "Executes Python code in a sandbox and returns stdout.",
    "parameters": {
        "type": "object",
        "properties": ExecutePythonSchema.schema()["properties"],
        "required": ["code"]
    }
}

# --- 3) Streamlit UI setup ---
st.set_page_config(page_title="Azure GPT4o + Python Sandbox", layout="wide")
st.title("Azure GPT4o + Generic Python Tool")

prompt = st.text_area("Enter your prompt (math, tables, data, etc):", height=150)

if st.button("Submit"):
    # System message instructing function-calling
    system_msg = SystemMessage(content=(
        "You are an assistant. For precise math, data processing, or plotting, "
        "call the function `execute_python` with a code snippet that prints or defines `result`. "
        "If no calculations are needed, respond directly."
    ))
    user_msg = HumanMessage(content=prompt)

    # Send to Azure GPT4o with function schema
    response = chat_model.generate(
        messages=[system_msg, user_msg],
        functions=[function_def],
        function_call="auto"
    )

    msg = response.generations[0][0].message

    if msg.function_call:
        args = json.loads(msg.function_call.arguments)
        code = args["code"]
        # Show code in a collapsible expander
        with st.expander("üîç View generated Python code", expanded=False):
            st.code(code, language="python")
        # Execute and display result
        output = execute_python(code)
        st.markdown("**Execution Result:**")
        st.text(output)
    else:
        st.markdown("**Response:**")
        st.write(msg.content)
