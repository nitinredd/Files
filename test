#Recommended  time points
# batch_similarity_analyzer_with_bootstrap_interval_profiles_styled.py
import os
import math
# import streamlit as st
import pandas as pd
import numpy as np
from zipfile import ZipFile
# from scipy.stats import skew, kurtosis, norm, probplot
from scipy import stats
import plotly.graph_objects as go
# from plotly.subplots import make_subplots

# ----------------------------------------
# Required Helper Functions (improved)
# ----------------------------------------


        
def compute_cv_per_timepoint(df):
    """Compute CV (%) per timepoint for a dataframe (columns: time, unit1, unit2, ...)."""
    if df.shape[1] <= 1:
        return pd.Series([np.nan]*df.shape[0])
    means = df.iloc[:, 1:].mean(axis=1)
    stds = df.iloc[:, 1:].std(axis=1, ddof=1)
    with np.errstate(divide='ignore', invalid='ignore'):
        cvs = (stds / means) * 100.0
    cvs = cvs.replace([np.inf, -np.inf], np.nan)
    return cvs.fillna(999.0)

def check_cv_criteria(ref_df, test_df, markets):

    if markets == "EMA/ICH/Canada/Australia":
        markets = "EMA"
    
    ref_df_check = combined_check_cv(ref_df, market=markets) 
    test_df_check = combined_check_cv(test_df, market=markets)

    m = (markets or "").strip().upper()
    if ref_df_check and test_df_check:
        if m in ['EMA', 'CHINA', 'ASEAN', 'WHO']:
            return ['Expected F2']
        elif m in ['US FDA', 'FDA', 'ANVISA']:
            return ['Conventional F2']
        else:
            return ['Conventional F2', 'Expected F2']
    else:
        if m in ['EMA', 'CHINA', 'ASEAN','WHO']:
            return ['Expected Bootstrap F2']
        elif m in ['US FDA', 'FDA', 'ANVISA']:
            return ['Conventional Bootstrap F2']
        else:
            return ['Conventional Bootstrap F2', 'Expected Bootstrap F2']



# def check_cv_criteria(ref_df, test_df, market):
#     if market == "EMA/ICH/Canada/Australia":
#         market = "EMA"
#     """
#     Return True if CV criteria PASS for given market.
#     """

#     if ref_df.shape[0] > 0 and (ref_df.iloc[0, 0] == 0 or ref_df.iloc[0, 0] == '0'):
#         ref_df = ref_df.iloc[1:].reset_index(drop=True)
#     if test_df.shape[0] > 0 and (test_df.iloc[0, 0] == 0 or test_df.iloc[0, 0] == '0'):
#         test_df = test_df.iloc[1:].reset_index(drop=True)
#     # return reference_df, test_df
#     m = (market or "").strip().upper()
#     if ref_df.shape[0] == 0:
#         return False
#     times = pd.to_numeric(ref_df.iloc[:, 0], errors='coerce')
#     if times.isnull().all():
#         return False
#     ref_cvs = compute_cv_per_timepoint(ref_df)
#     test_cvs = compute_cv_per_timepoint(test_df)
#     pass_criteria = True
#     if m in ['EMA','CHINA','ASEAN', 'WHO']:
#         early_mask = times <= 10
#         for i in range(len(times)):
#             if early_mask.iloc[i]:
#                 if ref_cvs.iloc[i] > 20 or test_cvs.iloc[i] > 20:
#                     pass_criteria = False
#                     break
#             else:
#                 if ref_cvs.iloc[i] > 10 or test_cvs.iloc[i] > 10:
#                     pass_criteria = False
#                     break
#     elif m in ['US FDA', 'FDA']:
#         early_mask = times <= 15
#         for i in range(len(times)):
#             if early_mask.iloc[i]:
#                 if ref_cvs.iloc[i] > 20 or test_cvs.iloc[i] > 20:
#                     pass_criteria = False
#                     break
#             else:
#                 if ref_cvs.iloc[i] > 10 or test_cvs.iloc[i] > 10:
#                     pass_criteria = False
#                     break
#     elif m == 'ANVISA':
#         p = len(times)
#         num_early = max(1, int(math.ceil(0.4 * p)))
#         for i in range(len(times)):
#             if i < num_early:
#                 if ref_cvs.iloc[i] > 20 or test_cvs.iloc[i] > 20:
#                     pass_criteria = False
#                     break
#             else:
#                 if ref_cvs.iloc[i] > 10 or test_cvs.iloc[i] > 10:
#                     pass_criteria = False
#                     break
#     else:
#         pass_criteria = False


#     if pass_criteria:
#         if m in ['EMA', 'CHINA', 'ASEAN', 'WHO']:
#             return ['Expected F2']
#         elif m in ['US FDA', 'FDA', 'ANVISA']:
#             return ['Conventional F2']
#         else:
#             return ['Conventional F2', 'Expected F2']
#     else:
#         if m in ['EMA', 'CHINA', 'ASEAN','WHO']:
#             return ['Expected Bootstrap F2']
#         elif m in ['US FDA', 'FDA', 'ANVISA']:
#             return ['Conventional Bootstrap F2']
#         else:
#             return ['Conventional Bootstrap F2', 'Expected Bootstrap F2']



def combined_check_cv(df, market=None):
    """
    Combine basic and market-specific CV checking rules.
    Returns True if CV criteria PASS for given market; False otherwise.

    CRITICAL: This function MUST match check_cv() from sa_main.py (line 413-430)
    to ensure consistent pass/fail results for methodology recommendations.
    """
    try:
        # Handle empty or malformed data upfront
        if df.shape[0] == 0 or df.shape[1] <= 1:
            return False

        # CRITICAL FIX: Remove time zero FIRST (matching check_cv behavior)
        if df.iloc[0, 0] == 0 or str(df.iloc[0, 0]).lower() == '0':
            df = df.iloc[1:].reset_index(drop=True)

        # Re-check if we still have data after removing time zero
        if df.shape[0] == 0:
            return False

        # Convert time column to numeric (handles invalid formats or missing values)
        times = pd.to_numeric(df.iloc[:, 0], errors='coerce')
        if times.isnull().all():
            return False

        # Compute CV values per time point (now on data WITHOUT time zero)
        means = df.iloc[:, 1:].mean(axis=1)
        stds = df.iloc[:, 1:].std(axis=1, ddof=1)
        with np.errstate(divide='ignore', invalid='ignore'):
            cv_values = (stds / means) * 100.0
        cv_values = cv_values.replace([np.inf, -np.inf], np.nan).fillna(999.0)

        # Simple CV rules (Fixed 20% for first time-point, 10% for all subsequent time-points)
        # This EXACTLY matches check_cv() logic: first_cv < 20 and all(cv < 10 for cv in other_cv)
        # Note: We check >= 20 (not < 20), so this line FAILS if CV is >= 20
        if cv_values.iloc[0] >= 20 or not (cv_values.iloc[1:] < 10).all():
            return False

        # Add market-specific rules for more advanced checks
        # These rules are ADDITIONAL to the basic check above
        pass_criteria = True
        m = (market or "").strip().upper()
        if m in ['EMA','CHINA','ASEAN', 'WHO']:
            early_mask = times <= 10
            for i in range(len(times)):
                if early_mask.iloc[i]:
                    if cv_values.iloc[i] >= 20:  # FIXED: Changed > to >= for consistency
                        pass_criteria = False
                        break
                else:
                    if cv_values.iloc[i] >= 10:  # FIXED: Changed > to >= for consistency
                        pass_criteria = False
                        break
        elif m in ['US FDA', 'FDA']:
            early_mask = times <= 15
            for i in range(len(times)):
                if early_mask.iloc[i]:
                    if cv_values.iloc[i] >= 20:  # FIXED: Changed > to >= for consistency
                        pass_criteria = False
                        break
                else:
                    if cv_values.iloc[i] >= 10:  # FIXED: Changed > to >= for consistency
                        pass_criteria = False
                        break
        elif m == 'ANVISA':
            p = len(times)
            num_early = max(1, int(math.ceil(0.4 * p)))
            for i in range(len(times)):
                if i < num_early:
                    if cv_values.iloc[i] >= 20:  # FIXED: Changed > to >= for consistency
                        pass_criteria = False
                        break
                else:
                    if cv_values.iloc[i] >= 10:  # FIXED: Changed > to >= for consistency
                        pass_criteria = False
                        break
        else:
            pass_criteria = False  # Unsupported or unspecified market
 
        # Return combined result
        return pass_criteria
 
    except Exception as e:
        print(f"Error in combined_check_cv: {e}")
        return False

############################
