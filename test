// ProductDetailModal.jsx
import React, { useEffect, useState, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import FancyLoader from './FancyLoader';
import { downloadPdfUrl, fetchSchemeImageUrl } from '../api';

/**
 * ProductDetailModal
 *
 * Props:
 *  - open (bool) : whether modal is shown
 *  - onClose (fn) : close handler
 *  - meta (object) : product meta { id, name, reaction_type, scheme_image? }
 *  - details (object|null) : structured details from backend (api_name, reaction_chemistry, yield, procedure, tables[])
 *  - loading (bool) : whether details are currently being fetched
 *
 * This component is robust and defensive: it preloads scheme image and handles errors/CORS gracefully.
 */
export default function ProductDetailModal({ open, onClose, meta, details, loading }) {
  const [schemeUrl, setSchemeUrl] = useState(null);
  const [imgStatus, setImgStatus] = useState('idle'); // idle | loading | ok | error
  const [imgError, setImgError] = useState('');
  const closeBtnRef = useRef(null);

  useEffect(() => {
    if (!open) {
      setSchemeUrl(null);
      setImgStatus('idle');
      setImgError('');
      return;
    }
    // Focus close button for keyboard users
    if (closeBtnRef.current) closeBtnRef.current.focus();
  }, [open]);

  // choose and preload the scheme image intelligently
  useEffect(() => {
    let mounted = true;
    setSchemeUrl(null);
    setImgStatus('idle');
    setImgError('');

    if (!meta || !open) return;

    // Candidate priority:
    // 1) meta.scheme_image if it's already an http(s) URL
    // 2) fetchSchemeImageUrl(meta.id) — which returns a backend endpoint
    const candidateUrl =
      meta.scheme_image && typeof meta.scheme_image === 'string' && /^https?:\/\//i.test(meta.scheme_image)
        ? meta.scheme_image
        : fetchSchemeImageUrl(meta.id);

    // Defensive: if candidateUrl is falsy, skip
    if (!candidateUrl) {
      setImgStatus('error');
      setImgError('No scheme image configured for this product.');
      return;
    }

    setSchemeUrl(candidateUrl);
    setImgStatus('loading');

    // Preload with native Image to detect load / error early
    const img = new Image();
    img.crossOrigin = 'anonymous'; // attempt CORS-friendly load; if server doesn't allow, onerror will fire
    img.onload = () => {
      if (!mounted) return;
      setImgStatus('ok');
    };
    img.onerror = (err) => {
      if (!mounted) return;
      setImgStatus('error');
      // try to provide a helpful error string
      try {
        if (err && err.message) setImgError(err.message);
        else setImgError('Failed to load image (CORS or missing file).');
      } catch {
        setImgError('Failed to load image.');
      }
    };
    // start loading
    try {
      img.src = candidateUrl;
      // If the URL fails synchronously (rare), handle via error fallback
    } catch (e) {
      setImgStatus('error');
      setImgError(e.message || 'Failed to start loading image.');
    }

    return () => {
      mounted = false;
    };
  }, [meta, open]);

  // Close on ESC
  useEffect(() => {
    const handler = (e) => {
      if (e.key === 'Escape') {
        onClose && onClose();
      }
    };
    if (open) window.addEventListener('keydown', handler);
    return () => window.removeEventListener('keydown', handler);
  }, [open, onClose]);

  if (!open || !meta) return null;

  // helpers
  const pdfUrl = downloadPdfUrl(meta.id);
  const copyProcedure = async () => {
    try {
      if (!details || !details.procedure) return;
      await navigator.clipboard.writeText(details.procedure);
      // small inline feedback - could be replaced with toast
      alert('Procedure copied to clipboard');
    } catch (e) {
      alert('Failed to copy (clipboard permission denied).');
    }
  };

  const openFullImage = () => {
    if (!schemeUrl) return;
    window.open(schemeUrl, '_blank', 'noopener,noreferrer');
  };

  return (
    <AnimatePresence>
      <motion.div
        key="modal-root"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        exit={{ opacity: 0 }}
        className="fixed inset-0 z-50 flex items-center justify-center"
        aria-modal="true"
        role="dialog"
      >
        {/* overlay */}
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          className="absolute inset-0 bg-black/35"
          onClick={onClose}
          aria-hidden="true"
        />

        {/* modal container */}
        <motion.div
          initial={{ y: -30, opacity: 0, scale: 0.98 }}
          animate={{ y: 0, opacity: 1, scale: 1 }}
          exit={{ y: -20, opacity: 0, scale: 0.98 }}
          transition={{ duration: 0.45, ease: [0.2, 0.9, 0.2, 1] }}
          className="relative z-60 w-full max-w-6xl mx-4 rounded-2xl bg-white shadow-2xl overflow-hidden"
          role="document"
        >
          {/* header */}
          <div className="flex items-start justify-between px-6 py-4 border-b">
            <div className="pr-4">
              <h2 className="text-xl md:text-2xl font-semibold text-primary leading-tight">{meta.name}</h2>
              <div className="text-sm text-gray-500 mt-1">{meta.reaction_type?.replace(/_/g, ' ')}</div>
            </div>

            <div className="flex items-center gap-2">
              <a href={pdfUrl} target="_blank" rel="noreferrer" className="inline-flex items-center px-3 py-2 rounded-md bg-primary text-white text-sm shadow-sm" download={`${meta.name}.pdf`}>
                Download PDF
              </a>

              <button
                ref={closeBtnRef}
                onClick={onClose}
                className="inline-flex items-center px-3 py-2 rounded-md bg-gray-100 text-sm hover:bg-gray-200"
                aria-label="Close product details"
              >
                Close
              </button>
            </div>
          </div>

          {/* body */}
          <div className="p-6 grid grid-cols-1 lg:grid-cols-3 gap-6 max-h-[78vh] overflow-auto">
            {/* left / main column — details */}
            <div className="lg:col-span-2 space-y-5">
              {/* top summary cards */}
              <div className="grid grid-cols-1 sm:grid-cols-3 gap-3">
                <div className="bg-gray-50 p-3 rounded-lg">
                  <div className="text-xs text-gray-500">API Name</div>
                  <div className="text-sm font-medium mt-1 text-gray-800">{details?.api_name || '—'}</div>
                </div>
                <div className="bg-gray-50 p-3 rounded-lg">
                  <div className="text-xs text-gray-500">Reaction Chemistry</div>
                  <div className="text-sm font-medium mt-1 text-gray-800">{details?.reaction_chemistry || '—'}</div>
                </div>
                <div className="bg-gray-50 p-3 rounded-lg">
                  <div className="text-xs text-gray-500">Yield</div>
                  <div className="text-sm font-medium mt-1 text-gray-800">{details?.yield || '—'}</div>
                </div>
              </div>

              {/* Procedure */}
              <div>
                <div className="flex items-center justify-between">
                  <h3 className="text-sm text-gray-500">Procedure</h3>
                  <div className="flex gap-2">
                    <button onClick={copyProcedure} className="text-xs px-2 py-1 bg-gray-100 rounded">Copy Procedure</button>
                    <a href={pdfUrl} target="_blank" rel="noreferrer" className="text-xs px-2 py-1 bg-white border rounded">Open Source PDF</a>
                  </div>
                </div>
                <div className="mt-2 p-4 bg-white border rounded text-sm leading-relaxed whitespace-pre-wrap" style={{ fontFamily: 'ui-serif, Georgia, "Times New Roman", serif' }}>
                  {details?.procedure || <span className="text-gray-400">Procedure not available.</span>}
                </div>
              </div>

              {/* Tables */}
              <div>
                <h3 className="text-sm text-gray-500 mb-2">Tabular Data</h3>
                {details?.tables && details.tables.length > 0 ? (
                  <div className="space-y-4">
                    {details.tables.map((t, ti) => (
                      <div key={ti} className="rounded-lg border overflow-auto">
                        {t.headers && t.headers.length > 0 ? (
                          <table className="min-w-full text-sm">
                            <thead className="bg-gray-50">
                              <tr>
                                {t.headers.map((h, hi) => (
                                  <th key={hi} className="px-3 py-2 text-left font-medium text-gray-600">{h}</th>
                                ))}
                              </tr>
                            </thead>
                            <tbody>
                              {t.rows.map((r, ri) => (
                                <tr key={ri} className="odd:bg-white even:bg-gray-50">
                                  {r.map((c, ci) => <td key={ci} className="px-3 py-2 align-top">{c}</td>)}
                                </tr>
                              ))}
                            </tbody>
                          </table>
                        ) : (
                          <pre className="p-3 text-sm bg-gray-50">{t.raw_md}</pre>
                        )}
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="text-sm text-gray-500">No tabular data detected in this document.</div>
                )}
              </div>
            </div>

            {/* right column — scheme preview + actions */}
            <div className="space-y-4">
              <div className="bg-gray-50 rounded-lg p-3 flex flex-col items-stretch justify-center" style={{ minHeight: 220 }}>
                {/* show loader while either details loading or image loading */}
                { (loading || imgStatus === 'loading') && (
                  <div className="flex items-center justify-center p-6">
                    <FancyLoader message={loading ? 'Loading details' : 'Loading scheme preview'} sub={loading ? 'Extracting structured content' : 'Fetching image preview'} />
                  </div>
                )}

                {imgStatus === 'ok' && schemeUrl && (
                  <div className="flex flex-col items-center gap-3">
                    <img
                      src={schemeUrl}
                      alt={`${meta.name} scheme`}
                      className="max-w-full max-h-[360px] object-contain rounded-md border"
                      onClick={openFullImage}
                      style={{ cursor: 'zoom-in' }}
                    />
                    <div className="text-xs text-gray-500">Click image to open full size</div>
                  </div>
                )}

                {imgStatus === 'error' && (
                  <div className="text-sm text-red-500 text-center">
                    <div>Scheme preview not available.</div>
                    <div className="text-xs text-gray-500 mt-1">{imgError}</div>
                  </div>
                )}

                {imgStatus === 'idle' && !loading && (
                  <div className="text-sm text-gray-500 text-center">No scheme image provided for this product.</div>
                )}
              </div>

              <div className="bg-white border rounded-lg p-3">
                <div className="text-xs text-gray-500">Quick Actions</div>
                <div className="mt-3 grid grid-cols-1 gap-2">
                  <a href={pdfUrl} target="_blank" rel="noreferrer" className="inline-flex justify-center px-3 py-2 rounded-md bg-primary text-white text-sm">Download PDF</a>
                  <button onClick={() => copyProcedure()} className="px-3 py-2 rounded-md border text-sm">Copy Procedure</button>
                </div>
              </div>

              {/* meta + source path (helpful debug info) */}
              <div className="text-xs text-gray-400">
                <div>Product ID: <span className="text-gray-600">{meta.id}</span></div>
              </div>
            </div>
          </div>
        </motion.div>
      </motion.div>
    </AnimatePresence>
  );
}
