def main():
    st.title("Advanced Tablet Porosity Analysis App")

    # Initialize session state variables
    if 'zone_results' not in st.session_state:
        st.session_state.zone_results = None
    if 'original_image' not in st.session_state:
        st.session_state.original_image = None
    if 'cv_analysis_complete' not in st.session_state:
        st.session_state.cv_analysis_complete = False

    uploaded_file = st.file_uploader("Choose an image file", type=["jpg", "jpeg", "png"])

    if uploaded_file is not None:
        try:
            file_bytes = np.asarray(bytearray(uploaded_file.read()), dtype=np.uint8)
            image = cv2.imdecode(file_bytes, cv2.IMREAD_GRAYSCALE)

            st.image(image, caption="Uploaded Image", use_column_width=True)

            if st.button("Analyze Image"):
                with st.spinner("Performing advanced computer vision analysis..."):
                    zone_results = analyze_zones(image)
                
                st.session_state.zone_results = zone_results
                st.session_state.original_image = image
                st.session_state.cv_analysis_complete = True

                st.success("Computer vision analysis complete!")

            # Display CV results if analysis is complete
            if st.session_state.cv_analysis_complete:
                st.subheader("Computer Vision Analysis Results")
                for zone_name, tablets in st.session_state.zone_results.items():
                    st.write(f"**{zone_name}**")
                    for i, tablet in enumerate(tablets):
                        st.write(f"Tablet {i+1}")
                        st.write("Porosity Percentages:")
                        for category, percentage in tablet['percentages'].items():
                            st.write(f"  {category}: {percentage:.2f}%")
                        st.write(f"Contrast: {tablet['contrast']:.2f}")
                        st.write(f"Homogeneity: {tablet['homogeneity']:.2f}")
                
                if st.button("Analyze with Gemini"):
                    with st.spinner("Processing with Gemini..."):
                        gemini_analysis = analyze_tablet_data_with_gemini(st.session_state.zone_results)
                    if gemini_analysis:
                        st.subheader("Gemini Analysis")
                        st.write(gemini_analysis)

                        # Create annotated image
                        annotated_image = create_annotated_image(st.session_state.original_image, st.session_state.zone_results, gemini_analysis)
                        
                        # Display the annotated image
                        st.image(annotated_image, caption="Annotated Analysis", use_column_width=True)
                        
                        # Provide download link for the annotated image
                        buffered = io.BytesIO()
                        annotated_image.save(buffered, format="JPEG")
                        st.download_button(
                            label="Download Annotated Image",
                            data=buffered.getvalue(),
                            file_name="annotated_tablet_analysis.jpg",
                            mime="image/jpeg"
                        )
                    else:
                        st.warning("Gemini analysis failed. Please check the error message above.")

        except Exception as e:
            st.error(f"An error occurred during analysis: {str(e)}")

if __name__ == "__main__":
    main()
