import streamlit as st
import os
import fitz  # PyMuPDF for PDF handling
from PyPDF2 import PdfWriter
from io import BytesIO
from google.auth import default
from google.cloud import aiplatform
from langchain_google_vertexai import VertexAI

# Configuration
class Config:
    """
    Contains the configuration of the LLM.
    """
    os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "D:\GEN AI\SQL Querying using GCP LLM 1\SQL Querying using GCP LLM\genai-sa-datascience_JSON04Jan24.json"
    credentials, project_id = default()
    llm = VertexAI(model_name="gemini-pro", temperature=0.2)

config = Config()

# Function to chunk PDF content
def chunk_text(text, chunk_size=500):
    return [text[i:i+chunk_size] for i in range(0, len(text), chunk_size)]

# Function to translate text using the Gemini API
def translate_text(text, language):
    if language == "Chinese":
        prompt = f"Translate the following Chinese text to English word by word:\n\n{text}"
    elif language == "Japanese":
        prompt = f"Translate the following Japanese text to English word by word:\n\n{text}"
    
    response = config.llm.predict(prompt)
    return response

# Function to extract text from PDF
def extract_text_from_pdf(pdf_file):
    text = ""
    doc = fitz.open(stream=pdf_file.read(), filetype="pdf")
    for page in doc:
        text += page.get_text("text")
    return text

# Streamlit app
st.title("PDF Translator - Chinese & Japanese to English")

# File uploader
uploaded_file = st.file_uploader("Upload PDF", type="pdf")

# Language selection
language = st.selectbox("Select language for translation", ["Chinese", "Japanese"])

# Placeholder for progress bar and live translation display
progress_bar = st.progress(0)
output_placeholder = st.empty()

if uploaded_file:
    # Extract text from uploaded PDF
    pdf_text = extract_text_from_pdf(uploaded_file)
    total_chunks = len(pdf_text)
   
    # Break large content into chunks
    chunks = chunk_text(pdf_text)
    translated_chunks = []
   
    # Translate and show progress
    for idx, chunk in enumerate(chunks):
        translated_chunk = translate_text(chunk, language)
        translated_chunks.append(translated_chunk)
       
        # Update progress bar
        progress_bar.progress((idx + 1) / len(chunks))
       
        # Show live translation
        output_placeholder.write(f"**Page {idx + 1} Translation:**\n\n{translated_chunk}")
   
    # Combine all translated chunks
    translated_text = "\n\n".join(translated_chunks)

    # Export translated text to a PDF
    export_button = st.button("Export Translated PDF")
    if export_button:
        writer = PdfWriter()
        buffer = BytesIO()
       
        # Writing translated text to PDF
        with buffer as pdf_output:
            pdf_output.write(translated_text.encode('utf-8'))
            buffer.seek(0)
            st.download_button(
                label="Download Translated PDF",
                data=buffer,
                file_name="translated.pdf",
                mime="application/pdf"
            )
