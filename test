import os
import io
import time
import streamlit as st
import pandas as pd
import google.auth
from vertexai.preview.generative_models import GenerativeModel, SafetySetting, HarmCategory, HarmBlockThreshold

# --- Gemini setup (fixed GCP configuration) ---
os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "D:/datascience-254609-genai.json"
credentials, project_id = google.auth.default()
multimodal_model = GenerativeModel("gemini-2.0-flash-thinking-exp-01-21")
safety_config = [
    SafetySetting(category=HarmCategory.HARM_CATEGORY_UNSPECIFIED, threshold=HarmBlockThreshold.BLOCK_NONE),
    SafetySetting(category=HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT, threshold=HarmBlockThreshold.BLOCK_NONE),
    SafetySetting(category=HarmCategory.HARM_CATEGORY_HARASSMENT, threshold=HarmBlockThreshold.BLOCK_NONE),
    SafetySetting(category=HarmCategory.HARM_CATEGORY_HATE_SPEECH, threshold=HarmBlockThreshold.BLOCK_NONE),
    SafetySetting(category=HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT, threshold=HarmBlockThreshold.BLOCK_NONE),
]

def safe_gemini_call(prompt_text: str, max_retries: int = 3, delay: int = 2):
    """Deterministic Gemini call with retries."""
    for _ in range(max_retries):
        try:
            return multimodal_model.generate_content([prompt_text], safety_settings=safety_config)
        except Exception:
            time.sleep(delay)
    st.error("Gemini call failed after retries.")
    return None

# --- Streamlit UI ---
st.set_page_config(page_title="SOR Phase I - Gemini Flowrate Calculator", layout="wide")
st.title("ðŸ”¬ SOR Phase I: Gemini Flowrate Calculator")

# 1. Upload Excel
master = st.file_uploader("Upload Master Excel (LHS, Pump Details, Reactor Details)", type=["xlsx"])
if not master:
    st.info("Please upload your master Excel file to begin.")
    st.stop()

# 2. Read sheets
xls = pd.ExcelFile(master)
df_lhs     = pd.read_excel(xls, sheet_name="LHS")
df_pump    = pd.read_excel(xls, sheet_name="Pump Details")
df_reactor = pd.read_excel(xls, sheet_name="Reactor Details", header=None)

# 3. Show for confirmation
st.subheader("LHS Sheet (Equivalences & Conditions)")
st.dataframe(df_lhs, use_container_width=True)

st.subheader("Pump Details Sheet")
st.dataframe(df_pump, use_container_width=True)

st.subheader("Reactor Details Sheet")
st.dataframe(df_reactor, use_container_width=True)

# 4. Number of experiments
n_exp = df_lhs.shape[0]

# 5. User prompt
st.subheader("ðŸ’¬ Describe your setup in plain English")
prompt = st.text_area(
    "Enter prompt to Gemini:",
    height=150,
    placeholder=(
        "E.g., 'Compute flowrates for 3 reagent pumps and 1 quench pump "
        "using Equivalence/Molarity with reaction time = ResidenceTimeT1 Ã— steady-state factor.'"
    )
)

# 6. Compute via Gemini
if st.button("ðŸ¤– Gemini Compute Flowrates"):
    if not prompt.strip():
        st.error("Please enter a description of your reaction and flowrate requirements.")
    else:
        # Build strict instruction
        cols = list(df_lhs.columns) + ["Reaction Time"]
        pump_cols = [f"Flowrate of Pump{i+1}" for i in range(df_pump.shape[0])]
        cols += pump_cols + ["Total Flowrate"]

        full_prompt = (
            f"Master Excel has {n_exp} experiments in LHS, Pump Details, Reactor Details. "
            "Compute a CSV table with columns exactly:\n"
            + ", ".join(cols) +
            "\nReturn ONLY the raw CSV rows (no header row, no markdown, no explanation).\n"
            f"User instruction: {prompt}"
        )

        response = safe_gemini_call(full_prompt)
        if response:
            text = response.text.strip()
            try:
                # Parse CSV (assumes no header in text, add headers manually)
                result_df = pd.read_csv(io.StringIO(text), header=None, names=cols)
                st.subheader("ðŸ“Š Geminiâ€‘generated Flowrate Results")
                st.dataframe(result_df, use_container_width=True)

                # Download as Excel
                towrite = io.BytesIO()
                result_df.to_excel(towrite, index=False, sheet_name="SOR_RESULT")
                towrite.seek(0)
                st.download_button(
                    "ðŸ“¥ Download SOR_RESULT.xlsx",
                    data=towrite,
                    file_name="SOR_RESULT.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )
            except Exception as e:
                st.error(f"Failed to parse Gemini output as CSV: {e}")
